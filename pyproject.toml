[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "harborai"
version = "1.0.0-beta.7"
description = "HarborAI - 高性能AI API代理和管理平台"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "HarborAI Team", email = "team@harborai.com"},
]
maintainers = [
    {name = "HarborAI Team", email = "team@harborai.com"},
]
keywords = [
    "ai",
    "api",
    "proxy",
    "openai",
    "anthropic",
    "llm",
    "machine-learning",
    "artificial-intelligence",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "httpx>=0.25.0",
    "redis>=5.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "psycopg2-binary>=2.9.0",
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-dotenv>=1.0.0",
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "opentelemetry-instrumentation-httpx>=0.42b0",
    "opentelemetry-instrumentation-redis>=0.42b0",
    "opentelemetry-instrumentation-sqlalchemy>=0.42b0",
    "opentelemetry-exporter-prometheus>=1.12.0",
    "tenacity>=8.2.0",
    "aiofiles>=23.2.0",
    "jinja2>=3.1.0",
    "click>=8.1.0",
    "rich>=13.7.0",
    "typer>=0.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "pytest-html>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "black>=23.12.0",
    "isort>=5.13.0",
    "flake8>=6.1.0",
    "mypy>=1.8.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "pre-commit>=3.6.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "pytest-html>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "httpx>=0.25.0",
    "respx>=0.20.0",
    "factory-boy>=3.3.0",
    "faker>=20.1.0",
    "freezegun>=1.2.0",
    "testcontainers>=3.7.0",
    "psutil>=5.9.0",
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.0",
    "locust>=2.17.0",
    "aioresponses>=0.7.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
    "mkdocstrings[python]>=0.24.0",
]
all = [
    "harborai[dev,test,docs]",
]

[project.urls]
Homepage = "https://github.com/harborai/harborai"
Documentation = "https://harborai.github.io/harborai/"
Repository = "https://github.com/harborai/harborai.git"
"Bug Tracker" = "https://github.com/harborai/harborai/issues"
Changelog = "https://github.com/harborai/harborai/blob/main/CHANGELOG.md"

[project.scripts]
harborai = "harborai.cli.main:cli"

[tool.hatch.build.targets.wheel]
packages = ["harborai"]

# Black配置
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | migrations
  )/
)
'''

# isort配置
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["migrations/*"]

# MyPy配置
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true



[[tool.mypy.overrides]]
module = [
    "redis.*",
    "sqlalchemy.*",
    "alembic.*",
    "psycopg2.*",
    "prometheus_client.*",
    "opentelemetry.*",
    "testcontainers.*",
    "locust.*",
    "memory_profiler.*",
    "line_profiler.*",
]
ignore_missing_imports = true

# Pytest配置
[tool.pytest.ini_options]
minversion = "7.0"
addopts = """
    -ra
    --strict-markers
    --strict-config
    --cov=harborai
    --cov-report=term-missing:skip-covered
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=80
    --tb=short
"""
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "unit: Unit tests",
    "functional: Functional tests",
    "integration: Integration tests",
    "performance: Performance tests",
    "security: Security tests",
    "smoke: Smoke tests",
    "regression: Regression tests",
    "real_api: Real API tests",
    "mock_api: Mock API tests",
    "slow: Slow tests",
    "benchmark: Benchmark tests",
    "stress: Stress tests",
    "load: Load tests",
    "api_compatibility: API compatibility tests",
    "streaming: Streaming response tests",
    "structured_output: Structured output tests",
    "reasoning_model: Reasoning model tests",
    "error_handling: Error handling tests",
    "concurrency: Concurrency tests",
    "resource_monitoring: Resource monitoring tests",
    "openai_alignment: OpenAI alignment tests",
    "standard_benchmark: Standard benchmark tests",
    "comprehensive_benchmark: Comprehensive benchmark tests",
    "regression_benchmark: Regression benchmark tests",
    "performance_benchmark: Performance benchmark tests",
    "concurrent: Concurrent tests",
    "memory: Memory tests",
    "network: Network tests",
    "endurance: Endurance tests",
    "scalability: Scalability tests",
    "throughput: Throughput tests",
    "latency: Latency tests",
    "capacity: Capacity tests",
    "api: API tests",
]

# Coverage配置
[tool.coverage.run]
source = ["harborai"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/virtualenv/*",
    "*/.venv/*",
    "*/site-packages/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

# Bandit配置
[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]

# Ruff配置（可选的更快的linter）
[tool.ruff]
line-length = 88
target-version = "py39"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011", "B018"]

[tool.ruff.isort]
known-first-party = ["harborai"]

[tool.ruff.pyupgrade]
keep-runtime-typing = true