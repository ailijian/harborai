# HarborAI 环境变量配置示例
# 复制此文件为 .env 并填入实际值

# =============================================================================
# 基础配置
# =============================================================================

# 调试模式 (true/false)
HARBORAI_DEBUG=false

# 日志级别 (DEBUG, INFO, WARNING, ERROR, CRITICAL)
# 注意：使用 LOG_LEVEL 而不是 HARBORAI_LOG_LEVEL
LOG_LEVEL=INFO

# 运行环境 (development/staging/production)
ENVIRONMENT=development

# 默认请求超时时间 (秒)
HARBORAI_TIMEOUT=60

# 请求超时时间 (秒) - 增加到90秒以适应AI模型响应时间
REQUEST_TIMEOUT=90

# 连接超时时间 (秒) - 增加到30秒提高连接稳定性
CONNECT_TIMEOUT=30

# 默认重试次数
HARBORAI_MAX_RETRIES=3

# 重试间隔 (秒)
HARBORAI_RETRY_DELAY=1.0

# 是否启用详细错误信息
VERBOSE_ERRORS=true

# 是否启用 API 调用模拟 (用于测试)
MOCK_API_CALLS=false

# 测试模式下的固定响应
TEST_FIXED_RESPONSE=false

# =============================================================================
# API 密钥配置 - 各大模型厂商的 API 密钥
# =============================================================================

# DeepSeek API 配置 (推荐使用，支持 deepseek-chat 和推理模型 deepseek-reasoner)
# 获取API密钥：https://platform.deepseek.com/api_keys
DEEPSEEK_API_KEY=your-deepseek-api-key-here
DEEPSEEK_BASE_URL=https://api.deepseek.com/v1

# 百度千帆文心一言 API 配置
WENXIN_API_KEY=your-wenxin-api-key-here
WENXIN_BASE_URL=https://qianfan.baidubce.com/v2

# 火山引擎豆包 API 配置
DOUBAO_API_KEY=your-doubao-api-key-here
DOUBAO_BASE_URL=https://ark.cn-beijing.volces.com/api/v3

# OpenAI API 配置
# 获取API密钥：https://platform.openai.com/api-keys
OPENAI_API_KEY=your-openai-api-key-here
OPENAI_BASE_URL=https://api.openai.com/v1

# =============================================================================
# 性能优化配置
# =============================================================================

# 性能模式 (fast/balanced/full)
# fast     - 快速模式，禁用复杂中间件和详细追踪，接近原生性能
# balanced - 平衡模式，平衡性能与功能，启用核心功能
# full     - 完整模式，完整功能，启用所有监控和追踪
HARBORAI_PERFORMANCE_MODE=full

# 是否启用快速路径优化 (true/false)
HARBORAI_FAST_PATH=true

# 快速路径适用的模型列表 (逗号分隔，推荐使用 deepseek-chat)
HARBORAI_FAST_PATH_MODELS=deepseek-chat,deepseek-reasoner,ernie-3.5-8k,ernie-4.0-turbo-8k

# 快速路径最大token数 (设置为 None 或注释掉表示无限制，由模型厂商控制)
# HARBORAI_FAST_PATH_MAX_TOKENS=1000

# 快速路径是否跳过成本追踪 (true/false)
HARBORAI_FAST_PATH_SKIP_COST=false

# 是否启用异步装饰器 (true/false)
HARBORAI_ASYNC_DECORATORS=true

# 是否启用PostgreSQL日志记录 (true/false)
HARBORAI_POSTGRES_LOGGING=true

# 是否启用详细追踪 (true/false)
HARBORAI_DETAILED_TRACING=true

# =============================================================================
# 结构化输出配置
# =============================================================================

# 默认结构化输出提供者 (agently/native)
HARBORAI_STRUCTURED_PROVIDER=agently
DEFAULT_STRUCTURED_PROVIDER=agently

# Agently 配置
AGENTLY_TIMEOUT=30
AGENTLY_MAX_RETRIES=3

# 是否启用流式结构化输出
STREAM_STRUCTURED_OUTPUT=true

# =============================================================================
# 数据库配置 - PostgreSQL 用于日志存储和持久化
# =============================================================================

# PostgreSQL 连接URL (可选，如果设置则优先使用)
HARBORAI_POSTGRES_URL=postgresql+asyncpg://harborai:password@localhost:5432/harborai

# PostgreSQL 分项配置 (当未设置POSTGRES_URL时使用)
HARBORAI_POSTGRES_HOST=localhost
HARBORAI_POSTGRES_PORT=5432
HARBORAI_POSTGRES_USER=harborai
HARBORAI_POSTGRES_PASSWORD=your-secure-password
HARBORAI_POSTGRES_DATABASE=harborai

# 传统数据库配置 (兼容性配置，可选)
DATABASE_URL=postgresql://username:password@localhost:5432/harborai
DB_HOST=localhost
DB_PORT=5432
DB_NAME=harborai
DB_USER=harborai_user
DB_PASSWORD=your-secure-password
DB_SSL_MODE=prefer

# 数据库连接池配置
DB_POOL_SIZE=10
DB_MAX_OVERFLOW=20
DB_POOL_TIMEOUT=30

# =============================================================================
# 日志配置
# =============================================================================

# HarborAI 文件日志目录
HARBORAI_FILE_LOG_DIR=./logs

# 是否启用异步日志 (true/false)
HARBORAI_ASYNC_LOGGING=true

# 日志队列大小
LOG_QUEUE_SIZE=10000

# 日志批处理大小
LOG_BATCH_SIZE=100

# 日志刷新间隔 (秒)
LOG_FLUSH_INTERVAL=5

# 是否启用日志脱敏
LOG_SANITIZATION=true

# 是否记录请求/响应内容
LOG_REQUEST_RESPONSE=true

# 日志数据保留天数
HARBORAI_LOG_RETENTION_DAYS=30

# =============================================================================
# 追踪和监控配置
# =============================================================================

# 是否启用全链路追踪
TRACING_ENABLED=true

# Trace ID 生成方式 (uuid4, timestamp, custom)
TRACE_ID_TYPE=uuid4

# 是否启用性能监控
PERFORMANCE_MONITORING=true

# 监控数据采样率 (0.0-1.0)
MONITORING_SAMPLE_RATE=0.1

# 追踪数据保留天数
TRACE_RETENTION_DAYS=7

# =============================================================================
# 成本追踪配置
# =============================================================================

# 是否启用成本追踪 (true/false)
HARBORAI_COST_TRACKING=true

# 成本计算货币单位
COST_CURRENCY=RMB

# 成本数据保留天数 (永久保存设为 -1)
COST_RETENTION_DAYS=-1

# API 价格配置 (每1K tokens的价格)
# OpenAI GPT-4 价格
OPENAI_GPT4_INPUT_PRICE=0.03
OPENAI_GPT4_OUTPUT_PRICE=0.06

# DeepSeek 价格
DEEPSEEK_INPUT_PRICE=0.004
DEEPSEEK_OUTPUT_PRICE=0.008

# =============================================================================
# 重试和容错配置
# =============================================================================

# 默认重试次数
DEFAULT_RETRY_COUNT=3

# 重试间隔基数 (秒)
RETRY_BASE_DELAY=1

# 重试最大间隔 (秒)
RETRY_MAX_DELAY=60

# 重试指数退避因子
RETRY_BACKOFF_FACTOR=2

# 是否启用 jitter (随机化重试间隔)
RETRY_JITTER=true

# =============================================================================
# 降级策略配置
# =============================================================================

# 是否启用降级策略
HARBORAI_ENABLE_FALLBACK=true

# 降级模型列表（逗号分隔，按优先级排序）
HARBORAI_FALLBACK_MODELS=deepseek-chat,ernie-4.0-turbo-8k,doubao-1-5-pro-32k-character-250715,ernie-3.5-8k

# =============================================================================
# 缓存配置
# =============================================================================

# 是否启用token缓存 (true/false)
HARBORAI_TOKEN_CACHE=true

# token缓存过期时间 (秒)
HARBORAI_TOKEN_CACHE_TTL=300

# 是否启用响应缓存 (true/false)
HARBORAI_RESPONSE_CACHE=true
CACHE_ENABLED=false

# 响应缓存过期时间 (秒)
HARBORAI_RESPONSE_CACHE_TTL=600
CACHE_TTL=3600

# 缓存清理间隔 (秒)
HARBORAI_CACHE_CLEANUP_INTERVAL=300

# 缓存类型 (memory, redis)
CACHE_TYPE=memory

# Redis 缓存配置 (当 CACHE_TYPE=redis 时)
REDIS_URL=redis://localhost:6379/0
REDIS_PASSWORD=
REDIS_DB=0

# =============================================================================
# 性能管理器配置
# =============================================================================

# 是否启用性能管理器 (true/false)
HARBORAI_PERFORMANCE_MANAGER=true

# 是否启用后台任务 (true/false)
HARBORAI_BACKGROUND_TASKS=true

# 后台任务工作线程数
HARBORAI_BACKGROUND_WORKERS=2

# 是否启用插件预加载 (true/false)
HARBORAI_PLUGIN_PRELOAD=true

# 插件缓存大小
HARBORAI_PLUGIN_CACHE_SIZE=100

# =============================================================================
# 安全配置
# =============================================================================

# API 密钥加密密钥 (用于存储时加密)
ENCRYPTION_KEY=your-32-character-encryption-key-here

# 是否启用 API 密钥轮换
API_KEY_ROTATION=false

# API 密钥轮换间隔 (天)
API_KEY_ROTATION_DAYS=30

# 是否启用请求签名验证
REQUEST_SIGNING=false

# =============================================================================
# 插件配置
# =============================================================================

# 插件目录
PLUGIN_DIR=./harborai/core/plugins

# 是否启用插件自动发现
PLUGIN_AUTO_DISCOVERY=true

# 插件加载超时 (秒)
PLUGIN_LOAD_TIMEOUT=10

# =============================================================================
# 限流配置
# =============================================================================

# 是否启用客户端限流
RATE_LIMITING=true

# 每分钟最大请求数
MAX_REQUESTS_PER_MINUTE=600

# 每小时最大请求数
MAX_REQUESTS_PER_HOUR=10000

# 限流窗口类型 (sliding, fixed)
RATE_LIMIT_WINDOW=sliding

# =============================================================================
# 数据生命周期管理
# =============================================================================

# 是否启用自动数据清理
AUTO_CLEANUP=true

# 数据清理执行时间 (24小时制，如 02:00)
CLEANUP_TIME=02:00

# =============================================================================
# 通知配置
# =============================================================================

# 是否启用错误通知
ERROR_NOTIFICATIONS=false

# 通知方式 (email, webhook, slack)
NOTIFICATION_TYPE=webhook

# Webhook URL (当 NOTIFICATION_TYPE=webhook 时)
NOTIFICATION_WEBHOOK_URL=https://your-webhook-url.com/notify

# 邮件通知配置 (当 NOTIFICATION_TYPE=email 时)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASSWORD=your-app-password
NOTIFICATION_EMAIL_TO=admin@yourcompany.com

# =============================================================================
# Docker 和部署配置
# =============================================================================

# Docker 网络名称
DOCKER_NETWORK=harborai-network

# PostgreSQL Docker 容器配置
POSTGRES_CONTAINER_NAME=harborai-postgres
POSTGRES_DOCKER_IMAGE=postgres:15

# 是否在 Docker 中运行
RUNNING_IN_DOCKER=false

# 容器健康检查间隔 (秒)
HEALTH_CHECK_INTERVAL=30

# =============================================================================
# FastHarborAI 内存优化配置
# =============================================================================

# 是否启用内存优化 (true/false)
# 注意：仅 FastHarborAI 客户端支持此功能
HARBORAI_ENABLE_MEMORY_OPTIMIZATION=true

# 内存优化缓存大小
HARBORAI_MEMORY_CACHE_SIZE=1000

# 对象池大小
HARBORAI_MEMORY_OBJECT_POOL_SIZE=100

# 是否启用弱引用 (true/false)
HARBORAI_MEMORY_ENABLE_WEAK_REFERENCES=true

# 内存阈值 (MB)
HARBORAI_MEMORY_THRESHOLD_MB=50.0

# 自动清理间隔 (秒)
HARBORAI_MEMORY_AUTO_CLEANUP_INTERVAL=600

# =============================================================================
# 开发和测试配置
# =============================================================================

# 运行环境 (development/staging/production)
HARBORAI_ENV=development

# 是否启用真实API测试 (true/false)
# 仅在测试环境中使用，需要真实的API密钥
ENABLE_REAL_API_TESTS=false

# =============================================================================
# OpenTelemetry 分布式追踪配置
# =============================================================================

# Protobuf 实现方式 (python/cpp)
# 设置为 python 以解决 OpenTelemetry 与新版 protobuf 的兼容性问题
PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python

# 是否启用 OpenTelemetry 追踪 (true/false)
OTEL_ENABLED=true

# OpenTelemetry 服务名称
OTEL_SERVICE_NAME=harborai

# OpenTelemetry 服务版本
OTEL_SERVICE_VERSION=1.0.0

# OpenTelemetry 环境标识
OTEL_ENVIRONMENT=development

# OpenTelemetry 资源属性 (键值对，逗号分隔)
OTEL_RESOURCE_ATTRIBUTES=service.name=harborai,service.version=1.0.0,deployment.environment=development

# =============================================================================
# OpenTelemetry 导出器配置
# =============================================================================

# OTLP 导出器端点 (gRPC)
OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317

# OTLP 导出器协议 (grpc/http/json)
OTEL_EXPORTER_OTLP_PROTOCOL=grpc

# OTLP 导出器头部信息 (可选，用于认证)
# OTEL_EXPORTER_OTLP_HEADERS=api-key=your-api-key

# Jaeger 导出器端点 (可选)
# OTEL_EXPORTER_JAEGER_ENDPOINT=http://localhost:14268/api/traces

# 控制台导出器 (开发调试用)
OTEL_EXPORTER_CONSOLE_ENABLED=false

# =============================================================================
# OpenTelemetry 采样配置
# =============================================================================

# 追踪采样率 (0.0-1.0)
# 1.0 表示采样所有追踪，0.1 表示采样 10%
OTEL_TRACES_SAMPLER=traceidratio

# 采样率参数
OTEL_TRACES_SAMPLER_ARG=1.0

# =============================================================================
# OpenTelemetry 仪表化配置
# =============================================================================

# 是否启用 FastAPI 自动仪表化 (true/false)
OTEL_PYTHON_FASTAPI_INSTRUMENTATION_ENABLED=true

# 是否启用 HTTPX 自动仪表化 (true/false)
OTEL_PYTHON_HTTPX_INSTRUMENTATION_ENABLED=true

# 是否启用 SQLAlchemy 自动仪表化 (true/false)
OTEL_PYTHON_SQLALCHEMY_INSTRUMENTATION_ENABLED=true

# 是否启用 Redis 自动仪表化 (true/false)
OTEL_PYTHON_REDIS_INSTRUMENTATION_ENABLED=true

# 是否记录 SQL 语句 (true/false)
OTEL_PYTHON_SQLALCHEMY_RECORD_STATEMENTS=false

# 是否记录 HTTP 请求体 (true/false)
OTEL_PYTHON_HTTPX_RECORD_REQUEST_BODY=false

# 是否记录 HTTP 响应体 (true/false)
OTEL_PYTHON_HTTPX_RECORD_RESPONSE_BODY=false

# =============================================================================
# 生产环境使用提示
# =============================================================================
# 在生产环境中，请确保：
# 1. 设置 HARBORAI_ENV=production
# 2. 设置 HARBORAI_DEBUG=false
# 3. 使用安全的数据库密码
# 4. 根据实际负载调整性能模式
# 5. 启用适当的日志级别 (INFO 或 WARNING)
# 6. 定期备份数据库
# 7. 监控内存和性能指标
# 8. 保护API密钥安全，避免泄露
# 9. 设置 PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python 确保 OpenTelemetry 正常工作
# 10. 配置合适的 OpenTelemetry 导出器端点和采样率
# 11. 在生产环境中禁用敏感数据记录 (如 HTTP 请求/响应体)
# 12. 根据监控需求调整 OpenTelemetry 仪表化配置
# 13. 设置合理的重试和超时参数
# 14. 启用适当的缓存和性能优化
# 15. 配置错误通知和监控告警
# 16. 定期清理过期数据，避免存储空间不足