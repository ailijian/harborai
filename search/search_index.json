{"config":{"lang":["zh"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"HarborAI \u6280\u672f\u6587\u6863","text":"<p>\u6b22\u8fce\u6765\u5230 HarborAI \u6280\u672f\u6587\u6863\u4e2d\u5fc3\uff01\u8fd9\u91cc\u63d0\u4f9b\u4e86\u5b8c\u6574\u7684\u6280\u672f\u6587\u6863\uff0c\u5e2e\u52a9\u60a8\u6df1\u5165\u4e86\u89e3\u548c\u4f7f\u7528 HarborAI\u3002</p>"},{"location":"#_1","title":"\ud83d\udcda \u6587\u6863\u5bfc\u822a","text":""},{"location":"#_2","title":"\ud83d\ude80 \u5feb\u901f\u5165\u95e8","text":"<ul> <li>\u5feb\u901f\u5f00\u59cb\u6307\u5357 - 5\u5206\u949f\u5feb\u901f\u4e0a\u624b HarborAI</li> <li>\u5b89\u88c5\u6307\u5357 - \u8be6\u7ec6\u7684\u5b89\u88c5\u6b65\u9aa4\u548c\u73af\u5883\u914d\u7f6e</li> </ul>"},{"location":"#api","title":"\ud83d\udcd6 API \u6587\u6863","text":"<ul> <li>API \u8be6\u7ec6\u6587\u6863 - \u5b8c\u6574\u7684 API \u63a5\u53e3\u8bf4\u660e\u548c\u793a\u4f8b</li> <li>\u7ed3\u6784\u5316\u8f93\u51fa - JSON Schema \u548c Pydantic \u6a21\u578b\u652f\u6301</li> <li>\u63a8\u7406\u6a21\u578b - \u652f\u6301\u601d\u8003\u8fc7\u7a0b\u7684\u63a8\u7406\u6a21\u578b\u8c03\u7528</li> </ul>"},{"location":"#_3","title":"\ud83c\udfd7\ufe0f \u67b6\u6784\u8bbe\u8ba1","text":"<ul> <li>\u7cfb\u7edf\u67b6\u6784 - HarborAI \u7684\u6574\u4f53\u67b6\u6784\u8bbe\u8ba1</li> <li>\u63d2\u4ef6\u7cfb\u7edf - \u53ef\u6269\u5c55\u7684\u63d2\u4ef6\u67b6\u6784</li> <li>\u6027\u80fd\u4f18\u5316\u67b6\u6784 - \u4e09\u5c42\u6027\u80fd\u4f18\u5316\u8bbe\u8ba1</li> </ul>"},{"location":"#_4","title":"\u26a1 \u6027\u80fd\u4f18\u5316","text":"<ul> <li>\u6027\u80fd\u4f18\u5316\u62a5\u544a - \u8be6\u7ec6\u7684\u6027\u80fd\u6d4b\u8bd5\u548c\u4f18\u5316\u6210\u679c</li> <li>\u5185\u5b58\u4f18\u5316 - \u5185\u5b58\u4f7f\u7528\u63a7\u5236\u548c\u4f18\u5316\u7b56\u7565</li> <li>\u5e76\u53d1\u4f18\u5316 - \u9ad8\u5e76\u53d1\u5904\u7406\u80fd\u529b\u63d0\u5347</li> </ul>"},{"location":"#_5","title":"\ud83d\udee0\ufe0f \u5f00\u53d1\u6307\u5357","text":"<ul> <li>\u5f00\u53d1\u73af\u5883\u8bbe\u7f6e - \u672c\u5730\u5f00\u53d1\u73af\u5883\u914d\u7f6e</li> <li>\u4ee3\u7801\u89c4\u8303 - \u7f16\u7801\u6807\u51c6\u548c\u6700\u4f73\u5b9e\u8df5</li> <li>\u6d4b\u8bd5\u6307\u5357 - \u5355\u5143\u6d4b\u8bd5\u3001\u96c6\u6210\u6d4b\u8bd5\u548c\u6027\u80fd\u6d4b\u8bd5</li> </ul>"},{"location":"#_6","title":"\ud83d\ude80 \u90e8\u7f72\u6307\u5357","text":"<ul> <li>\u751f\u4ea7\u90e8\u7f72 - \u751f\u4ea7\u73af\u5883\u90e8\u7f72\u65b9\u6848</li> <li>Docker \u90e8\u7f72 - \u5bb9\u5668\u5316\u90e8\u7f72\u6307\u5357</li> <li>Kubernetes \u90e8\u7f72 - K8s \u96c6\u7fa4\u90e8\u7f72</li> </ul>"},{"location":"#_7","title":"\ud83d\udcca \u76d1\u63a7\u8fd0\u7ef4","text":"<ul> <li>\u76d1\u63a7\u6307\u6807 - Prometheus \u6307\u6807\u548c Grafana \u4eea\u8868\u677f</li> <li>\u65e5\u5fd7\u7ba1\u7406 - \u7ed3\u6784\u5316\u65e5\u5fd7\u548c\u65e5\u5fd7\u805a\u5408</li> <li>\u6545\u969c\u6392\u67e5 - \u5e38\u89c1\u95ee\u9898\u548c\u89e3\u51b3\u65b9\u6848</li> </ul>"},{"location":"#_8","title":"\ud83c\udfaf \u6587\u6863\u7279\u8272","text":""},{"location":"#_9","title":"\ud83d\udccb \u5b8c\u6574\u6027","text":"<ul> <li>\u5168\u9762\u8986\u76d6: \u4ece\u57fa\u7840\u4f7f\u7528\u5230\u9ad8\u7ea7\u7279\u6027\u7684\u5b8c\u6574\u6587\u6863</li> <li>\u5b9e\u7528\u793a\u4f8b: \u6bcf\u4e2a\u529f\u80fd\u90fd\u63d0\u4f9b\u53ef\u8fd0\u884c\u7684\u4ee3\u7801\u793a\u4f8b</li> <li>\u6700\u4f73\u5b9e\u8df5: \u57fa\u4e8e\u5b9e\u9645\u9879\u76ee\u7ecf\u9a8c\u7684\u6700\u4f73\u5b9e\u8df5\u6307\u5357</li> </ul>"},{"location":"#_10","title":"\ud83d\udd04 \u5b9e\u65f6\u66f4\u65b0","text":"<ul> <li>\u7248\u672c\u540c\u6b65: \u6587\u6863\u4e0e\u4ee3\u7801\u7248\u672c\u4fdd\u6301\u540c\u6b65</li> <li>\u6301\u7eed\u6539\u8fdb: \u6839\u636e\u7528\u6237\u53cd\u9988\u6301\u7eed\u4f18\u5316\u6587\u6863\u8d28\u91cf</li> <li>\u793e\u533a\u8d21\u732e: \u6b22\u8fce\u793e\u533a\u8d21\u732e\u6587\u6863\u6539\u8fdb</li> </ul>"},{"location":"#_11","title":"\ud83c\udf10 \u591a\u8bed\u8a00\u652f\u6301","text":"<ul> <li>\u4e2d\u6587\u4f18\u5148: \u5b8c\u6574\u7684\u4e2d\u6587\u6280\u672f\u6587\u6863</li> <li>\u82f1\u6587\u6458\u8981: \u5173\u952e\u90e8\u5206\u63d0\u4f9b\u82f1\u6587\u6458\u8981</li> <li>\u4ee3\u7801\u6ce8\u91ca: \u4ee3\u7801\u793a\u4f8b\u5305\u542b\u8be6\u7ec6\u7684\u4e2d\u6587\u6ce8\u91ca</li> </ul>"},{"location":"#_12","title":"\ud83e\udd1d \u8d21\u732e\u6587\u6863","text":"<p>\u6211\u4eec\u6b22\u8fce\u60a8\u4e3a HarborAI \u6587\u6863\u505a\u51fa\u8d21\u732e\uff01</p>"},{"location":"#_13","title":"\ud83d\udcdd \u5982\u4f55\u8d21\u732e","text":"<ol> <li>\u53d1\u73b0\u95ee\u9898: \u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u6587\u6863\u95ee\u9898\u6216\u4e0d\u8db3</li> <li>\u63d0\u51fa\u5efa\u8bae: \u901a\u8fc7 GitHub Issues \u63d0\u51fa\u6539\u8fdb\u5efa\u8bae</li> <li>\u63d0\u4ea4 PR: \u76f4\u63a5\u63d0\u4ea4\u6587\u6863\u6539\u8fdb\u7684 Pull Request</li> <li>\u53c2\u4e0e\u8ba8\u8bba: \u5728\u793e\u533a\u4e2d\u5206\u4eab\u4f7f\u7528\u7ecf\u9a8c\u548c\u6700\u4f73\u5b9e\u8df5</li> </ol>"},{"location":"#_14","title":"\ud83d\udccb \u6587\u6863\u89c4\u8303","text":"<ul> <li>\u7ed3\u6784\u6e05\u6670: \u4f7f\u7528\u6e05\u6670\u7684\u6807\u9898\u5c42\u7ea7\u548c\u76ee\u5f55\u7ed3\u6784</li> <li>\u793a\u4f8b\u5b8c\u6574: \u63d0\u4f9b\u5b8c\u6574\u53ef\u8fd0\u884c\u7684\u4ee3\u7801\u793a\u4f8b</li> <li>\u4e2d\u6587\u4f18\u5148: \u4f7f\u7528\u4e2d\u6587\u7f16\u5199\uff0c\u5fc5\u8981\u65f6\u8865\u5145\u82f1\u6587</li> <li>\u683c\u5f0f\u7edf\u4e00: \u9075\u5faa Markdown \u683c\u5f0f\u89c4\u8303</li> </ul>"},{"location":"#_15","title":"\ud83d\udcde \u83b7\u53d6\u5e2e\u52a9","text":"<p>\u5982\u679c\u60a8\u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u9047\u5230\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u83b7\u53d6\u5e2e\u52a9\uff1a</p> <ul> <li>GitHub Issues: \u63d0\u4ea4\u95ee\u9898</li> <li>\u6280\u672f\u4ea4\u6d41: Discord \u793e\u533a</li> <li>\u90ae\u7bb1\u8054\u7cfb: yeyubie@gmail.com</li> </ul> <p>HarborAI \u6280\u672f\u6587\u6863 - \u8ba9 AI \u5f00\u53d1\u66f4\u7b80\u5355\u3001\u66f4\u9ad8\u6548\uff01 \ud83d\ude80</p>"},{"location":"LOG_FEATURES_GUIDE/","title":"HarborAI \u65e5\u5fd7\u67e5\u770b\u529f\u80fd\u4f7f\u7528\u6307\u5357","text":""},{"location":"LOG_FEATURES_GUIDE/#_1","title":"\u6982\u8ff0","text":"<p>HarborAI \u65e5\u5fd7\u67e5\u770b\u5de5\u5177\u5df2\u7ecf\u8fc7\u4f18\u5316\uff0c\u73b0\u5728\u652f\u6301\u66f4\u5f3a\u5927\u7684\u65e5\u5fd7\u7c7b\u578b\u8fc7\u6ee4\u548c\u5206\u6790\u529f\u80fd\u3002\u8fd9\u4e9b\u6539\u8fdb\u89e3\u51b3\u4e86\u7528\u6237\u5bf9\u53cc\u91cd\u65e5\u5fd7\u8bb0\u5f55\uff08\u8bf7\u6c42\u548c\u54cd\u5e94\u5206\u79bb\uff09\u7684\u56f0\u60d1\uff0c\u5e76\u63d0\u4f9b\u4e86\u66f4\u597d\u7684\u7528\u6237\u4f53\u9a8c\u3002</p>"},{"location":"LOG_FEATURES_GUIDE/#_2","title":"\u80cc\u666f\u8bf4\u660e","text":""},{"location":"LOG_FEATURES_GUIDE/#_3","title":"\u4e3a\u4ec0\u4e48\u4f1a\u6709\u4e24\u6761\u8bb0\u5f55\uff1f","text":"<p>HarborAI \u7684\u65e5\u5fd7\u7cfb\u7edf\u8bbe\u8ba1\u4e3a\u6bcf\u4e2a API \u8bf7\u6c42\u751f\u6210\u4e24\u6761\u8bb0\u5f55\uff1a</p> <ol> <li>\u8bf7\u6c42\u8bb0\u5f55 (<code>type: \"request\"</code>) - \u8bb0\u5f55\u8bf7\u6c42\u4fe1\u606f\uff0c\u4f46 <code>success</code>\u3001<code>latency</code>\u3001<code>tokens</code>\u3001<code>cost</code> \u7b49\u5b57\u6bb5\u4e3a <code>null</code></li> <li>\u54cd\u5e94\u8bb0\u5f55 (<code>type: \"response\"</code>) - \u8bb0\u5f55\u54cd\u5e94\u4fe1\u606f\uff0c\u5305\u542b\u5b8c\u6574\u7684 <code>success</code>\u3001<code>latency</code>\u3001<code>tokens</code>\u3001<code>cost</code> \u7b49\u6570\u636e</li> </ol> <p>\u8fd9\u79cd\u8bbe\u8ba1\u662f\u6709\u610f\u4e3a\u4e4b\u7684\u529f\u80fd\u7279\u6027\uff0c\u4e0d\u662f bug\uff0c\u76ee\u7684\u662f\uff1a - \u5206\u79bb\u5173\u6ce8\u70b9\uff1a\u8bf7\u6c42\u548c\u54cd\u5e94\u6570\u636e\u5206\u5f00\u8bb0\u5f55 - \u4fbf\u4e8e\u8c03\u8bd5\uff1a\u53ef\u4ee5\u5355\u72ec\u5206\u6790\u8bf7\u6c42\u6216\u54cd\u5e94 - \u652f\u6301\u5f02\u6b65\u5904\u7406\uff1a\u8bf7\u6c42\u53ef\u4ee5\u7acb\u5373\u8bb0\u5f55\uff0c\u54cd\u5e94\u7a0d\u540e\u8bb0\u5f55</p>"},{"location":"LOG_FEATURES_GUIDE/#_4","title":"\u65b0\u529f\u80fd\u7279\u6027","text":""},{"location":"LOG_FEATURES_GUIDE/#1","title":"1. \u5e03\u5c40\u6a21\u5f0f","text":"<p>HarborAI \u65e5\u5fd7\u67e5\u770b\u5de5\u5177\u73b0\u5728\u652f\u6301\u4e24\u79cd\u5e03\u5c40\u6a21\u5f0f\uff0c\u901a\u8fc7 <code>--layout</code> \u53c2\u6570\u63a7\u5236\uff1a</p>"},{"location":"LOG_FEATURES_GUIDE/#classic","title":"Classic \u5e03\u5c40\uff08\u7ecf\u5178\u5e03\u5c40\uff09","text":"<ul> <li>\u9ed8\u8ba4\u5e03\u5c40\u6a21\u5f0f\uff0c\u4fdd\u6301\u4f20\u7edf\u7684\u8868\u683c\u663e\u793a\u65b9\u5f0f</li> <li>Trace ID \u4f5c\u4e3a\u9996\u5217\uff0c\u4fbf\u4e8e\u5feb\u901f\u8bc6\u522b\u548c\u8ffd\u8e2a</li> <li>\u663e\u793a\u6240\u6709\u65e5\u5fd7\u7c7b\u578b\uff08REQ \u548c RES\uff09\uff0c\u89e3\u51b3\u4e86\u4e4b\u524d\u53ea\u663e\u793a\u54cd\u5e94\u8bb0\u5f55\u7684\u95ee\u9898</li> <li>\u9002\u5408\u5feb\u901f\u6d4f\u89c8\u548c\u57fa\u672c\u5206\u6790</li> </ul> <pre><code># \u4f7f\u7528\u7ecf\u5178\u5e03\u5c40\uff08\u9ed8\u8ba4\uff09\npython view_logs.py --layout classic --limit 10\n\n# \u7ecf\u5178\u5e03\u5c40\u663e\u793a\u7279\u5b9a\u7c7b\u578b\npython view_logs.py --layout classic --type request --limit 5\n</code></pre>"},{"location":"LOG_FEATURES_GUIDE/#enhanced","title":"Enhanced \u5e03\u5c40\uff08\u589e\u5f3a\u5e03\u5c40\uff09","text":"<ul> <li>\u57fa\u4e8e trace_id \u7684\u667a\u80fd\u914d\u5bf9\u663e\u793a\uff0c\u81ea\u52a8\u5339\u914d\u8bf7\u6c42\u548c\u54cd\u5e94</li> <li>\u53cc\u65f6\u95f4\u5217\u8bbe\u8ba1\uff1a\u5206\u522b\u663e\u793a\u8bf7\u6c42\u65f6\u95f4\u548c\u54cd\u5e94\u65f6\u95f4</li> <li>\u81ea\u52a8\u8ba1\u7b97\u8017\u65f6\uff1a\u663e\u793a\u4ece\u8bf7\u6c42\u5230\u54cd\u5e94\u7684\u5b8c\u6574\u8017\u65f6\uff08\u6beb\u79d2\uff09</li> <li>\u63d0\u4f9b\u66f4\u76f4\u89c2\u7684\u8bf7\u6c42-\u54cd\u5e94\u6d41\u7a0b\u89c6\u56fe</li> </ul> <pre><code># \u4f7f\u7528\u589e\u5f3a\u5e03\u5c40\npython view_logs.py --layout enhanced --limit 5\n\n# \u589e\u5f3a\u5e03\u5c40\u914d\u5408\u63d0\u4f9b\u5546\u8fc7\u6ee4\npython view_logs.py --layout enhanced --provider bytedance --limit 3\n</code></pre>"},{"location":"LOG_FEATURES_GUIDE/#2-trace-id","title":"2. Trace ID \u4f18\u5316","text":"<p>\u4e3a\u4e86\u63d0\u9ad8\u53ef\u8bfb\u6027\u548c\u7528\u6237\u4f53\u9a8c\uff0c\u6211\u4eec\u5bf9 <code>trace_id</code> \u8fdb\u884c\u4e86\u91cd\u8981\u4f18\u5316\uff1a</p> <ul> <li>\u524d\u7f00\u4f18\u5316\uff1a\u4ece <code>harborai_</code> \u7b80\u5316\u4e3a <code>hb_</code></li> <li>\u957f\u5ea6\u51cf\u5c11\uff1a\u4ece 31 \u5b57\u7b26\u51cf\u5c11\u5230 25 \u5b57\u7b26</li> <li>\u683c\u5f0f\u89c4\u8303\uff1a<code>hb_{timestamp}_{random_part}</code></li> <li>\u663e\u793a\u4f18\u5316\uff1a\u5728\u8868\u683c\u4e2d\u81ea\u52a8\u622a\u65ad\u663e\u793a\uff0c\u4fdd\u6301\u754c\u9762\u6574\u6d01</li> </ul> <pre><code># \u65b0\u7684 trace_id \u683c\u5f0f\u793a\u4f8b\nhb_1703123456789_a1b2c3d4  # 25\u5b57\u7b26\uff0c\u66f4\u7b80\u6d01\u6613\u8bfb\n</code></pre>"},{"location":"LOG_FEATURES_GUIDE/#3","title":"3. \u9ed8\u8ba4\u884c\u4e3a\u6539\u8fdb","text":"<p>\u6211\u4eec\u4fee\u590d\u4e86\u4e00\u4e2a\u91cd\u8981\u7684\u7528\u6237\u4f53\u9a8c\u95ee\u9898\uff1a</p> <ul> <li><code>--type</code> \u53c2\u6570\u9ed8\u8ba4\u503c\uff1a\u4ece <code>response</code> \u6539\u4e3a <code>all</code></li> <li>\u7ecf\u5178\u5e03\u5c40\u4fee\u590d\uff1a\u73b0\u5728\u9ed8\u8ba4\u663e\u793a\u6240\u6709\u65e5\u5fd7\u7c7b\u578b\uff08REQ \u548c RES\uff09</li> <li>\u5411\u540e\u517c\u5bb9\uff1a\u6240\u6709\u73b0\u6709\u529f\u80fd\u4fdd\u6301\u4e0d\u53d8\uff0c\u53ea\u662f\u6539\u5584\u4e86\u9ed8\u8ba4\u4f53\u9a8c</li> </ul> <p>\u8fd9\u610f\u5473\u7740\u7528\u6237\u73b0\u5728\u53ef\u4ee5\uff1a - \u76f4\u63a5\u8fd0\u884c <code>python view_logs.py</code> \u67e5\u770b\u5b8c\u6574\u7684\u8bf7\u6c42-\u54cd\u5e94\u6d41\u7a0b - \u65e0\u9700\u989d\u5916\u53c2\u6570\u5373\u53ef\u770b\u5230 REQ \u548c RES \u4e24\u79cd\u7c7b\u578b\u7684\u8bb0\u5f55 - \u66f4\u76f4\u89c2\u5730\u7406\u89e3 API \u8c03\u7528\u7684\u5b8c\u6574\u751f\u547d\u5468\u671f</p>"},{"location":"LOG_FEATURES_GUIDE/#4","title":"4. \u65e5\u5fd7\u7c7b\u578b\u8fc7\u6ee4","text":"<p>\u4f7f\u7528 <code>--type</code> \u53c2\u6570\u53ef\u4ee5\u9009\u62e9\u67e5\u770b\u4e0d\u540c\u7c7b\u578b\u7684\u65e5\u5fd7\uff1a</p> <pre><code># \u663e\u793a\u6240\u6709\u65e5\u5fd7\uff08\u8bf7\u6c42 + \u54cd\u5e94\uff09- \u73b0\u5728\u662f\u9ed8\u8ba4\u884c\u4e3a\npython view_logs.py --type all\n\n# \u4ec5\u663e\u793a\u8bf7\u6c42\u65e5\u5fd7\npython view_logs.py --type request\n\n# \u4ec5\u663e\u793a\u54cd\u5e94\u65e5\u5fd7\npython view_logs.py --type response\n\n# \u914d\u5bf9\u663e\u793a\u8bf7\u6c42-\u54cd\u5e94\u65e5\u5fd7\npython view_logs.py --type paired\n</code></pre>"},{"location":"LOG_FEATURES_GUIDE/#5","title":"5. \u89c6\u89c9\u533a\u5206","text":"<p>\u4e0d\u540c\u7c7b\u578b\u7684\u65e5\u5fd7\u73b0\u5728\u6709\u4e0d\u540c\u7684\u89c6\u89c9\u6807\u8bc6\uff1a</p> <ul> <li>\ud83d\udce4 REQ - \u8bf7\u6c42\u65e5\u5fd7\uff08\u84dd\u8272\uff09</li> <li>\ud83d\udce5 RES - \u54cd\u5e94\u65e5\u5fd7\uff08\u7eff\u8272\uff09</li> <li>\u2753 UNK - \u672a\u77e5\u7c7b\u578b\uff08\u9ec4\u8272\uff09</li> </ul>"},{"location":"LOG_FEATURES_GUIDE/#6","title":"6. \u914d\u5bf9\u663e\u793a\u529f\u80fd","text":"<p>\u4e24\u79cd\u65b9\u5f0f\u542f\u7528\u914d\u5bf9\u663e\u793a\uff1a</p> <pre><code># \u65b9\u5f0f1\uff1a\u4f7f\u7528 --type paired\npython view_logs.py --type paired\n\n# \u65b9\u5f0f2\uff1a\u4f7f\u7528\u4e13\u7528\u53c2\u6570\npython view_logs.py --show-request-response-pairs\n</code></pre> <p>\u914d\u5bf9\u663e\u793a\u4f1a\uff1a - \u6309 <code>trace_id</code> \u5339\u914d\u8bf7\u6c42\u548c\u54cd\u5e94 - \u6309\u65f6\u95f4\u987a\u5e8f\u663e\u793a\u914d\u5bf9\u7684\u65e5\u5fd7 - \u5982\u679c\u627e\u4e0d\u5230\u914d\u5bf9\uff0c\u663e\u793a\u6240\u6709\u76f8\u5173\u65e5\u5fd7</p>"},{"location":"LOG_FEATURES_GUIDE/#7","title":"7. \u65e5\u5fd7\u7c7b\u578b\u7edf\u8ba1","text":"<p>\u4f7f\u7528 <code>--stats</code> \u53c2\u6570\u65f6\uff0c\u73b0\u5728\u4f1a\u663e\u793a\u989d\u5916\u7684\u65e5\u5fd7\u7c7b\u578b\u7edf\u8ba1\uff1a</p> <pre><code>python view_logs.py --stats --days 7\n</code></pre> <p>\u8f93\u51fa\u5305\u542b\uff1a - \u4f20\u7edf\u7684\u6a21\u578b\u7edf\u8ba1\u8868\u683c - \u65b0\u7684\u65e5\u5fd7\u7c7b\u578b\u5206\u5e03\u7edf\u8ba1\uff08REQUEST/RESPONSE/UNKNOWN \u7684\u6570\u91cf\u548c\u5360\u6bd4\uff09</p>"},{"location":"LOG_FEATURES_GUIDE/#8-json","title":"8. JSON \u683c\u5f0f\u652f\u6301","text":"<p>\u6240\u6709\u65b0\u529f\u80fd\u90fd\u652f\u6301 JSON \u683c\u5f0f\u8f93\u51fa\uff1a</p> <pre><code># JSON \u683c\u5f0f\u7684\u7edf\u8ba1\u4fe1\u606f\npython view_logs.py --stats --format json\n\n# JSON \u683c\u5f0f\u7684\u65e5\u5fd7\u5217\u8868\npython view_logs.py --type all --format json\n</code></pre>"},{"location":"LOG_FEATURES_GUIDE/#_5","title":"\u4f7f\u7528\u793a\u4f8b","text":""},{"location":"LOG_FEATURES_GUIDE/#_6","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code># \u67e5\u770b\u5e2e\u52a9\npython view_logs.py --help\n\n# \u67e5\u770b\u6700\u8fd1\u7684\u65e5\u5fd7\uff08\u9ed8\u8ba4\u663e\u793a\u6240\u6709\u7c7b\u578b\uff09\npython view_logs.py --limit 10\n\n# \u67e5\u770b\u6700\u8fd13\u5929\u7684\u6240\u6709\u65e5\u5fd7\uff0c\u9650\u523610\u6761\npython view_logs.py --days 3 --limit 10\n\n# \u67e5\u770b\u7279\u5b9a\u6a21\u578b\u7684\u8bf7\u6c42\u65e5\u5fd7\npython view_logs.py --type request --model \"doubao-1-5-pro\" --limit 5\n</code></pre>"},{"location":"LOG_FEATURES_GUIDE/#_7","title":"\u5e03\u5c40\u6a21\u5f0f\u7528\u6cd5","text":"<pre><code># \u4f7f\u7528\u7ecf\u5178\u5e03\u5c40\uff08\u9ed8\u8ba4\uff09- \u5feb\u901f\u6d4f\u89c8\u6240\u6709\u65e5\u5fd7\npython view_logs.py --layout classic --limit 10\n\n# \u4f7f\u7528\u589e\u5f3a\u5e03\u5c40 - \u667a\u80fd\u914d\u5bf9\u663e\u793a\uff0c\u5305\u542b\u8017\u65f6\u4fe1\u606f\npython view_logs.py --layout enhanced --limit 5\n\n# \u589e\u5f3a\u5e03\u5c40\u914d\u5408\u7279\u5b9a\u63d0\u4f9b\u5546\u8fc7\u6ee4\npython view_logs.py --layout enhanced --provider bytedance --limit 3\n\n# \u7ecf\u5178\u5e03\u5c40\u663e\u793a\u7279\u5b9a\u7c7b\u578b\npython view_logs.py --layout classic --type request --limit 5\n</code></pre>"},{"location":"LOG_FEATURES_GUIDE/#_8","title":"\u9ad8\u7ea7\u7528\u6cd5","text":"<pre><code># \u914d\u5bf9\u663e\u793a\u7279\u5b9a\u63d0\u4f9b\u5546\u7684\u65e5\u5fd7\npython view_logs.py --type paired --provider bytedance --limit 6\n\n# \u83b7\u53d6\u8be6\u7ec6\u7edf\u8ba1\u4fe1\u606f\npython view_logs.py --stats --days 30\n\n# \u5bfc\u51faJSON\u683c\u5f0f\u7684\u7edf\u8ba1\u6570\u636e\npython view_logs.py --stats --format json --days 7 &gt; stats.json\n\n# \u7ed3\u5408\u5e03\u5c40\u548c\u8fc7\u6ee4\u7684\u590d\u5408\u67e5\u8be2\npython view_logs.py --layout enhanced --provider openai --model \"gpt-4\" --limit 3\n</code></pre>"},{"location":"LOG_FEATURES_GUIDE/#_9","title":"\u8c03\u8bd5\u573a\u666f","text":"<pre><code># \u5feb\u901f\u67e5\u770b\u6700\u8fd1\u7684\u6240\u6709\u65e5\u5fd7\uff08\u9ed8\u8ba4\u884c\u4e3a\uff09\npython view_logs.py --limit 10\n\n# \u4f7f\u7528\u7ecf\u5178\u5e03\u5c40\u67e5\u770b\u8bf7\u6c42\uff0c\u68c0\u67e5\u8f93\u5165\u53c2\u6570\npython view_logs.py --layout classic --type request --limit 5\n\n# \u4f7f\u7528\u7ecf\u5178\u5e03\u5c40\u67e5\u770b\u54cd\u5e94\uff0c\u68c0\u67e5\u8f93\u51fa\u7ed3\u679c\npython view_logs.py --layout classic --type response --limit 5\n\n# \u4f7f\u7528\u589e\u5f3a\u5e03\u5c40\u67e5\u770b\u914d\u5bf9\u65e5\u5fd7\uff0c\u5305\u542b\u5b8c\u6574\u8017\u65f6\u4fe1\u606f\npython view_logs.py --layout enhanced --limit 4\n\n# \u4f20\u7edf\u914d\u5bf9\u67e5\u770b\u65b9\u5f0f\uff08\u4ecd\u7136\u652f\u6301\uff09\npython view_logs.py --type paired --limit 4\n\n# \u8c03\u8bd5\u7279\u5b9a\u6a21\u578b\u7684\u6027\u80fd\u95ee\u9898\npython view_logs.py --layout enhanced --model \"gpt-4\" --limit 3\n\n# \u5206\u6790\u7279\u5b9a\u63d0\u4f9b\u5546\u7684\u54cd\u5e94\u65f6\u95f4\npython view_logs.py --layout enhanced --provider openai --days 1\n</code></pre>"},{"location":"LOG_FEATURES_GUIDE/#_10","title":"\u6a21\u578b\u6210\u672c\u914d\u7f6e\u8bf4\u660e","text":""},{"location":"LOG_FEATURES_GUIDE/#_11","title":"\u5f53\u524d\u6210\u672c\u914d\u7f6e\u673a\u5236","text":"<p>HarborAI \u7684\u6a21\u578b\u6210\u672c\u914d\u7f6e\u91c7\u7528\u786c\u7f16\u7801\u65b9\u5f0f\uff0c\u6240\u6709\u6a21\u578b\u4ef7\u683c\u90fd\u9884\u5b9a\u4e49\u5728\u4ee3\u7801\u4e2d\uff0c\u8fd9\u786e\u4fdd\u4e86\u4ef7\u683c\u7684\u4e00\u81f4\u6027\u548c\u7a33\u5b9a\u6027\u3002</p>"},{"location":"LOG_FEATURES_GUIDE/#1_1","title":"1. \u5b9e\u9645\u6210\u672c\u914d\u7f6e\u4f4d\u7f6e","text":"<p>\u6a21\u578b\u4ef7\u683c\u914d\u7f6e\u4f4d\u4e8e <code>harborai/core/pricing.py</code> \u6587\u4ef6\u4e2d\u7684 <code>PricingCalculator.MODEL_PRICING</code> \u5b57\u5178\uff1a</p> <pre><code># \u6a21\u578b\u4ef7\u683c\u914d\u7f6e\uff08\u6bcf1K tokens\u7684\u4ef7\u683c\uff0c\u5355\u4f4d\uff1a\u4eba\u6c11\u5e01\uff09\nMODEL_PRICING: Dict[str, ModelPricing] = {\n    # DeepSeek\u6a21\u578b\n    \"deepseek-chat\": ModelPricing(input_price=0.002, output_price=0.003),\n    \"deepseek-reasoner\": ModelPricing(input_price=0.002, output_price=0.003),\n\n    # \u767e\u5ea6\u6587\u5fc3\u6a21\u578b\uff08Ernie\uff09\n    \"ernie-3.5-8k\": ModelPricing(input_price=0.0008, output_price=0.0032),\n    \"ernie-4.0-turbo-8k\": ModelPricing(input_price=0.0008, output_price=0.0032),\n    \"ernie-x1-turbo-32k\": ModelPricing(input_price=0.0008, output_price=0.0032),\n\n    # \u5b57\u8282\u8df3\u52a8\u8c46\u5305\u6a21\u578b\uff08Doubao\uff09\n    \"doubao-1-5-pro-32k-character-250715\": ModelPricing(input_price=0.0008, output_price=0.002),\n    \"doubao-seed-1-6-250615\": ModelPricing(input_price=0.0008, output_price=0.002),\n\n    # OpenAI\u6a21\u578b\u4ef7\u683c\uff08\u6309\u6c47\u73871\u7f8e\u5143=7.2\u4eba\u6c11\u5e01\u8f6c\u6362\uff09\n    \"gpt-3.5-turbo\": ModelPricing(input_price=0.0108, output_price=0.0144),\n    \"gpt-4\": ModelPricing(input_price=0.216, output_price=0.432),\n    \"gpt-4-turbo\": ModelPricing(input_price=0.072, output_price=0.216),\n    \"gpt-4o\": ModelPricing(input_price=0.036, output_price=0.108),\n    \"gpt-4o-mini\": ModelPricing(input_price=0.00015, output_price=0.0006),\n}\n</code></pre>"},{"location":"LOG_FEATURES_GUIDE/#2","title":"2. \u73af\u5883\u53d8\u91cf\u63a7\u5236","text":"<p>\u6210\u672c\u8ffd\u8e2a\u529f\u80fd\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u63a7\u5236\uff1a</p> <ul> <li><code>HARBORAI_COST_TRACKING=true</code> - \u542f\u7528\u6210\u672c\u8ffd\u8e2a\u529f\u80fd</li> <li><code>HARBORAI_FAST_PATH_SKIP_COST=false</code> - \u5feb\u901f\u8def\u5f84\u662f\u5426\u8df3\u8fc7\u6210\u672c\u8ba1\u7b97</li> </ul>"},{"location":"LOG_FEATURES_GUIDE/#3_1","title":"3. \u67e5\u770b\u652f\u6301\u7684\u6a21\u578b\u548c\u4ef7\u683c","text":"<p>\u4f7f\u7528 <code>PricingCalculator</code> \u7c7b\u53ef\u4ee5\u67e5\u770b\u6240\u6709\u652f\u6301\u7684\u6a21\u578b\u548c\u4ef7\u683c\uff1a</p> <pre><code>from harborai.core.pricing import PricingCalculator\n\n# \u521b\u5efa\u4ef7\u683c\u8ba1\u7b97\u5668\u5b9e\u4f8b\ncalculator = PricingCalculator()\n\n# \u67e5\u770b\u6240\u6709\u652f\u6301\u7684\u6a21\u578b\nsupported_models = calculator.list_supported_models()\nprint(\"\u652f\u6301\u7684\u6a21\u578b:\", supported_models)\n\n# \u67e5\u770b\u7279\u5b9a\u6a21\u578b\u7684\u4ef7\u683c\npricing = calculator.get_pricing(\"deepseek-chat\")\nif pricing:\n    print(f\"DeepSeek Chat \u4ef7\u683c:\")\n    print(f\"  \u8f93\u5165: {pricing.input_price} \u5143/1K tokens\")\n    print(f\"  \u8f93\u51fa: {pricing.output_price} \u5143/1K tokens\")\n\n# \u8ba1\u7b97\u6210\u672c\u793a\u4f8b\nfrom harborai.core.cost_tracking import TokenUsage\ntoken_usage = TokenUsage(input_tokens=1000, output_tokens=500)\ncost = calculator.calculate_cost(\"deepseek\", \"deepseek-chat\", token_usage)\nprint(f\"\u6210\u672c\u8ba1\u7b97\u7ed3\u679c: {cost.total_cost} \u5143\")\n</code></pre>"},{"location":"LOG_FEATURES_GUIDE/#4_1","title":"4. \u81ea\u5b9a\u4e49\u6a21\u578b\u4ef7\u683c","text":"<p>\u5982\u679c\u9700\u8981\u81ea\u5b9a\u4e49\u6a21\u578b\u4ef7\u683c\uff0c\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a</p> <p>\u65b9\u6cd51\uff1a\u4f7f\u7528 <code>add_model_pricing()</code> \u65b9\u6cd5\uff08\u63a8\u8350\uff09</p> <pre><code>from harborai.core.pricing import PricingCalculator, ModelPricing\n\ncalculator = PricingCalculator()\n\n# \u6dfb\u52a0\u81ea\u5b9a\u4e49\u6a21\u578b\u4ef7\u683c\ncalculator.add_model_pricing(\n    model_name=\"custom-model\",\n    pricing=ModelPricing(input_price=0.001, output_price=0.002)\n)\n\n# \u9a8c\u8bc1\u6dfb\u52a0\u6210\u529f\npricing = calculator.get_pricing(\"custom-model\")\nprint(f\"\u81ea\u5b9a\u4e49\u6a21\u578b\u4ef7\u683c: \u8f93\u5165={pricing.input_price}, \u8f93\u51fa={pricing.output_price}\")\n</code></pre> <p>\u65b9\u6cd52\uff1a\u76f4\u63a5\u4fee\u6539 <code>pricing.py</code> \u6587\u4ef6</p> <p>\u5728 <code>harborai/core/pricing.py</code> \u6587\u4ef6\u7684 <code>MODEL_PRICING</code> \u5b57\u5178\u4e2d\u6dfb\u52a0\u65b0\u7684\u6a21\u578b\u914d\u7f6e\uff1a</p> <pre><code>MODEL_PRICING: Dict[str, ModelPricing] = {\n    # \u73b0\u6709\u6a21\u578b...\n\n    # \u6dfb\u52a0\u65b0\u7684\u81ea\u5b9a\u4e49\u6a21\u578b\n    \"my-custom-model\": ModelPricing(input_price=0.001, output_price=0.002),\n}\n</code></pre>"},{"location":"LOG_FEATURES_GUIDE/#5_1","title":"5. \u6210\u672c\u8ffd\u8e2a\u5728\u65e5\u5fd7\u4e2d\u7684\u663e\u793a","text":"<p>\u5f53\u542f\u7528\u6210\u672c\u8ffd\u8e2a\u65f6\uff0c\u65e5\u5fd7\u4e2d\u4f1a\u663e\u793a\u8be6\u7ec6\u7684\u6210\u672c\u4fe1\u606f\uff1a</p> <pre><code>{\n  \"trace_id\": \"hb_1703123456789_a1b2c3d4\",\n  \"type\": \"response\",\n  \"model\": \"deepseek-chat\",\n  \"provider\": \"deepseek\",\n  \"tokens\": {\n    \"input\": 150,\n    \"output\": 75,\n    \"total\": 225\n  },\n  \"cost\": {\n    \"input_cost\": 0.0003,\n    \"output_cost\": 0.000225,\n    \"total_cost\": 0.000525,\n    \"currency\": \"RMB\"\n  }\n}\n</code></pre>"},{"location":"LOG_FEATURES_GUIDE/#6_1","title":"6. \u6700\u4f73\u5b9e\u8df5\u5efa\u8bae","text":"<ol> <li>\u4fdd\u6301\u9ed8\u8ba4\u914d\u7f6e\uff1a\u5bf9\u4e8e\u5927\u591a\u6570\u7528\u6237\uff0c\u4f7f\u7528\u9884\u5b9a\u4e49\u7684\u4ef7\u683c\u914d\u7f6e\u5373\u53ef\uff0c\u4ef7\u683c\u76f8\u5bf9\u7a33\u5b9a\u4e14\u51c6\u786e</li> <li>\u81ea\u5b9a\u4e49\u4ef7\u683c\u65f6\u673a\uff1a\u4ec5\u5728\u4ee5\u4e0b\u60c5\u51b5\u4e0b\u8003\u8651\u81ea\u5b9a\u4e49\u4ef7\u683c\uff1a</li> <li>\u4f7f\u7528\u4e86\u7cfb\u7edf\u4e0d\u652f\u6301\u7684\u65b0\u6a21\u578b</li> <li>\u6709\u7279\u6b8a\u7684\u4ef7\u683c\u534f\u8bae\u6216\u6298\u6263</li> <li>\u9700\u8981\u8fdb\u884c\u6210\u672c\u5206\u6790\u548c\u9884\u7b97\u63a7\u5236</li> <li>\u4ef7\u683c\u66f4\u65b0\u7b56\u7565\uff1a\u5b9a\u671f\u68c0\u67e5\u5b98\u65b9\u4ef7\u683c\u53d8\u52a8\uff0c\u53ca\u65f6\u66f4\u65b0 <code>pricing.py</code> \u4e2d\u7684\u914d\u7f6e</li> <li>\u6d4b\u8bd5\u9a8c\u8bc1\uff1a\u4fee\u6539\u4ef7\u683c\u914d\u7f6e\u540e\uff0c\u8fd0\u884c\u76f8\u5173\u6d4b\u8bd5\u786e\u4fdd\u6210\u672c\u8ba1\u7b97\u6b63\u786e</li> </ol>"},{"location":"LOG_FEATURES_GUIDE/#7_1","title":"7. \u6545\u969c\u6392\u9664","text":"<p>\u95ee\u9898\uff1a\u65e5\u5fd7\u4e2d\u770b\u4e0d\u5230\u6210\u672c\u4fe1\u606f - \u68c0\u67e5 <code>HARBORAI_COST_TRACKING=true</code> \u662f\u5426\u8bbe\u7f6e - \u786e\u8ba4\u6a21\u578b\u540d\u79f0\u5728 <code>MODEL_PRICING</code> \u5b57\u5178\u4e2d\u5b58\u5728 - \u9a8c\u8bc1 API \u54cd\u5e94\u5305\u542b token \u4f7f\u7528\u4fe1\u606f</p> <p>\u95ee\u9898\uff1a\u6210\u672c\u8ba1\u7b97\u4e0d\u51c6\u786e - \u68c0\u67e5 <code>pricing.py</code> \u4e2d\u7684\u4ef7\u683c\u914d\u7f6e\u662f\u5426\u4e3a\u6700\u65b0 - \u786e\u8ba4\u4f7f\u7528\u7684\u6a21\u578b\u540d\u79f0\u4e0e\u914d\u7f6e\u4e2d\u7684\u952e\u540d\u5b8c\u5168\u5339\u914d - \u9a8c\u8bc1 token \u8ba1\u6570\u662f\u5426\u6b63\u786e</p> <p>\u95ee\u9898\uff1a\u81ea\u5b9a\u4e49\u6a21\u578b\u4ef7\u683c\u4e0d\u751f\u6548 - \u786e\u4fdd\u6a21\u578b\u540d\u79f0\u62fc\u5199\u6b63\u786e - \u68c0\u67e5\u662f\u5426\u5728\u6b63\u786e\u7684\u4f4d\u7f6e\u6dfb\u52a0\u4e86\u4ef7\u683c\u914d\u7f6e - \u91cd\u542f\u5e94\u7528\u4ee5\u786e\u4fdd\u914d\u7f6e\u751f\u6548</p>"},{"location":"LOG_FEATURES_GUIDE/#_12","title":"\u53c2\u6570\u8bf4\u660e","text":"\u53c2\u6570 \u7c7b\u578b \u9ed8\u8ba4\u503c \u8bf4\u660e <code>--layout</code> choice <code>classic</code> \u8868\u683c\u5e03\u5c40\u6a21\u5f0f\uff1a<code>classic</code>/<code>enhanced</code> <code>--type</code> choice <code>all</code> \u65e5\u5fd7\u7c7b\u578b\u8fc7\u6ee4\uff1a<code>all</code>/<code>request</code>/<code>response</code>/<code>paired</code> <code>--show-request-response-pairs</code> flag - \u914d\u5bf9\u663e\u793a\uff08\u7b49\u540c\u4e8e <code>--type paired</code>\uff09 <code>--days</code> int 7 \u67e5\u770b\u6700\u8fd1\u51e0\u5929\u7684\u65e5\u5fd7 <code>--limit</code> int 50 \u9650\u5236\u663e\u793a\u6761\u6570 <code>--model</code> string - \u8fc7\u6ee4\u7279\u5b9a\u6a21\u578b <code>--provider</code> string - \u8fc7\u6ee4\u7279\u5b9a\u63d0\u4f9b\u5546 <code>--source</code> choice <code>auto</code> \u65e5\u5fd7\u6e90\uff1a<code>auto</code>/<code>postgres</code>/<code>file</code> <code>--format</code> choice <code>table</code> \u8f93\u51fa\u683c\u5f0f\uff1a<code>table</code>/<code>json</code> <code>--stats</code> flag - \u663e\u793a\u7edf\u8ba1\u4fe1\u606f\u800c\u4e0d\u662f\u65e5\u5fd7\u5217\u8868"},{"location":"LOG_FEATURES_GUIDE/#_13","title":"\u6f14\u793a\u811a\u672c","text":"<p>\u8fd0\u884c\u6f14\u793a\u811a\u672c\u67e5\u770b\u6240\u6709\u529f\u80fd\uff1a</p> <pre><code>python demo_log_features.py\n</code></pre> <p>\u8fd9\u4e2a\u811a\u672c\u4f1a\u9010\u6b65\u6f14\u793a\u6240\u6709\u65b0\u529f\u80fd\uff0c\u5305\u62ec\uff1a - \u5e03\u5c40\u6a21\u5f0f\uff1a\u7ecf\u5178\u5e03\u5c40\u548c\u589e\u5f3a\u5e03\u5c40\u7684\u5bf9\u6bd4\u5c55\u793a - trace_id \u4f18\u5316\uff1a\u65b0\u7684 <code>hb_</code> \u524d\u7f00\u683c\u5f0f\u5c55\u793a - \u9ed8\u8ba4\u884c\u4e3a\u6539\u8fdb\uff1a\u663e\u793a\u6240\u6709\u65e5\u5fd7\u7c7b\u578b\u7684\u9ed8\u8ba4\u884c\u4e3a - \u65e5\u5fd7\u7c7b\u578b\u8fc7\u6ee4\uff1a\u4e0d\u540c\u7c7b\u578b\u7684\u65e5\u5fd7\u8fc7\u6ee4 - \u89c6\u89c9\u533a\u5206\u6548\u679c\uff1aREQ/RES \u7c7b\u578b\u7684\u89c6\u89c9\u6807\u8bc6 - \u914d\u5bf9\u663e\u793a\u529f\u80fd\uff1a\u667a\u80fd\u914d\u5bf9\u548c\u8017\u65f6\u8ba1\u7b97 - \u7edf\u8ba1\u4fe1\u606f\u5c55\u793a\uff1a\u5305\u542b\u5e03\u5c40\u6a21\u5f0f\u7684\u7edf\u8ba1 - JSON \u683c\u5f0f\u8f93\u51fa\uff1a\u6240\u6709\u529f\u80fd\u7684 JSON \u683c\u5f0f\u652f\u6301</p>"},{"location":"LOG_FEATURES_GUIDE/#_14","title":"\u6280\u672f\u5b9e\u73b0","text":""},{"location":"LOG_FEATURES_GUIDE/#_15","title":"\u5e03\u5c40\u6a21\u5f0f\u5b9e\u73b0","text":""},{"location":"LOG_FEATURES_GUIDE/#classic_1","title":"Classic \u5e03\u5c40","text":"<ul> <li>\u8868\u683c\u7ed3\u6784\u4f18\u5316\uff1atrace_id \u4f5c\u4e3a\u9996\u5217\uff0c\u4fbf\u4e8e\u5feb\u901f\u8bc6\u522b</li> <li>\u9ed8\u8ba4\u884c\u4e3a\u4fee\u590d\uff1a\u4fee\u6539 <code>--type</code> \u53c2\u6570\u9ed8\u8ba4\u503c\u4ece <code>response</code> \u5230 <code>all</code></li> <li>\u517c\u5bb9\u6027\u4fdd\u6301\uff1a\u4fdd\u6301\u539f\u6709\u8868\u683c\u683c\u5f0f\uff0c\u786e\u4fdd\u5411\u540e\u517c\u5bb9</li> </ul>"},{"location":"LOG_FEATURES_GUIDE/#enhanced_1","title":"Enhanced \u5e03\u5c40","text":"<ul> <li>\u667a\u80fd\u914d\u5bf9\u7b97\u6cd5\uff1a\u57fa\u4e8e <code>trace_id</code> \u81ea\u52a8\u5339\u914d\u8bf7\u6c42\u548c\u54cd\u5e94\u8bb0\u5f55</li> <li>\u53cc\u65f6\u95f4\u5217\u8bbe\u8ba1\uff1a\u5206\u522b\u663e\u793a\u8bf7\u6c42\u65f6\u95f4\u548c\u54cd\u5e94\u65f6\u95f4</li> <li>\u8017\u65f6\u8ba1\u7b97\uff1a\u81ea\u52a8\u8ba1\u7b97\u8bf7\u6c42\u5230\u54cd\u5e94\u7684\u5b8c\u6574\u8017\u65f6\uff08\u6beb\u79d2\u7ea7\u7cbe\u5ea6\uff09</li> <li>\u6570\u636e\u805a\u5408\uff1a\u5c06\u914d\u5bf9\u7684\u8bb0\u5f55\u5408\u5e76\u4e3a\u5355\u884c\u663e\u793a</li> </ul>"},{"location":"LOG_FEATURES_GUIDE/#trace-id","title":"Trace ID \u4f18\u5316\u5b9e\u73b0","text":"<ul> <li>\u524d\u7f00\u7b80\u5316\uff1a\u4ece <code>harborai_</code> \u4f18\u5316\u4e3a <code>hb_</code>\uff0c\u51cf\u5c11 9 \u4e2a\u5b57\u7b26</li> <li>\u957f\u5ea6\u63a7\u5236\uff1a\u603b\u957f\u5ea6\u4ece 31 \u5b57\u7b26\u51cf\u5c11\u5230 25 \u5b57\u7b26</li> <li>\u683c\u5f0f\u6807\u51c6\u5316\uff1a<code>hb_{timestamp}_{random_part}</code> \u683c\u5f0f</li> <li>\u663e\u793a\u622a\u65ad\uff1a\u5728\u8868\u683c\u4e2d\u667a\u80fd\u622a\u65ad\u663e\u793a\uff0c\u4fdd\u6301\u754c\u9762\u6574\u6d01</li> </ul>"},{"location":"LOG_FEATURES_GUIDE/#_16","title":"\u6587\u4ef6\u65e5\u5fd7\u89e3\u6790\u5668\u6539\u8fdb","text":"<ul> <li>\u4fee\u6539 <code>query_api_logs</code> \u65b9\u6cd5\u652f\u6301 <code>log_type</code> \u53c2\u6570</li> <li>\u5b9e\u73b0 <code>_create_paired_logs</code> \u65b9\u6cd5\u5904\u7406\u914d\u5bf9\u903b\u8f91</li> <li>\u6309 <code>trace_id</code> \u5206\u7ec4\u5e76\u5339\u914d\u8bf7\u6c42-\u54cd\u5e94\u5bf9</li> <li>\u6dfb\u52a0\u5e03\u5c40\u6a21\u5f0f\u652f\u6301\u548c\u8017\u65f6\u8ba1\u7b97</li> </ul>"},{"location":"LOG_FEATURES_GUIDE/#postgresql","title":"PostgreSQL \u5ba2\u6237\u7aef\u6539\u8fdb","text":"<ul> <li>\u52a8\u6001\u8c03\u6574 SQL \u67e5\u8be2\u5b57\u6bb5</li> <li>\u6a21\u62df\u8bf7\u6c42-\u54cd\u5e94\u8bb0\u5f55\u751f\u6210</li> <li>\u4fdd\u6301\u4e0e\u6587\u4ef6\u65e5\u5fd7\u89e3\u6790\u5668\u7684\u4e00\u81f4\u6027</li> <li>\u652f\u6301\u65b0\u7684\u5e03\u5c40\u6a21\u5f0f\u548c trace_id \u683c\u5f0f</li> </ul>"},{"location":"LOG_FEATURES_GUIDE/#_17","title":"\u89c6\u56fe\u5c42\u6539\u8fdb","text":"<ul> <li>\u6dfb\u52a0\u65e5\u5fd7\u7c7b\u578b\u5217\u548c\u89c6\u89c9\u6807\u8bc6</li> <li>\u5b9e\u73b0\u65e5\u5fd7\u7c7b\u578b\u7edf\u8ba1\u529f\u80fd</li> <li>\u652f\u6301 Rich \u5e93\u7684\u5f69\u8272\u8f93\u51fa\u548c\u7b80\u5355\u6587\u672c\u8f93\u51fa</li> <li>\u65b0\u589e\u5e03\u5c40\u6a21\u5f0f\u9009\u62e9\u548c\u6e32\u67d3\u903b\u8f91</li> </ul>"},{"location":"LOG_FEATURES_GUIDE/#_18","title":"\u6545\u969c\u6392\u9664","text":""},{"location":"LOG_FEATURES_GUIDE/#_19","title":"\u5e38\u89c1\u95ee\u9898","text":"<ol> <li>\u770b\u4e0d\u5230\u8bf7\u6c42\u65e5\u5fd7</li> <li>\u73b0\u5728\u9ed8\u8ba4\u663e\u793a\u6240\u6709\u7c7b\u578b\uff0c\u5982\u679c\u4ecd\u770b\u4e0d\u5230\u8bf7\u6c42\u65e5\u5fd7\uff0c\u68c0\u67e5\u65e5\u5fd7\u6587\u4ef6\u662f\u5426\u5305\u542b\u8bf7\u6c42\u8bb0\u5f55</li> <li> <p>\u4f7f\u7528 <code>--layout classic --type request</code> \u4e13\u95e8\u67e5\u770b\u8bf7\u6c42\u65e5\u5fd7</p> </li> <li> <p>\u589e\u5f3a\u5e03\u5c40\u663e\u793a\u4e0d\u5b8c\u6574</p> </li> <li>\u67d0\u4e9b\u8bf7\u6c42\u53ef\u80fd\u6ca1\u6709\u5bf9\u5e94\u7684\u54cd\u5e94\u8bb0\u5f55\uff0c\u5bfc\u81f4\u914d\u5bf9\u5931\u8d25</li> <li>\u4f7f\u7528 <code>--layout classic --type all</code> \u67e5\u770b\u6240\u6709\u8bb0\u5f55\u8fdb\u884c\u8bca\u65ad</li> <li> <p>\u68c0\u67e5 <code>trace_id</code> \u683c\u5f0f\u662f\u5426\u6b63\u786e\uff08\u5e94\u4e3a <code>hb_</code> \u524d\u7f00\uff09</p> </li> <li> <p>\u5e03\u5c40\u6a21\u5f0f\u5207\u6362\u65e0\u6548\u679c</p> </li> <li>\u786e\u4fdd\u4f7f\u7528\u6b63\u786e\u7684\u53c2\u6570\uff1a<code>--layout classic</code> \u6216 <code>--layout enhanced</code></li> <li> <p>\u68c0\u67e5\u662f\u5426\u6709\u8db3\u591f\u7684\u6570\u636e\u8fdb\u884c\u914d\u5bf9\u663e\u793a\uff08\u589e\u5f3a\u5e03\u5c40\u9700\u8981\u914d\u5bf9\u6570\u636e\uff09</p> </li> <li> <p>trace_id \u663e\u793a\u5f02\u5e38</p> </li> <li>\u65b0\u683c\u5f0f\u4e3a <code>hb_</code> \u524d\u7f00\uff0c\u5982\u679c\u770b\u5230\u65e7\u683c\u5f0f\u53ef\u80fd\u662f\u5386\u53f2\u6570\u636e</li> <li> <p>\u4f7f\u7528 <code>--days 1</code> \u67e5\u770b\u6700\u65b0\u7684\u65e5\u5fd7\u8bb0\u5f55</p> </li> <li> <p>\u7edf\u8ba1\u4fe1\u606f\u4e0d\u51c6\u786e</p> </li> <li>\u786e\u4fdd\u65e5\u5fd7\u6587\u4ef6\u683c\u5f0f\u6b63\u786e</li> <li>\u68c0\u67e5 <code>trace_id</code> \u5b57\u6bb5\u662f\u5426\u5b58\u5728\u4e14\u683c\u5f0f\u6b63\u786e</li> </ol>"},{"location":"LOG_FEATURES_GUIDE/#_20","title":"\u8c03\u8bd5\u6280\u5de7","text":"<pre><code># \u68c0\u67e5\u539f\u59cb\u65e5\u5fd7\u6587\u4ef6\nGet-ChildItem -Path \"./logs\" -Filter \"*.jsonl\" | Sort-Object LastWriteTime -Descending | Select-Object -First 1 | ForEach-Object { Get-Content $_.FullName | Select-Object -First 10 }\n\n# \u5bf9\u6bd4\u4e24\u79cd\u5e03\u5c40\u6a21\u5f0f\u7684\u663e\u793a\u6548\u679c\npython view_logs.py --layout classic --limit 5\npython view_logs.py --layout enhanced --limit 5\n\n# \u68c0\u67e5 trace_id \u683c\u5f0f\u548c\u914d\u5bf9\u60c5\u51b5\npython view_logs.py --layout classic --type all --limit 10\n\n# \u67e5\u770b\u6240\u6709\u65e5\u5fd7\u7c7b\u578b\u5206\u5e03\npython view_logs.py --stats --days 30\n\n# \u9a8c\u8bc1\u589e\u5f3a\u5e03\u5c40\u7684\u8017\u65f6\u8ba1\u7b97\npython view_logs.py --layout enhanced --provider openai --limit 3\n\n# \u5bfc\u51fa\u8be6\u7ec6\u6570\u636e\u8fdb\u884c\u5206\u6790\npython view_logs.py --type all --format json --days 7 &gt; all_logs.json\n\n# \u68c0\u67e5\u7279\u5b9a trace_id \u7684\u5b8c\u6574\u6d41\u7a0b\npython view_logs.py --layout enhanced --days 1 | grep \"hb_\"\n</code></pre>"},{"location":"LOG_FEATURES_GUIDE/#_21","title":"\u603b\u7ed3","text":"<p>\u8fd9\u4e9b\u4f18\u5316\u663e\u8457\u6539\u5584\u4e86 HarborAI \u65e5\u5fd7\u7cfb\u7edf\u7684\u7528\u6237\u4f53\u9a8c\uff1a</p>"},{"location":"LOG_FEATURES_GUIDE/#_22","title":"\u4e3b\u8981\u6539\u8fdb\u6210\u679c","text":"<ol> <li>\u53cc\u5e03\u5c40\u6a21\u5f0f - \u63d0\u4f9b\u7ecf\u5178\u548c\u589e\u5f3a\u4e24\u79cd\u5e03\u5c40\uff0c\u6ee1\u8db3\u4e0d\u540c\u573a\u666f\u9700\u6c42</li> <li>Classic \u5e03\u5c40\uff1a\u5feb\u901f\u6d4f\u89c8\uff0ctrace_id \u9996\u5217\u663e\u793a</li> <li> <p>Enhanced \u5e03\u5c40\uff1a\u667a\u80fd\u914d\u5bf9\uff0c\u5305\u542b\u8017\u65f6\u5206\u6790</p> </li> <li> <p>trace_id \u4f18\u5316 - \u4ece <code>harborai_</code> \u7b80\u5316\u4e3a <code>hb_</code>\uff0c\u63d0\u9ad8\u53ef\u8bfb\u6027</p> </li> <li>\u957f\u5ea6\u51cf\u5c11 24%\uff08\u4ece 31 \u5b57\u7b26\u5230 25 \u5b57\u7b26\uff09</li> <li> <p>\u754c\u9762\u66f4\u6574\u6d01\uff0c\u7528\u6237\u4f53\u9a8c\u66f4\u4f73</p> </li> <li> <p>\u9ed8\u8ba4\u884c\u4e3a\u6539\u8fdb - \u4fee\u590d\u4e86\u53ea\u663e\u793a\u54cd\u5e94\u8bb0\u5f55\u7684\u95ee\u9898</p> </li> <li>\u73b0\u5728\u9ed8\u8ba4\u663e\u793a\u6240\u6709\u65e5\u5fd7\u7c7b\u578b\uff08REQ + RES\uff09</li> <li> <p>\u7528\u6237\u65e0\u9700\u989d\u5916\u53c2\u6570\u5373\u53ef\u770b\u5230\u5b8c\u6574\u6d41\u7a0b</p> </li> <li> <p>\u89e3\u51b3\u4e86\u7528\u6237\u56f0\u60d1 - \u901a\u8fc7\u7c7b\u578b\u8fc7\u6ee4\u548c\u89c6\u89c9\u533a\u5206\uff0c\u7528\u6237\u73b0\u5728\u53ef\u4ee5\u6e05\u695a\u5730\u7406\u89e3\u53cc\u91cd\u65e5\u5fd7\u8bb0\u5f55\u7684\u8bbe\u8ba1</p> </li> <li> <p>\u63d0\u4f9b\u4e86\u7075\u6d3b\u6027 - \u7528\u6237\u53ef\u4ee5\u6839\u636e\u9700\u8981\u9009\u62e9\u5e03\u5c40\u6a21\u5f0f\u548c\u65e5\u5fd7\u7c7b\u578b</p> </li> <li> <p>\u589e\u5f3a\u4e86\u5206\u6790\u80fd\u529b - \u914d\u5bf9\u663e\u793a\u3001\u8017\u65f6\u8ba1\u7b97\u548c\u7c7b\u578b\u7edf\u8ba1\u63d0\u4f9b\u4e86\u66f4\u6df1\u5165\u7684\u6d1e\u5bdf</p> </li> <li> <p>\u4fdd\u6301\u4e86\u517c\u5bb9\u6027 - \u6240\u6709\u73b0\u6709\u529f\u80fd\u7ee7\u7eed\u6b63\u5e38\u5de5\u4f5c\uff0c\u5411\u540e\u517c\u5bb9</p> </li> </ol>"},{"location":"LOG_FEATURES_GUIDE/#_23","title":"\u7528\u6237\u4ef7\u503c","text":"<ul> <li>\u63d0\u5347\u6548\u7387\uff1a\u901a\u8fc7\u5e03\u5c40\u6a21\u5f0f\u5feb\u901f\u5b9a\u4f4d\u95ee\u9898</li> <li>\u6539\u5584\u4f53\u9a8c\uff1a\u7b80\u5316\u7684 trace_id \u548c\u76f4\u89c2\u7684\u754c\u9762</li> <li>\u589e\u5f3a\u6d1e\u5bdf\uff1a\u8017\u65f6\u5206\u6790\u548c\u667a\u80fd\u914d\u5bf9\u5e2e\u52a9\u6027\u80fd\u4f18\u5316</li> <li>\u964d\u4f4e\u95e8\u69db\uff1a\u9ed8\u8ba4\u663e\u793a\u6240\u6709\u7c7b\u578b\uff0c\u65b0\u7528\u6237\u66f4\u5bb9\u6613\u4e0a\u624b</li> </ul> <p>\u901a\u8fc7\u8fd9\u4e9b\u6539\u8fdb\uff0cHarborAI \u7684\u65e5\u5fd7\u7cfb\u7edf\u73b0\u5728\u63d0\u4f9b\u4e86\u66f4\u597d\u7684\u53ef\u89c2\u6d4b\u6027\u3001\u66f4\u5f3a\u7684\u5206\u6790\u80fd\u529b\u548c\u66f4\u4f18\u7684\u7528\u6237\u4f53\u9a8c\u3002</p>"},{"location":"LOG_FEATURES_GUIDE/#trace-id_1","title":"Trace ID \u67e5\u8be2\u529f\u80fd","text":""},{"location":"LOG_FEATURES_GUIDE/#_24","title":"\u6982\u8ff0","text":"<p>HarborAI \u65e5\u5fd7\u67e5\u770b\u5de5\u5177\u73b0\u5728\u652f\u6301\u5f3a\u5927\u7684 <code>trace_id</code> \u67e5\u8be2\u529f\u80fd\uff0c\u5141\u8bb8\u7528\u6237\u6309\u7279\u5b9a\u7684 <code>trace_id</code> \u67e5\u8be2\u76f8\u5173\u7684\u6240\u6709\u65e5\u5fd7\u8bb0\u5f55\u3002\u8fd9\u4e2a\u529f\u80fd\u652f\u6301\u4ece\u591a\u79cd\u6570\u636e\u6e90\u67e5\u8be2\u65e5\u5fd7\uff0c\u5e76\u63d0\u4f9b\u53cb\u597d\u7684\u8f93\u51fa\u683c\u5f0f\u3002</p>"},{"location":"LOG_FEATURES_GUIDE/#_25","title":"\ud83d\udd0d \u591a\u6570\u636e\u6e90\u652f\u6301","text":"<ul> <li>PostgreSQL \u6570\u636e\u5e93\u67e5\u8be2\uff1a\u4f18\u5148\u4ece PostgreSQL \u6570\u636e\u5e93\u67e5\u8be2\u65e5\u5fd7</li> <li>\u6587\u4ef6\u65e5\u5fd7\u67e5\u8be2\uff1a\u81ea\u52a8\u964d\u7ea7\u5230\u6587\u4ef6\u65e5\u5fd7\u7cfb\u7edf</li> <li>\u81ea\u52a8\u964d\u7ea7\u673a\u5236\uff1a\u5f53 PostgreSQL \u4e0d\u53ef\u7528\u65f6\uff0c\u81ea\u52a8\u4f7f\u7528\u6587\u4ef6\u65e5\u5fd7</li> </ul>"},{"location":"LOG_FEATURES_GUIDE/#_26","title":"\ud83d\udcca \u7075\u6d3b\u7684\u8f93\u51fa\u683c\u5f0f","text":"<ul> <li>\u8868\u683c\u683c\u5f0f\uff1a\u7f8e\u89c2\u7684\u8868\u683c\u663e\u793a\uff08\u652f\u6301 Rich \u5e93\u7f8e\u5316\uff09</li> <li>JSON \u683c\u5f0f\uff1a\u5b8c\u6574\u7684\u7ed3\u6784\u5316\u6570\u636e\u8f93\u51fa</li> <li>\u8be6\u7ec6\u4fe1\u606f\uff1a\u663e\u793a\u65e5\u5fd7\u7684\u8be6\u7ec6\u5b57\u6bb5\u548c\u7edf\u8ba1\u4fe1\u606f</li> </ul>"},{"location":"LOG_FEATURES_GUIDE/#_27","title":"\ud83d\udee0\ufe0f \u5b9e\u7528\u529f\u80fd","text":"<ul> <li>trace_id \u9a8c\u8bc1\uff1a\u81ea\u52a8\u9a8c\u8bc1 trace_id \u683c\u5f0f</li> <li>\u6700\u8fd1\u65e5\u5fd7\u5217\u8868\uff1a\u5217\u51fa\u6700\u8fd1\u7684\u53ef\u7528 trace_id</li> <li>\u9519\u8bef\u5904\u7406\uff1a\u53cb\u597d\u7684\u9519\u8bef\u63d0\u793a\u548c\u5efa\u8bae</li> <li>\u591a\u5929\u67e5\u8be2\uff1a\u652f\u6301\u67e5\u8be2\u6307\u5b9a\u5929\u6570\u8303\u56f4\u5185\u7684\u65e5\u5fd7</li> </ul>"},{"location":"LOG_FEATURES_GUIDE/#trace-id_2","title":"Trace ID \u67e5\u8be2\u547d\u4ee4\u884c\u9009\u9879","text":"\u9009\u9879 \u63cf\u8ff0 \u9ed8\u8ba4\u503c <code>--trace-id</code> \u8981\u67e5\u8be2\u7684 trace_id - <code>--list-recent-trace-ids</code> \u5217\u51fa\u6700\u8fd1\u7684 trace_id <code>false</code> <code>--validate-trace-id</code> \u9a8c\u8bc1 trace_id \u683c\u5f0f - <code>--format</code> \u8f93\u51fa\u683c\u5f0f\uff1a<code>table</code> \u6216 <code>json</code> <code>table</code> <code>--days</code> \u67e5\u8be2\u6700\u8fd1\u51e0\u5929\u7684\u6570\u636e <code>1</code> <code>--limit</code> \u9650\u5236\u8fd4\u56de\u7684 trace_id \u6570\u91cf <code>20</code>"},{"location":"LOG_FEATURES_GUIDE/#trace-id_3","title":"Trace ID \u67e5\u8be2\u4f7f\u7528\u793a\u4f8b","text":""},{"location":"LOG_FEATURES_GUIDE/#1-trace_id","title":"1. \u67e5\u8be2\u6307\u5b9a trace_id","text":"<pre><code># \u57fa\u672c\u67e5\u8be2\npython view_logs.py --trace-id hb_1760458760039_257c901f\n\n# JSON \u683c\u5f0f\u8f93\u51fa\npython view_logs.py --trace-id hb_1760458760039_257c901f --format json\n</code></pre> <p>\u8f93\u51fa\u793a\u4f8b\uff1a <pre><code>\ud83d\udd0d \u67e5\u8be2 trace_id: hb_1760458760039_257c901f\n\ud83d\udcca \u6570\u636e\u6e90: file\n\ud83d\udcdd \u627e\u5230 3 \u6761\u65e5\u5fd7\u8bb0\u5f55\n\n          Trace ID \u67e5\u8be2\u7ed3\u679c\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2503 \u5e8f\u53f7 \u2503 \u65f6\u95f4                \u2503 \u6a21\u578b                                \u2503 \u6765\u6e90   \u2503 \u7c7b\u578b     \u2503 \u72b6\u6001      \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 1    \u2502 2025-10-14 16:19:31 \u2502 N/A                                 \u2502 N/A    \u2502 response \u2502 \u23f3 \u5904\u7406\u4e2d \u2502\n\u2502 2    \u2502 2025-10-14 16:19:32 \u2502 doubao-1-5-pro-32k-character-250715 \u2502 N/A    \u2502 request  \u2502 \u23f3 \u5904\u7406\u4e2d \u2502\n\u2502 3    \u2502 2025-10-14 16:19:34 \u2502 N/A                                 \u2502 N/A    \u2502 response \u2502 \u23f3 \u5904\u7406\u4e2d \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n================================================================================\n\ud83d\udccb \u7b2c\u4e00\u6761\u8bb0\u5f55\u8be6\u7ec6\u4fe1\u606f:\n----------------------------------------\ntrace_id: hb_1760458760039_257c901f\ntimestamp: 2025-10-14T16:19:31.560025\ntype: response\nsuccess: True\nlatency: 0.0\ntokens: {'prompt_tokens': 107, 'completion_tokens': 507, 'total_tokens': 614}\ncost: None\nreasoning_content_present: True\nerror: None\nresponse_summary: {'content': '\u5173\u4e8e\"doubao-seed-1-6-250615\"\u6a21\u578b...', 'content_length': 152, ...}\nsource: file\nfile_name: harborai_20251015_001931.jsonl\nline_number: 1\n</code></pre></p>"},{"location":"LOG_FEATURES_GUIDE/#2-trace_id","title":"2. \u5217\u51fa\u6700\u8fd1\u7684 trace_id","text":"<pre><code># \u5217\u51fa\u6700\u8fd11\u5929\u7684 trace_id\npython view_logs.py --list-recent-trace-ids\n\n# \u5217\u51fa\u6700\u8fd13\u5929\u7684 trace_id\npython view_logs.py --list-recent-trace-ids --days 3\n\n# \u9650\u5236\u8fd4\u56de\u6570\u91cf\npython view_logs.py --list-recent-trace-ids --limit 10\n</code></pre> <p>\u8f93\u51fa\u793a\u4f8b\uff1a <pre><code>\ud83d\udd0d \u6700\u8fd1\u7684 Trace ID \u5217\u8868\n\ud83d\udcca \u6570\u636e\u6e90: both\n\ud83d\udcdd \u627e\u5230 1 \u4e2a trace_id\n============================================================\n          \u6700\u8fd1\u7684 Trace ID\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 \u5e8f\u53f7 \u2503 Trace ID                  \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 1    \u2502 hb_1760458760039_257c901f \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\ud83d\udca1 \u4f7f\u7528\u65b9\u6cd5:\n   python view_logs.py --trace-id &lt;trace_id&gt;\n   \u4f8b\u5982: python view_logs.py --trace-id hb_1760458760039_257c901f\n</code></pre></p>"},{"location":"LOG_FEATURES_GUIDE/#3-trace_id","title":"3. \u9a8c\u8bc1 trace_id \u683c\u5f0f","text":"<pre><code># \u9a8c\u8bc1\u6709\u6548\u7684 trace_id\npython view_logs.py --validate-trace-id hb_1760458760039_257c901f\n\n# \u9a8c\u8bc1\u65e0\u6548\u7684 trace_id\npython view_logs.py --validate-trace-id invalid_trace_id\n</code></pre> <p>\u8f93\u51fa\u793a\u4f8b\uff1a <pre><code>\u2705 trace_id 'hb_1760458760039_257c901f' \u683c\u5f0f\u6b63\u786e\n\n\u274c trace_id 'invalid_trace_id' \u683c\u5f0f\u65e0\u6548\n\ud83d\udca1 \u6b63\u786e\u683c\u5f0f: hb_{timestamp}_{random}\n   \u4f8b\u5982: hb_1760458760039_257c901f\n</code></pre></p>"},{"location":"LOG_FEATURES_GUIDE/#4_2","title":"4. \u9519\u8bef\u5904\u7406\u793a\u4f8b","text":"<pre><code># \u67e5\u8be2\u4e0d\u5b58\u5728\u7684 trace_id\npython view_logs.py --trace-id hb_1234567890123_abcd1234\n</code></pre> <p>\u8f93\u51fa\u793a\u4f8b\uff1a <pre><code>\u274c \u672a\u627e\u5230 trace_id 'hb_1234567890123_abcd1234' \u7684\u65e5\u5fd7\u8bb0\u5f55\n\n\ud83d\udca1 \u63d0\u793a:\n   1. \u68c0\u67e5 trace_id \u662f\u5426\u6b63\u786e\n   2. \u5c1d\u8bd5\u4f7f\u7528 --list-recent-trace-ids \u67e5\u770b\u53ef\u7528\u7684 trace_id\n   3. \u8c03\u6574 --days \u53c2\u6570\u6269\u5927\u641c\u7d22\u8303\u56f4\n</code></pre></p>"},{"location":"LOG_FEATURES_GUIDE/#trace-id_4","title":"Trace ID \u683c\u5f0f","text":"<p>HarborAI \u7684 trace_id \u9075\u5faa\u4ee5\u4e0b\u683c\u5f0f\uff1a <pre><code>hb_{timestamp}_{random}\n</code></pre></p> <ul> <li><code>hb_</code>\uff1a\u56fa\u5b9a\u524d\u7f00</li> <li><code>{timestamp}</code>\uff1a13\u4f4d\u65f6\u95f4\u6233</li> <li><code>{random}</code>\uff1a8\u4f4d\u968f\u673a\u5b57\u7b26\u4e32</li> </ul> <p>\u793a\u4f8b\uff1a <code>hb_1760458760039_257c901f</code></p>"},{"location":"LOG_FEATURES_GUIDE/#_28","title":"\u6570\u636e\u6e90\u914d\u7f6e","text":""},{"location":"LOG_FEATURES_GUIDE/#postgresql_1","title":"PostgreSQL \u914d\u7f6e","text":"<p>\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u914d\u7f6e PostgreSQL \u8fde\u63a5\uff1a</p> <pre><code>export POSTGRES_HOST=localhost\nexport POSTGRES_PORT=5432\nexport POSTGRES_DB=harborai\nexport POSTGRES_USER=harborai\nexport POSTGRES_PASSWORD=your_password\n</code></pre>"},{"location":"LOG_FEATURES_GUIDE/#_29","title":"\u6587\u4ef6\u65e5\u5fd7\u914d\u7f6e","text":"<p>\u811a\u672c\u4f1a\u81ea\u52a8\u67e5\u627e\u4ee5\u4e0b\u76ee\u5f55\u4e2d\u7684\u65e5\u5fd7\u6587\u4ef6\uff1a 1. <code>./logs/</code> 2. <code>./harborai_logs/</code> 3. <code>~/.harborai/logs/</code> 4. <code>/tmp/harborai_logs/</code></p> <p>\u652f\u6301\u7684\u6587\u4ef6\u683c\u5f0f\uff1a - <code>.log</code> \u6587\u4ef6 - <code>.jsonl</code> \u6587\u4ef6</p>"},{"location":"LOG_FEATURES_GUIDE/#trace-id_5","title":"Trace ID \u67e5\u8be2\u8f93\u51fa\u5b57\u6bb5\u8bf4\u660e","text":""},{"location":"LOG_FEATURES_GUIDE/#_30","title":"\u8868\u683c\u8f93\u51fa\u5b57\u6bb5","text":"\u5b57\u6bb5 \u63cf\u8ff0 \u5e8f\u53f7 \u65e5\u5fd7\u8bb0\u5f55\u7684\u5e8f\u53f7 \u65f6\u95f4 \u65e5\u5fd7\u8bb0\u5f55\u7684\u65f6\u95f4\u6233 \u6a21\u578b \u4f7f\u7528\u7684AI\u6a21\u578b\u540d\u79f0 \u6765\u6e90 \u6570\u636e\u6765\u6e90\uff08PostgreSQL/\u6587\u4ef6\uff09 \u7c7b\u578b \u65e5\u5fd7\u7c7b\u578b\uff08request/response\uff09 \u72b6\u6001 \u8bf7\u6c42\u72b6\u6001\uff08\u2713\u6210\u529f/\u2717\u5931\u8d25/\u23f3\u5904\u7406\u4e2d\uff09"},{"location":"LOG_FEATURES_GUIDE/#json","title":"JSON \u8f93\u51fa\u5b57\u6bb5","text":"<ul> <li><code>trace_id</code>\uff1a\u8ffd\u8e2aID</li> <li><code>timestamp</code>\uff1a\u65f6\u95f4\u6233</li> <li><code>type</code>\uff1a\u65e5\u5fd7\u7c7b\u578b</li> <li><code>model</code>\uff1a\u6a21\u578b\u540d\u79f0</li> <li><code>messages</code>\uff1a\u8bf7\u6c42\u6d88\u606f</li> <li><code>parameters</code>\uff1a\u8bf7\u6c42\u53c2\u6570</li> <li><code>success</code>\uff1a\u662f\u5426\u6210\u529f</li> <li><code>latency</code>\uff1a\u5ef6\u8fdf\u65f6\u95f4</li> <li><code>tokens</code>\uff1atoken\u7edf\u8ba1</li> <li><code>cost</code>\uff1a\u6210\u672c\u4fe1\u606f</li> <li><code>error</code>\uff1a\u9519\u8bef\u4fe1\u606f</li> <li><code>response_summary</code>\uff1a\u54cd\u5e94\u6458\u8981</li> <li><code>source</code>\uff1a\u6570\u636e\u6e90</li> <li><code>file_name</code>\uff1a\u6587\u4ef6\u540d\uff08\u6587\u4ef6\u65e5\u5fd7\uff09</li> <li><code>line_number</code>\uff1a\u884c\u53f7\uff08\u6587\u4ef6\u65e5\u5fd7\uff09</li> </ul>"},{"location":"LOG_FEATURES_GUIDE/#_31","title":"\u5e38\u89c1\u95ee\u9898","text":""},{"location":"LOG_FEATURES_GUIDE/#q-postgresql","title":"Q: \u4e3a\u4ec0\u4e48\u663e\u793a \"PostgreSQL \u8fde\u63a5\u5931\u8d25\"\uff1f","text":"<p>A: \u9700\u8981\u8bbe\u7f6e PostgreSQL \u73af\u5883\u53d8\u91cf\uff0c\u7279\u522b\u662f <code>POSTGRES_PASSWORD</code>\u3002\u5982\u679c\u4e0d\u4f7f\u7528 PostgreSQL\uff0c\u811a\u672c\u4f1a\u81ea\u52a8\u964d\u7ea7\u5230\u6587\u4ef6\u65e5\u5fd7\u3002</p>"},{"location":"LOG_FEATURES_GUIDE/#q","title":"Q: \u4e3a\u4ec0\u4e48\u627e\u4e0d\u5230\u65e5\u5fd7\u6587\u4ef6\uff1f","text":"<p>A: \u786e\u4fdd\u65e5\u5fd7\u76ee\u5f55\u5b58\u5728\u4e14\u5305\u542b <code>.jsonl</code> \u6216 <code>.log</code> \u683c\u5f0f\u7684\u65e5\u5fd7\u6587\u4ef6\u3002\u68c0\u67e5\u4ee5\u4e0b\u76ee\u5f55\uff1a - <code>./logs/</code> - <code>./harborai_logs/</code> - <code>~/.harborai/logs/</code></p>"},{"location":"LOG_FEATURES_GUIDE/#q-trace_id","title":"Q: trace_id \u683c\u5f0f\u4e0d\u6b63\u786e\u600e\u4e48\u529e\uff1f","text":"<p>A: HarborAI \u7684 trace_id \u683c\u5f0f\u4e3a <code>hb_{timestamp}_{random}</code>\u3002\u4f7f\u7528 <code>--validate-trace-id</code> \u9a8c\u8bc1\u683c\u5f0f\uff0c\u6216\u4f7f\u7528 <code>--list-recent-trace-ids</code> \u67e5\u770b\u53ef\u7528\u7684 trace_id\u3002</p>"},{"location":"LOG_FEATURES_GUIDE/#q_1","title":"Q: \u5982\u4f55\u83b7\u53d6\u66f4\u591a\u5929\u7684\u6570\u636e\uff1f","text":"<p>A: \u4f7f\u7528 <code>--days</code> \u53c2\u6570\uff1a <pre><code>python view_logs.py --list-recent-trace-ids --days 7\n</code></pre></p>"},{"location":"LOG_FEATURES_GUIDE/#q-json","title":"Q: \u5982\u4f55\u83b7\u53d6\u5b8c\u6574\u7684 JSON \u6570\u636e\uff1f","text":"<p>A: \u4f7f\u7528 <code>--format json</code> \u53c2\u6570\uff1a <pre><code>python view_logs.py --trace-id &lt;trace_id&gt; --format json\n</code></pre></p>"},{"location":"LOG_FEATURES_GUIDE/#q-trace_id_1","title":"Q: \u5982\u4f55\u540c\u65f6\u4f7f\u7528 trace_id \u67e5\u8be2\u548c\u5176\u4ed6\u8fc7\u6ee4\u6761\u4ef6\uff1f","text":"<p>A: trace_id \u67e5\u8be2\u662f\u72ec\u7acb\u529f\u80fd\uff0c\u4e0d\u4e0e\u5176\u4ed6\u8fc7\u6ee4\u6761\u4ef6\uff08\u5982 <code>--model</code>\u3001<code>--provider</code> \u7b49\uff09\u7ec4\u5408\u4f7f\u7528\u3002\u5982\u679c\u6307\u5b9a\u4e86 <code>--trace-id</code>\uff0c\u5176\u4ed6\u8fc7\u6ee4\u6761\u4ef6\u5c06\u88ab\u5ffd\u7565\u3002</p>"},{"location":"LOG_FEATURES_GUIDE/#_32","title":"\u6280\u672f\u5b9e\u73b0","text":""},{"location":"LOG_FEATURES_GUIDE/#_33","title":"\u6838\u5fc3\u529f\u80fd\u96c6\u6210","text":"<p>trace_id \u67e5\u8be2\u529f\u80fd\u5df2\u5b8c\u5168\u96c6\u6210\u5230 <code>LogViewer</code> \u7c7b\u4e2d\uff1a - \u521d\u59cb\u5316\uff1a\u81ea\u52a8\u68c0\u6d4b\u548c\u914d\u7f6e\u6570\u636e\u6e90 - \u67e5\u8be2\u903b\u8f91\uff1a\u4f18\u5148 PostgreSQL\uff0c\u964d\u7ea7\u5230\u6587\u4ef6\u65e5\u5fd7 - \u8f93\u51fa\u683c\u5f0f\u5316\uff1a\u652f\u6301\u8868\u683c\u548c JSON \u683c\u5f0f - \u9519\u8bef\u5904\u7406\uff1a\u53cb\u597d\u7684\u9519\u8bef\u63d0\u793a\u548c\u5efa\u8bae</p>"},{"location":"LOG_FEATURES_GUIDE/#_34","title":"\u6570\u636e\u6e90\u4f18\u5148\u7ea7","text":"<ol> <li>PostgreSQL \u6570\u636e\u5e93\uff08\u5982\u679c\u914d\u7f6e\u6b63\u786e\uff09</li> <li>\u6587\u4ef6\u65e5\u5fd7\u7cfb\u7edf\uff08\u81ea\u52a8\u964d\u7ea7\uff09</li> </ol>"},{"location":"LOG_FEATURES_GUIDE/#_35","title":"\u4f9d\u8d56\u68c0\u6d4b","text":"<ul> <li>\u81ea\u52a8\u68c0\u6d4b <code>psycopg2</code> \u662f\u5426\u53ef\u7528</li> <li>\u81ea\u52a8\u68c0\u6d4b <code>rich</code> \u662f\u5426\u53ef\u7528\uff08\u7528\u4e8e\u7f8e\u5316\u8f93\u51fa\uff09</li> <li>\u4f18\u96c5\u964d\u7ea7\u5230\u57fa\u672c\u529f\u80fd</li> </ul>"},{"location":"LOG_FEATURES_GUIDE/#_36","title":"\u5b8c\u6574\u547d\u4ee4\u53c2\u8003","text":"<pre><code># \u57fa\u672c\u65e5\u5fd7\u67e5\u770b\uff08\u663e\u793a\u6240\u6709\u7c7b\u578b\uff09\npython view_logs.py\n\n# \u6309 trace_id \u67e5\u8be2\npython view_logs.py --trace-id hb_1760458760039_257c901f\n\n# \u5217\u51fa\u6700\u8fd1\u7684 trace_id\npython view_logs.py --list-recent-trace-ids\n\n# \u9a8c\u8bc1 trace_id \u683c\u5f0f\npython view_logs.py --validate-trace-id hb_1760458760039_257c901f\n\n# \u7ec4\u5408\u4f7f\u7528\uff08\u6269\u5927\u641c\u7d22\u8303\u56f4\uff09\npython view_logs.py --list-recent-trace-ids --days 7 --limit 50\n\n# JSON \u683c\u5f0f\u8f93\u51fa\npython view_logs.py --trace-id hb_1760458760039_257c901f --format json\n\n# \u4f20\u7edf\u65e5\u5fd7\u67e5\u770b\u529f\u80fd\uff08\u4fdd\u6301\u4e0d\u53d8\uff09\npython view_logs.py --days 3 --model gpt-4 --provider openai --limit 10\npython view_logs.py --layout enhanced --show-request-response-pairs\npython view_logs.py --stats --days 7\n</code></pre> <p>\u901a\u8fc7\u8fd9\u4e9b trace_id \u67e5\u8be2\u529f\u80fd\uff0cHarborAI \u7684\u65e5\u5fd7\u7cfb\u7edf\u73b0\u5728\u63d0\u4f9b\u4e86\u66f4\u7cbe\u786e\u7684\u65e5\u5fd7\u8ffd\u8e2a\u80fd\u529b\uff0c\u5e2e\u52a9\u7528\u6237\u5feb\u901f\u5b9a\u4f4d\u548c\u5206\u6790\u7279\u5b9a\u8bf7\u6c42\u7684\u5b8c\u6574\u751f\u547d\u5468\u671f\u3002</p>"},{"location":"PostgreSQL_Docker_Setup/","title":"HarborAI PostgreSQL Docker \u73af\u5883\u914d\u7f6e\u6307\u5357","text":""},{"location":"PostgreSQL_Docker_Setup/#_1","title":"\u6982\u8ff0","text":"<p>\u672c\u6587\u6863\u63d0\u4f9b\u4e86\u4e3a HarborAI \u9879\u76ee\u914d\u7f6e PostgreSQL Docker \u73af\u5883\u7684\u5b8c\u6574\u6307\u5357\uff0c\u5305\u62ec\u5b89\u88c5\u3001\u914d\u7f6e\u3001\u6d4b\u8bd5\u548c\u6545\u969c\u6392\u67e5\u3002</p>"},{"location":"PostgreSQL_Docker_Setup/#_2","title":"\u73af\u5883\u8981\u6c42","text":"<ul> <li>Docker Desktop for Windows</li> <li>PowerShell 5.0+</li> <li>Python 3.8+</li> <li>\u9879\u76ee\u4f9d\u8d56\uff1apsycopg2-binary</li> </ul>"},{"location":"PostgreSQL_Docker_Setup/#_3","title":"\u5feb\u901f\u5f00\u59cb","text":""},{"location":"PostgreSQL_Docker_Setup/#1-postgresql","title":"1. \u542f\u52a8 PostgreSQL \u670d\u52a1","text":"<pre><code># \u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u6267\u884c\ndocker-compose up -d\n</code></pre>"},{"location":"PostgreSQL_Docker_Setup/#2","title":"2. \u9a8c\u8bc1\u670d\u52a1\u72b6\u6001","text":"<pre><code># \u68c0\u67e5\u670d\u52a1\u72b6\u6001\ndocker-compose ps\n\n# \u67e5\u770b\u65e5\u5fd7\ndocker-compose logs postgres\n</code></pre>"},{"location":"PostgreSQL_Docker_Setup/#3","title":"3. \u8fd0\u884c\u6d4b\u8bd5","text":"<pre><code># \u8fd0\u884c\u5b8c\u6574\u6d4b\u8bd5\u5957\u4ef6\npython test_postgres_docker.py\n</code></pre>"},{"location":"PostgreSQL_Docker_Setup/#_4","title":"\u8be6\u7ec6\u914d\u7f6e","text":""},{"location":"PostgreSQL_Docker_Setup/#docker-compose","title":"Docker Compose \u914d\u7f6e","text":"<p>\u9879\u76ee\u4f7f\u7528 <code>docker-compose.yml</code> \u914d\u7f6e PostgreSQL \u670d\u52a1\uff1a</p> <pre><code>version: '3.8'\n\nservices:\n  postgres:\n    image: postgres:15-alpine\n    container_name: harborai_postgres\n    environment:\n      POSTGRES_DB: harborai\n      POSTGRES_USER: harborai\n      POSTGRES_PASSWORD: harborai_password_2024\n    ports:\n      - \"5433:5432\"  # \u907f\u514d\u4e0e\u672c\u5730 PostgreSQL \u51b2\u7a81\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./docker/postgres/init:/docker-entrypoint-initdb.d\n    networks:\n      - harborai_network\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U harborai -d harborai\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n    command: [\n      \"postgres\",\n      \"-c\", \"log_statement=all\",\n      \"-c\", \"log_destination=stderr\",\n      \"-c\", \"logging_collector=off\",\n      \"-c\", \"log_min_duration_statement=1000\"\n    ]\n\nvolumes:\n  postgres_data:\n\nnetworks:\n  harborai_network:\n    driver: bridge\n</code></pre>"},{"location":"PostgreSQL_Docker_Setup/#_5","title":"\u6570\u636e\u5e93\u521d\u59cb\u5316","text":"<p>\u521d\u59cb\u5316\u811a\u672c\u4f4d\u4e8e <code>docker/postgres/init/01-init-database.sql</code>\uff0c\u5305\u542b\uff1a</p> <ul> <li>\u6838\u5fc3\u8868\u7ed3\u6784\uff08api_logs, trace_logs, model_usage, harborai_logs\uff09</li> <li>\u7d22\u5f15\u4f18\u5316</li> <li>\u89c6\u56fe\u5b9a\u4e49</li> <li>\u6743\u9650\u8bbe\u7f6e</li> </ul>"},{"location":"PostgreSQL_Docker_Setup/#_6","title":"\u73af\u5883\u53d8\u91cf\u914d\u7f6e","text":"<p><code>.env</code> \u6587\u4ef6\u4e2d\u7684 PostgreSQL \u914d\u7f6e\uff1a</p> <pre><code># PostgreSQL \u914d\u7f6e\nPOSTGRES_HOST=localhost\nPOSTGRES_PORT=5433\nPOSTGRES_DB=harborai\nPOSTGRES_USER=harborai\nPOSTGRES_PASSWORD=harborai_password_2024\n</code></pre>"},{"location":"PostgreSQL_Docker_Setup/#_7","title":"\u529f\u80fd\u6d4b\u8bd5","text":""},{"location":"PostgreSQL_Docker_Setup/#_8","title":"\u6d4b\u8bd5\u811a\u672c\u529f\u80fd","text":"<p><code>test_postgres_docker.py</code> \u63d0\u4f9b\u4e86\u5168\u9762\u7684\u6d4b\u8bd5\u5957\u4ef6\uff1a</p> <ol> <li>\u57fa\u7840\u8fde\u63a5\u6d4b\u8bd5 - \u9a8c\u8bc1\u6570\u636e\u5e93\u8fde\u63a5</li> <li>\u8868\u7ed3\u6784\u6d4b\u8bd5 - \u68c0\u67e5\u6240\u6709\u5fc5\u9700\u8868\u662f\u5426\u5b58\u5728</li> <li>PostgreSQL \u5ba2\u6237\u7aef\u6d4b\u8bd5 - \u6d4b\u8bd5\u67e5\u8be2\u529f\u80fd</li> <li>\u65e5\u5fd7\u8bb0\u5f55\u5668\u6d4b\u8bd5 - \u9a8c\u8bc1\u65e5\u5fd7\u5199\u5165\u529f\u80fd</li> <li>\u5f02\u6b65\u65e5\u5fd7\u6d4b\u8bd5 - \u6d4b\u8bd5\u5f02\u6b65\u65e5\u5fd7\u8bb0\u5f55</li> <li>\u65e5\u5fd7\u67e5\u770b\u6d4b\u8bd5 - \u9a8c\u8bc1\u65e5\u5fd7\u68c0\u7d22\u529f\u80fd</li> <li>\u6027\u80fd\u6d4b\u8bd5 - \u6d4b\u8bd5\u6279\u91cf\u64cd\u4f5c\u6027\u80fd</li> </ol>"},{"location":"PostgreSQL_Docker_Setup/#_9","title":"\u8fd0\u884c\u7279\u5b9a\u6d4b\u8bd5","text":"<pre><code># \u8fd0\u884c\u5b8c\u6574\u6d4b\u8bd5\npython test_postgres_docker.py\n\n# \u67e5\u770b\u8be6\u7ec6\u65e5\u5fd7\ndocker-compose logs -f postgres\n</code></pre>"},{"location":"PostgreSQL_Docker_Setup/#_10","title":"\u65e5\u5fd7\u529f\u80fd","text":""},{"location":"PostgreSQL_Docker_Setup/#_11","title":"\u65e5\u5fd7\u8bb0\u5f55\u5668\u4f7f\u7528","text":"<pre><code>from harborai.storage import PostgreSQLLogger\n\n# \u521d\u59cb\u5316\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = PostgreSQLLogger(\n    connection_string=\"postgresql://harborai:harborai_password_2024@localhost:5433/harborai\",\n    table_name=\"harborai_logs\",\n    batch_size=100,\n    flush_interval=5.0\n)\n\n# \u542f\u52a8\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger.start()\n\n# \u8bb0\u5f55\u8bf7\u6c42\u65e5\u5fd7\nlogger.log_request(\n    trace_id=\"unique_trace_id\",\n    model=\"gpt-4\",\n    messages=[{\"role\": \"user\", \"content\": \"Hello\"}],\n    provider=\"openai\"\n)\n\n# \u8bb0\u5f55\u54cd\u5e94\u65e5\u5fd7\nlogger.log_response(\n    trace_id=\"unique_trace_id\",\n    response=response_object,\n    latency=1.5,\n    success=True\n)\n\n# \u505c\u6b62\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger.stop()\n</code></pre>"},{"location":"PostgreSQL_Docker_Setup/#_12","title":"\u65e5\u5fd7\u67e5\u8be2","text":"<pre><code>from harborai.database import PostgreSQLClient\n\n# \u521d\u59cb\u5316\u5ba2\u6237\u7aef\nclient = PostgreSQLClient(\n    host=\"localhost\",\n    port=5433,\n    database=\"harborai\",\n    user=\"harborai\",\n    password=\"harborai_password_2024\"\n)\n\n# \u67e5\u8be2\u6700\u8fd1\u65e5\u5fd7\nlogs = client.get_recent_logs(limit=100)\n\n# \u6309\u6a21\u578b\u67e5\u8be2\nmodel_logs = client.get_logs_by_model(\"gpt-4\", limit=50)\n\n# \u6309\u65f6\u95f4\u8303\u56f4\u67e5\u8be2\nfrom datetime import datetime, timedelta\nstart_time = datetime.now() - timedelta(hours=1)\nrecent_logs = client.get_logs_by_time_range(start_time, datetime.now())\n</code></pre>"},{"location":"PostgreSQL_Docker_Setup/#_13","title":"\u5e38\u7528\u547d\u4ee4","text":""},{"location":"PostgreSQL_Docker_Setup/#docker","title":"Docker \u7ba1\u7406","text":"<pre><code># \u542f\u52a8\u670d\u52a1\ndocker-compose up -d\n\n# \u505c\u6b62\u670d\u52a1\ndocker-compose down\n\n# \u91cd\u542f\u670d\u52a1\ndocker-compose restart postgres\n\n# \u67e5\u770b\u65e5\u5fd7\ndocker-compose logs -f postgres\n\n# \u6e05\u7406\u6570\u636e\uff08\u8c28\u614e\u4f7f\u7528\uff09\ndocker-compose down -v\n</code></pre>"},{"location":"PostgreSQL_Docker_Setup/#_14","title":"\u6570\u636e\u5e93\u7ba1\u7406","text":"<pre><code># \u8fde\u63a5\u5230\u6570\u636e\u5e93\ndocker exec -it harborai_postgres psql -U harborai -d harborai\n\n# \u6267\u884c SQL \u6587\u4ef6\nGet-Content docker/postgres/init/01-init-database.sql | docker exec -i harborai_postgres psql -U harborai -d harborai\n\n# \u5907\u4efd\u6570\u636e\u5e93\ndocker exec harborai_postgres pg_dump -U harborai harborai &gt; backup.sql\n\n# \u6062\u590d\u6570\u636e\u5e93\nGet-Content backup.sql | docker exec -i harborai_postgres psql -U harborai -d harborai\n</code></pre>"},{"location":"PostgreSQL_Docker_Setup/#_15","title":"\u6545\u969c\u6392\u67e5","text":""},{"location":"PostgreSQL_Docker_Setup/#_16","title":"\u5e38\u89c1\u95ee\u9898","text":""},{"location":"PostgreSQL_Docker_Setup/#1","title":"1. \u5bb9\u5668\u542f\u52a8\u5931\u8d25","text":"<p>\u75c7\u72b6: <code>docker-compose up -d</code> \u5931\u8d25\u6216\u5bb9\u5668\u4e0d\u65ad\u91cd\u542f</p> <p>\u89e3\u51b3\u65b9\u6848: <pre><code># \u67e5\u770b\u8be6\u7ec6\u9519\u8bef\u65e5\u5fd7\ndocker-compose logs postgres\n\n# \u68c0\u67e5\u7aef\u53e3\u5360\u7528\nnetstat -an | findstr :5433\n\n# \u6e05\u7406\u5e76\u91cd\u65b0\u521b\u5efa\ndocker-compose down -v\ndocker-compose up -d\n</code></pre></p>"},{"location":"PostgreSQL_Docker_Setup/#2_1","title":"2. \u6570\u636e\u5e93\u8fde\u63a5\u5931\u8d25","text":"<p>\u75c7\u72b6: \u6d4b\u8bd5\u811a\u672c\u62a5\u544a\u8fde\u63a5\u9519\u8bef</p> <p>\u89e3\u51b3\u65b9\u6848: <pre><code># \u68c0\u67e5\u670d\u52a1\u72b6\u6001\ndocker-compose ps\n\n# \u9a8c\u8bc1\u5065\u5eb7\u68c0\u67e5\ndocker exec harborai_postgres pg_isready -U harborai -d harborai\n\n# \u68c0\u67e5\u7f51\u7edc\u8fde\u63a5\ntelnet localhost 5433\n</code></pre></p>"},{"location":"PostgreSQL_Docker_Setup/#3_1","title":"3. \u521d\u59cb\u5316\u811a\u672c\u672a\u6267\u884c","text":"<p>\u75c7\u72b6: \u8868\u4e0d\u5b58\u5728\u6216\u7ed3\u6784\u4e0d\u6b63\u786e</p> <p>\u89e3\u51b3\u65b9\u6848: <pre><code># \u624b\u52a8\u6267\u884c\u521d\u59cb\u5316\u811a\u672c\nGet-Content docker/postgres/init/01-init-database.sql | docker exec -i harborai_postgres psql -U harborai -d harborai\n\n# \u6216\u8005\u6e05\u7406\u6570\u636e\u91cd\u65b0\u521d\u59cb\u5316\ndocker-compose down -v\ndocker-compose up -d\n</code></pre></p>"},{"location":"PostgreSQL_Docker_Setup/#4","title":"4. \u65e5\u5fd7\u8bb0\u5f55\u5931\u8d25","text":"<p>\u75c7\u72b6: \u65e5\u5fd7\u65e0\u6cd5\u5199\u5165\u6570\u636e\u5e93</p> <p>\u89e3\u51b3\u65b9\u6848: <pre><code># \u68c0\u67e5\u8868\u6743\u9650\ndocker exec -it harborai_postgres psql -U harborai -d harborai -c \"\\dt\"\n\n# \u68c0\u67e5\u65e5\u5fd7\u8bb0\u5f55\u5668\u914d\u7f6e\npython -c \"from harborai.storage import PostgreSQLLogger; print('Logger available')\"\n\n# \u8fd0\u884c\u6d4b\u8bd5\u9a8c\u8bc1\npython test_postgres_docker.py\n</code></pre></p>"},{"location":"PostgreSQL_Docker_Setup/#_17","title":"\u6027\u80fd\u4f18\u5316","text":""},{"location":"PostgreSQL_Docker_Setup/#1_1","title":"1. \u6279\u91cf\u5199\u5165\u4f18\u5316","text":"<pre><code># \u8c03\u6574\u6279\u91cf\u5927\u5c0f\u548c\u5237\u65b0\u95f4\u9694\nlogger = PostgreSQLLogger(\n    connection_string=connection_string,\n    batch_size=500,  # \u589e\u52a0\u6279\u91cf\u5927\u5c0f\n    flush_interval=10.0  # \u589e\u52a0\u5237\u65b0\u95f4\u9694\n)\n</code></pre>"},{"location":"PostgreSQL_Docker_Setup/#2_2","title":"2. \u7d22\u5f15\u4f18\u5316","text":"<pre><code>-- \u4e3a\u5e38\u7528\u67e5\u8be2\u6dfb\u52a0\u7d22\u5f15\nCREATE INDEX CONCURRENTLY idx_harborai_logs_trace_id ON harborai_logs(trace_id);\nCREATE INDEX CONCURRENTLY idx_harborai_logs_timestamp ON harborai_logs(timestamp);\nCREATE INDEX CONCURRENTLY idx_harborai_logs_model ON harborai_logs(model);\n</code></pre>"},{"location":"PostgreSQL_Docker_Setup/#3_2","title":"3. \u8fde\u63a5\u6c60\u914d\u7f6e","text":"<pre><code># \u4f7f\u7528\u8fde\u63a5\u6c60\u63d0\u9ad8\u6027\u80fd\nimport psycopg2.pool\n\npool = psycopg2.pool.ThreadedConnectionPool(\n    minconn=1,\n    maxconn=20,\n    dsn=connection_string\n)\n</code></pre>"},{"location":"PostgreSQL_Docker_Setup/#_18","title":"\u76d1\u63a7\u548c\u7ef4\u62a4","text":""},{"location":"PostgreSQL_Docker_Setup/#_19","title":"\u5065\u5eb7\u68c0\u67e5","text":"<pre><code># \u68c0\u67e5\u670d\u52a1\u5065\u5eb7\u72b6\u6001\ndocker-compose ps\n\n# \u68c0\u67e5\u6570\u636e\u5e93\u8fde\u63a5\npython -c \"import psycopg2; conn = psycopg2.connect('postgresql://harborai:harborai_password_2024@localhost:5433/harborai'); print('Connection OK')\"\n</code></pre>"},{"location":"PostgreSQL_Docker_Setup/#_20","title":"\u65e5\u5fd7\u8f6e\u8f6c","text":"<pre><code>-- \u6e05\u7406\u65e7\u65e5\u5fd7\uff08\u4fdd\u7559\u6700\u8fd130\u5929\uff09\nDELETE FROM harborai_logs WHERE timestamp &lt; NOW() - INTERVAL '30 days';\n\n-- \u5206\u6790\u8868\u4ee5\u4f18\u5316\u6027\u80fd\nANALYZE harborai_logs;\n</code></pre>"},{"location":"PostgreSQL_Docker_Setup/#_21","title":"\u5907\u4efd\u7b56\u7565","text":"<pre><code># \u5b9a\u671f\u5907\u4efd\u811a\u672c\n$date = Get-Date -Format \"yyyyMMdd_HHmmss\"\ndocker exec harborai_postgres pg_dump -U harborai harborai &gt; \"backup_$date.sql\"\n\n# \u538b\u7f29\u5907\u4efd\nCompress-Archive -Path \"backup_$date.sql\" -DestinationPath \"backup_$date.zip\"\n</code></pre>"},{"location":"PostgreSQL_Docker_Setup/#_22","title":"\u5b89\u5168\u6ce8\u610f\u4e8b\u9879","text":"<ol> <li>\u5bc6\u7801\u5b89\u5168: \u751f\u4ea7\u73af\u5883\u4e2d\u4f7f\u7528\u5f3a\u5bc6\u7801</li> <li>\u7f51\u7edc\u9694\u79bb: \u9650\u5236\u6570\u636e\u5e93\u8bbf\u95ee\u7aef\u53e3</li> <li>\u6743\u9650\u63a7\u5236: \u4f7f\u7528\u6700\u5c0f\u6743\u9650\u539f\u5219</li> <li>\u6570\u636e\u52a0\u5bc6: \u8003\u8651\u542f\u7528 SSL \u8fde\u63a5</li> <li>\u5b9a\u671f\u66f4\u65b0: \u4fdd\u6301 PostgreSQL \u7248\u672c\u66f4\u65b0</li> </ol>"},{"location":"PostgreSQL_Docker_Setup/#_23","title":"\u6269\u5c55\u914d\u7f6e","text":""},{"location":"PostgreSQL_Docker_Setup/#_24","title":"\u9ad8\u53ef\u7528\u914d\u7f6e","text":"<pre><code># docker-compose.yml \u4e2d\u6dfb\u52a0\u526f\u672c\npostgres-replica:\n  image: postgres:15-alpine\n  environment:\n    POSTGRES_DB: harborai\n    POSTGRES_USER: harborai\n    POSTGRES_PASSWORD: harborai_password_2024\n    POSTGRES_MASTER_SERVICE: postgres\n  depends_on:\n    - postgres\n</code></pre>"},{"location":"PostgreSQL_Docker_Setup/#_25","title":"\u76d1\u63a7\u96c6\u6210","text":"<pre><code># \u6dfb\u52a0 pgAdmin \u7ba1\u7406\u754c\u9762\npgadmin:\n  image: dpage/pgadmin4:latest\n  environment:\n    PGADMIN_DEFAULT_EMAIL: admin@harborai.com\n    PGADMIN_DEFAULT_PASSWORD: admin_password\n  ports:\n    - \"8080:80\"\n  depends_on:\n    - postgres\n</code></pre>"},{"location":"PostgreSQL_Docker_Setup/#_26","title":"\u8054\u7cfb\u652f\u6301","text":"<p>\u5982\u679c\u9047\u5230\u95ee\u9898\uff0c\u8bf7\uff1a</p> <ol> <li>\u67e5\u770b\u672c\u6587\u6863\u7684\u6545\u969c\u6392\u67e5\u90e8\u5206</li> <li>\u8fd0\u884c <code>python test_postgres_docker.py</code> \u83b7\u53d6\u8be6\u7ec6\u8bca\u65ad\u4fe1\u606f</li> <li>\u68c0\u67e5 Docker \u548c PostgreSQL \u65e5\u5fd7</li> <li>\u8054\u7cfb\u6280\u672f\u652f\u6301\u56e2\u961f</li> </ol> <p>\u6700\u540e\u66f4\u65b0: 2025-10-15 \u7248\u672c: 1.0.0 \u7ef4\u62a4\u8005: HarborAI \u56e2\u961f</p>"},{"location":"PostgreSQL_Docker_%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/","title":"HarborAI PostgreSQL Docker \u4f7f\u7528\u8bf4\u660e","text":""},{"location":"PostgreSQL_Docker_%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_1","title":"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb","text":""},{"location":"PostgreSQL_Docker_%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#1","title":"1. \u542f\u52a8\u670d\u52a1","text":"<pre><code>docker-compose up -d\n</code></pre>"},{"location":"PostgreSQL_Docker_%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#2","title":"2. \u9a8c\u8bc1\u5b89\u88c5","text":"<pre><code>python test_postgres_docker.py\n</code></pre>"},{"location":"PostgreSQL_Docker_%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#3","title":"3. \u67e5\u770b\u670d\u52a1\u72b6\u6001","text":"<pre><code>docker-compose ps\n</code></pre>"},{"location":"PostgreSQL_Docker_%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_2","title":"\ud83d\udcca \u6d4b\u8bd5\u7ed3\u679c","text":"<p>\u2705 \u6240\u6709\u6d4b\u8bd5\u901a\u8fc7\uff01 </p> <p>\u6d4b\u8bd5\u8986\u76d6\uff1a - \u2705 \u57fa\u7840\u8fde\u63a5\u6d4b\u8bd5 - \u2705 \u8868\u7ed3\u6784\u9a8c\u8bc1 - \u2705 PostgreSQL \u5ba2\u6237\u7aef\u529f\u80fd - \u2705 \u65e5\u5fd7\u8bb0\u5f55\u5668\u529f\u80fd - \u2705 \u5f02\u6b65\u65e5\u5fd7\u8bb0\u5f55 - \u2705 \u65e5\u5fd7\u67e5\u770b\u529f\u80fd - \u2705 \u6027\u80fd\u6d4b\u8bd5</p>"},{"location":"PostgreSQL_Docker_%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_3","title":"\ud83d\udd27 \u6838\u5fc3\u529f\u80fd","text":""},{"location":"PostgreSQL_Docker_%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_4","title":"\u65e5\u5fd7\u8bb0\u5f55","text":"<pre><code>from harborai.storage import PostgreSQLLogger\n\nlogger = PostgreSQLLogger(\n    connection_string=\"postgresql://harborai:harborai_password_2024@localhost:5433/harborai\"\n)\nlogger.start()\n\n# \u8bb0\u5f55\u8bf7\u6c42\nlogger.log_request(\n    trace_id=\"unique_id\",\n    model=\"gpt-4\",\n    messages=[{\"role\": \"user\", \"content\": \"Hello\"}],\n    provider=\"openai\"\n)\n\n# \u8bb0\u5f55\u54cd\u5e94\nlogger.log_response(\n    trace_id=\"unique_id\",\n    response=response_obj,\n    latency=1.5,\n    success=True\n)\n\nlogger.stop()\n</code></pre>"},{"location":"PostgreSQL_Docker_%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_5","title":"\u65e5\u5fd7\u67e5\u8be2","text":"<pre><code>from harborai.database import PostgreSQLClient\n\nclient = PostgreSQLClient(\n    host=\"localhost\", port=5433, \n    database=\"harborai\", user=\"harborai\", \n    password=\"harborai_password_2024\"\n)\n\n# \u67e5\u8be2\u6700\u8fd1\u65e5\u5fd7\nlogs = client.get_recent_logs(limit=100)\n</code></pre>"},{"location":"PostgreSQL_Docker_%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_6","title":"\ud83d\udee0\ufe0f \u5e38\u7528\u547d\u4ee4","text":"<pre><code># \u542f\u52a8\u670d\u52a1\ndocker-compose up -d\n\n# \u505c\u6b62\u670d\u52a1\ndocker-compose down\n\n# \u67e5\u770b\u65e5\u5fd7\ndocker-compose logs postgres\n\n# \u91cd\u542f\u670d\u52a1\ndocker-compose restart postgres\n\n# \u8fde\u63a5\u6570\u636e\u5e93\ndocker exec -it harborai_postgres psql -U harborai -d harborai\n\n# \u5907\u4efd\u6570\u636e\ndocker exec harborai_postgres pg_dump -U harborai harborai &gt; backup.sql\n</code></pre>"},{"location":"PostgreSQL_Docker_%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_7","title":"\ud83d\udd0d \u6545\u969c\u6392\u67e5","text":""},{"location":"PostgreSQL_Docker_%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_8","title":"\u5bb9\u5668\u542f\u52a8\u5931\u8d25","text":"<pre><code>docker-compose logs postgres\ndocker-compose down -v\ndocker-compose up -d\n</code></pre>"},{"location":"PostgreSQL_Docker_%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_9","title":"\u8fde\u63a5\u5931\u8d25","text":"<pre><code>docker-compose ps\ndocker exec harborai_postgres pg_isready -U harborai -d harborai\n</code></pre>"},{"location":"PostgreSQL_Docker_%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_10","title":"\u8868\u4e0d\u5b58\u5728","text":"<pre><code>Get-Content docker/postgres/init/01-init-database.sql | docker exec -i harborai_postgres psql -U harborai -d harborai\n</code></pre>"},{"location":"PostgreSQL_Docker_%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_11","title":"\ud83d\udcc8 \u6027\u80fd\u4f18\u5316","text":"<ul> <li>\u6279\u91cf\u5927\u5c0f\uff1a100-500 \u6761\u8bb0\u5f55</li> <li>\u5237\u65b0\u95f4\u9694\uff1a5-10 \u79d2</li> <li>\u8fde\u63a5\u6c60\uff1a1-20 \u4e2a\u8fde\u63a5</li> </ul>"},{"location":"PostgreSQL_Docker_%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_12","title":"\ud83d\udd12 \u5b89\u5168\u914d\u7f6e","text":"<ul> <li>\u7aef\u53e3\uff1a5433\uff08\u907f\u514d\u51b2\u7a81\uff09</li> <li>\u7528\u6237\uff1aharborai</li> <li>\u5bc6\u7801\uff1aharborai_password_2024</li> <li>\u7f51\u7edc\uff1a\u9694\u79bb\u7684 Docker \u7f51\u7edc</li> </ul>"},{"location":"PostgreSQL_Docker_%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_13","title":"\ud83d\udccb \u914d\u7f6e\u6587\u4ef6","text":""},{"location":"PostgreSQL_Docker_%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#docker-composeyml","title":"docker-compose.yml","text":"<ul> <li>PostgreSQL 15-alpine</li> <li>\u5065\u5eb7\u68c0\u67e5</li> <li>\u6570\u636e\u6301\u4e45\u5316</li> <li>\u7f51\u7edc\u9694\u79bb</li> </ul>"},{"location":"PostgreSQL_Docker_%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_14","title":"\u521d\u59cb\u5316\u811a\u672c","text":"<ul> <li>\u8868\u7ed3\u6784\u521b\u5efa</li> <li>\u7d22\u5f15\u4f18\u5316</li> <li>\u6743\u9650\u8bbe\u7f6e</li> <li>\u89c6\u56fe\u5b9a\u4e49</li> </ul> <p>\u72b6\u6001: \u2705 \u5df2\u5b8c\u6210\u914d\u7f6e\u548c\u6d4b\u8bd5 \u7248\u672c: PostgreSQL 15 \u66f4\u65b0: 2025-10-15</p>"},{"location":"api/","title":"HarborAI API \u8be6\u7ec6\u6587\u6863","text":"<p>\u672c\u6587\u6863\u63d0\u4f9b HarborAI \u7684\u5b8c\u6574 API \u63a5\u53e3\u8bf4\u660e\uff0c\u5305\u62ec\u6240\u6709\u652f\u6301\u7684\u529f\u80fd\u548c\u8be6\u7ec6\u7684\u4f7f\u7528\u793a\u4f8b\u3002</p>"},{"location":"api/#_1","title":"\ud83d\udccb \u76ee\u5f55","text":"<ul> <li>\u57fa\u7840 API</li> <li>\u804a\u5929\u5b8c\u6210 API</li> <li>\u7ed3\u6784\u5316\u8f93\u51fa</li> <li>\u63a8\u7406\u6a21\u578b</li> <li>\u6d41\u5f0f\u54cd\u5e94</li> <li>\u5f02\u6b65\u8c03\u7528</li> <li>\u9519\u8bef\u5904\u7406</li> <li>\u6027\u80fd\u4f18\u5316 API</li> </ul>"},{"location":"api/#api","title":"\u57fa\u7840 API","text":""},{"location":"api/#_2","title":"\u5ba2\u6237\u7aef\u521d\u59cb\u5316","text":"<p>HarborAI \u63d0\u4f9b\u4e0e OpenAI SDK \u5b8c\u5168\u517c\u5bb9\u7684 API \u63a5\u53e3\uff1a</p> <pre><code>from harborai import HarborAI\n\n# \u57fa\u7840\u521d\u59cb\u5316\nclient = HarborAI(\n    api_key=\"your-api-key\",\n    base_url=\"https://api.deepseek.com/v1\"  # \u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3a OpenAI\n)\n\n# \u9ad8\u6027\u80fd\u521d\u59cb\u5316\nfrom harborai.api.fast_client import FastHarborAI\n\nfast_client = FastHarborAI(\n    api_key=\"your-api-key\",\n    performance_mode=\"fast\",  # fast, balanced, full\n    enable_memory_optimization=True\n)\n</code></pre>"},{"location":"api/#_3","title":"\u652f\u6301\u7684\u6a21\u578b","text":"<p>HarborAI \u652f\u6301\u591a\u4e2a AI \u670d\u52a1\u63d0\u4f9b\u5546\u7684\u6a21\u578b\uff1a</p> \u63d0\u4f9b\u5546 \u6a21\u578b\u540d\u79f0 \u7279\u6027 \u63a8\u8350\u7528\u9014 DeepSeek <code>deepseek-chat</code> \u9ad8\u6027\u4ef7\u6bd4\u3001\u4e2d\u6587\u53cb\u597d \u901a\u7528\u5bf9\u8bdd\u3001\u4ee3\u7801\u751f\u6210 DeepSeek <code>deepseek-reasoner</code> \u63a8\u7406\u80fd\u529b\u5f3a \u590d\u6742\u63a8\u7406\u3001\u6570\u5b66\u95ee\u9898 \u767e\u5ea6\u5343\u5e06 <code>ernie-x1-turbo-32k</code> \u957f\u4e0a\u4e0b\u6587\u3001\u4e2d\u6587\u4f18\u5316 \u957f\u6587\u6863\u5904\u7406 \u8c46\u5305 <code>doubao-1-6</code> \u63a8\u7406\u6a21\u578b \u903b\u8f91\u63a8\u7406\u3001\u5206\u6790 OpenAI <code>gpt-4o</code> \u591a\u6a21\u6001\u3001\u9ad8\u8d28\u91cf \u590d\u6742\u4efb\u52a1\u3001\u521b\u610f\u5199\u4f5c"},{"location":"api/#api_1","title":"\u804a\u5929\u5b8c\u6210 API","text":""},{"location":"api/#_4","title":"\u57fa\u7840\u804a\u5929","text":"<pre><code># \u540c\u6b65\u8c03\u7528\nresponse = client.chat.completions.create(\n    model=\"deepseek-chat\",\n    messages=[\n        {\"role\": \"system\", \"content\": \"\u4f60\u662f\u4e00\u4e2a\u6709\u7528\u7684AI\u52a9\u624b\u3002\"},\n        {\"role\": \"user\", \"content\": \"\u4f60\u597d\uff0c\u8bf7\u4ecb\u7ecd\u4e00\u4e0b\u81ea\u5df1\u3002\"}\n    ],\n    temperature=0.7,\n    max_tokens=150\n)\n\nprint(response.choices[0].message.content)\n</code></pre>"},{"location":"api/#_5","title":"\u591a\u8f6e\u5bf9\u8bdd","text":"<pre><code># \u7ef4\u62a4\u5bf9\u8bdd\u5386\u53f2\nconversation = [\n    {\"role\": \"system\", \"content\": \"\u4f60\u662f\u4e00\u4e2aPython\u7f16\u7a0b\u4e13\u5bb6\u3002\"}\n]\n\n# \u7b2c\u4e00\u8f6e\u5bf9\u8bdd\nconversation.append({\"role\": \"user\", \"content\": \"\u5982\u4f55\u521b\u5efa\u4e00\u4e2a\u5217\u8868\uff1f\"})\nresponse = client.chat.completions.create(\n    model=\"deepseek-chat\",\n    messages=conversation\n)\nconversation.append({\"role\": \"assistant\", \"content\": response.choices[0].message.content})\n\n# \u7b2c\u4e8c\u8f6e\u5bf9\u8bdd\nconversation.append({\"role\": \"user\", \"content\": \"\u5982\u4f55\u5411\u5217\u8868\u6dfb\u52a0\u5143\u7d20\uff1f\"})\nresponse = client.chat.completions.create(\n    model=\"deepseek-chat\",\n    messages=conversation\n)\n</code></pre>"},{"location":"api/#_6","title":"\u7ed3\u6784\u5316\u8f93\u51fa","text":"<p>HarborAI \u652f\u6301\u4e24\u79cd\u7ed3\u6784\u5316\u8f93\u51fa\u65b9\u5f0f\uff1a</p>"},{"location":"api/#1-json-schema","title":"1. JSON Schema \u65b9\u5f0f","text":"<pre><code># \u5b9a\u4e49 JSON Schema\nperson_schema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"name\": {\"type\": \"string\", \"description\": \"\u4eba\u5458\u59d3\u540d\"},\n        \"age\": {\"type\": \"integer\", \"description\": \"\u5e74\u9f84\"},\n        \"profession\": {\"type\": \"string\", \"description\": \"\u804c\u4e1a\"},\n        \"skills\": {\n            \"type\": \"array\",\n            \"items\": {\"type\": \"string\"},\n            \"description\": \"\u6280\u80fd\u5217\u8868\"\n        }\n    },\n    \"required\": [\"name\", \"age\", \"profession\"]\n}\n\n# \u4f7f\u7528\u7ed3\u6784\u5316\u8f93\u51fa\nresponse = client.chat.completions.create(\n    model=\"deepseek-chat\",\n    messages=[\n        {\"role\": \"user\", \"content\": \"\u63d0\u53d6\u4fe1\u606f\uff1a\u5f20\u4e09\uff0c30\u5c81\uff0c\u8f6f\u4ef6\u5de5\u7a0b\u5e08\uff0c\u64c5\u957fPython\u548cJavaScript\"}\n    ],\n    response_format={\n        \"type\": \"json_schema\",\n        \"json_schema\": {\n            \"name\": \"person_info\",\n            \"schema\": person_schema\n        }\n    },\n    structured_provider=\"agently\"  # \u53ef\u9009\uff1a\"agently\" \u6216 \"native\"\n)\n\n# \u89e3\u6790\u7ed3\u679c\nimport json\nresult = json.loads(response.choices[0].message.content)\nprint(f\"\u59d3\u540d: {result['name']}\")\nprint(f\"\u5e74\u9f84: {result['age']}\")\nprint(f\"\u804c\u4e1a: {result['profession']}\")\n</code></pre>"},{"location":"api/#2-pydantic","title":"2. Pydantic \u6a21\u578b\u65b9\u5f0f","text":"<pre><code>from pydantic import BaseModel\nfrom typing import List\n\n# \u5b9a\u4e49 Pydantic \u6a21\u578b\nclass PersonInfo(BaseModel):\n    \"\"\"\u4eba\u5458\u4fe1\u606f\u6a21\u578b\"\"\"\n    name: str  # \u59d3\u540d\n    age: int   # \u5e74\u9f84\n    profession: str  # \u804c\u4e1a\n    skills: List[str] = []  # \u6280\u80fd\u5217\u8868\n\n# \u4f7f\u7528 Pydantic \u6a21\u578b\nresponse = client.chat.completions.create(\n    model=\"deepseek-chat\",\n    messages=[\n        {\"role\": \"user\", \"content\": \"\u63d0\u53d6\u4fe1\u606f\uff1a\u674e\u56db\uff0c25\u5c81\uff0c\u6570\u636e\u79d1\u5b66\u5bb6\uff0c\u64c5\u957f\u673a\u5668\u5b66\u4e60\u548c\u6570\u636e\u5206\u6790\"}\n    ],\n    response_format={\n        \"type\": \"json_schema\",\n        \"json_schema\": {\n            \"name\": \"person_info\",\n            \"schema\": PersonInfo.model_json_schema()\n        }\n    }\n)\n\n# \u76f4\u63a5\u89e3\u6790\u4e3a Pydantic \u5bf9\u8c61\nperson = PersonInfo.model_validate_json(response.choices[0].message.content)\nprint(f\"\u59d3\u540d: {person.name}\")\nprint(f\"\u5e74\u9f84: {person.age}\")\nprint(f\"\u6280\u80fd: {', '.join(person.skills)}\")\n</code></pre>"},{"location":"api/#_7","title":"\u63a8\u7406\u6a21\u578b","text":"<p>\u63a8\u7406\u6a21\u578b\u652f\u6301\u663e\u793a\u601d\u8003\u8fc7\u7a0b\uff0c\u9002\u5408\u590d\u6742\u7684\u903b\u8f91\u63a8\u7406\u4efb\u52a1\uff1a</p> <pre><code># \u4f7f\u7528\u63a8\u7406\u6a21\u578b\nresponse = client.chat.completions.create(\n    model=\"deepseek-reasoner\",  # \u6216 \"doubao-1-6\"\n    messages=[\n        {\"role\": \"user\", \"content\": \"\u89e3\u65b9\u7a0b\uff1a2x + 5 = 13\uff0c\u8bf7\u8be6\u7ec6\u8bf4\u660e\u89e3\u9898\u6b65\u9aa4\"}\n    ]\n)\n\n# \u63a8\u7406\u6a21\u578b\u4f1a\u8fd4\u56de\u601d\u8003\u8fc7\u7a0b\nprint(\"\u601d\u8003\u8fc7\u7a0b:\")\nprint(response.choices[0].message.content)\n</code></pre>"},{"location":"api/#_8","title":"\u590d\u6742\u63a8\u7406\u793a\u4f8b","text":"<pre><code># \u6570\u5b66\u95ee\u9898\u63a8\u7406\nmath_problem = \"\"\"\n\u4e00\u4e2a\u73ed\u7ea7\u670930\u540d\u5b66\u751f\uff0c\u5176\u4e2d60%\u662f\u5973\u751f\u3002\n\u5982\u679c\u65b0\u8f6c\u67655\u540d\u7537\u751f\uff0c\u90a3\u4e48\u5973\u751f\u5360\u603b\u4eba\u6570\u7684\u767e\u5206\u6bd4\u662f\u591a\u5c11\uff1f\n\u8bf7\u8be6\u7ec6\u8ba1\u7b97\u5e76\u8bf4\u660e\u6bcf\u4e00\u6b65\u3002\n\"\"\"\n\nresponse = client.chat.completions.create(\n    model=\"deepseek-reasoner\",\n    messages=[\n        {\"role\": \"user\", \"content\": math_problem}\n    ],\n    temperature=0.1  # \u964d\u4f4e\u968f\u673a\u6027\uff0c\u63d0\u9ad8\u63a8\u7406\u51c6\u786e\u6027\n)\n\nprint(response.choices[0].message.content)\n</code></pre>"},{"location":"api/#_9","title":"\u6d41\u5f0f\u54cd\u5e94","text":"<p>\u6d41\u5f0f\u54cd\u5e94\u9002\u5408\u9700\u8981\u5b9e\u65f6\u663e\u793a\u751f\u6210\u5185\u5bb9\u7684\u573a\u666f\uff1a</p>"},{"location":"api/#_10","title":"\u540c\u6b65\u6d41\u5f0f\u54cd\u5e94","text":"<pre><code># \u540c\u6b65\u6d41\u5f0f\u8c03\u7528\nresponse = client.chat.completions.create(\n    model=\"deepseek-chat\",\n    messages=[\n        {\"role\": \"user\", \"content\": \"\u8bf7\u5199\u4e00\u4e2a\u5173\u4e8e\u4eba\u5de5\u667a\u80fd\u7684\u77ed\u6587\"}\n    ],\n    stream=True\n)\n\nprint(\"AI \u6b63\u5728\u751f\u6210\u5185\u5bb9:\")\nfor chunk in response:\n    if chunk.choices[0].delta.content:\n        print(chunk.choices[0].delta.content, end=\"\", flush=True)\nprint(\"\\n\")\n</code></pre>"},{"location":"api/#_11","title":"\u5f02\u6b65\u6d41\u5f0f\u54cd\u5e94","text":"<pre><code>import asyncio\n\nasync def async_stream_chat():\n    \"\"\"\u5f02\u6b65\u6d41\u5f0f\u804a\u5929\u793a\u4f8b\"\"\"\n    response = await client.chat.completions.acreate(\n        model=\"deepseek-chat\",\n        messages=[\n            {\"role\": \"user\", \"content\": \"\u8bf7\u4ecb\u7ecd\u4e00\u4e0b\u673a\u5668\u5b66\u4e60\u7684\u57fa\u672c\u6982\u5ff5\"}\n        ],\n        stream=True\n    )\n\n    print(\"AI \u6b63\u5728\u751f\u6210\u5185\u5bb9:\")\n    async for chunk in response:\n        if chunk.choices[0].delta.content:\n            print(chunk.choices[0].delta.content, end=\"\", flush=True)\n    print(\"\\n\")\n\n# \u8fd0\u884c\u5f02\u6b65\u51fd\u6570\nasyncio.run(async_stream_chat())\n</code></pre>"},{"location":"api/#_12","title":"\u5f02\u6b65\u8c03\u7528","text":"<p>HarborAI \u63d0\u4f9b\u5b8c\u6574\u7684\u5f02\u6b65\u652f\u6301\uff0c\u9002\u5408\u9ad8\u5e76\u53d1\u573a\u666f\uff1a</p>"},{"location":"api/#_13","title":"\u57fa\u7840\u5f02\u6b65\u8c03\u7528","text":"<pre><code>import asyncio\n\nasync def async_chat_example():\n    \"\"\"\u5f02\u6b65\u804a\u5929\u793a\u4f8b\"\"\"\n    response = await client.chat.completions.acreate(\n        model=\"deepseek-chat\",\n        messages=[\n            {\"role\": \"user\", \"content\": \"\u4ec0\u4e48\u662f\u5f02\u6b65\u7f16\u7a0b\uff1f\"}\n        ]\n    )\n    return response.choices[0].message.content\n\n# \u8fd0\u884c\u5f02\u6b65\u51fd\u6570\nresult = asyncio.run(async_chat_example())\nprint(result)\n</code></pre>"},{"location":"api/#_14","title":"\u5e76\u53d1\u5904\u7406\u591a\u4e2a\u8bf7\u6c42","text":"<pre><code>import asyncio\n\nasync def batch_process():\n    \"\"\"\u6279\u91cf\u5904\u7406\u591a\u4e2a\u8bf7\u6c42\"\"\"\n    questions = [\n        \"\u4ec0\u4e48\u662fPython\uff1f\",\n        \"\u4ec0\u4e48\u662f\u673a\u5668\u5b66\u4e60\uff1f\",\n        \"\u4ec0\u4e48\u662f\u6df1\u5ea6\u5b66\u4e60\uff1f\",\n        \"\u4ec0\u4e48\u662f\u81ea\u7136\u8bed\u8a00\u5904\u7406\uff1f\"\n    ]\n\n    # \u521b\u5efa\u5e76\u53d1\u4efb\u52a1\n    tasks = []\n    for question in questions:\n        task = client.chat.completions.acreate(\n            model=\"deepseek-chat\",\n            messages=[{\"role\": \"user\", \"content\": question}]\n        )\n        tasks.append(task)\n\n    # \u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210\n    responses = await asyncio.gather(*tasks)\n\n    # \u5904\u7406\u7ed3\u679c\n    for i, response in enumerate(responses):\n        print(f\"\u95ee\u9898 {i+1}: {questions[i]}\")\n        print(f\"\u56de\u7b54: {response.choices[0].message.content}\")\n        print(\"-\" * 50)\n\n# \u8fd0\u884c\u6279\u91cf\u5904\u7406\nasyncio.run(batch_process())\n</code></pre>"},{"location":"api/#_15","title":"\u9519\u8bef\u5904\u7406","text":"<p>HarborAI \u63d0\u4f9b\u5b8c\u5584\u7684\u9519\u8bef\u5904\u7406\u673a\u5236\uff1a</p>"},{"location":"api/#_16","title":"\u57fa\u7840\u9519\u8bef\u5904\u7406","text":"<pre><code>from harborai.core.exceptions import (\n    HarborAIError,\n    APIError,\n    RateLimitError,\n    AuthenticationError\n)\n\ntry:\n    response = client.chat.completions.create(\n        model=\"deepseek-chat\",\n        messages=[\n            {\"role\": \"user\", \"content\": \"Hello, world!\"}\n        ]\n    )\n    print(response.choices[0].message.content)\n\nexcept AuthenticationError as e:\n    print(f\"\u8ba4\u8bc1\u9519\u8bef: {e}\")\nexcept RateLimitError as e:\n    print(f\"\u8bf7\u6c42\u9891\u7387\u9650\u5236: {e}\")\nexcept APIError as e:\n    print(f\"API \u9519\u8bef: {e}\")\nexcept HarborAIError as e:\n    print(f\"HarborAI \u9519\u8bef: {e}\")\nexcept Exception as e:\n    print(f\"\u672a\u77e5\u9519\u8bef: {e}\")\n</code></pre>"},{"location":"api/#_17","title":"\u91cd\u8bd5\u673a\u5236","text":"<pre><code>from harborai.core.retry import RetryConfig\n\n# \u914d\u7f6e\u91cd\u8bd5\u7b56\u7565\nretry_config = RetryConfig(\n    max_retries=3,\n    base_delay=1.0,\n    max_delay=60.0,\n    exponential_base=2.0\n)\n\n# \u4f7f\u7528\u91cd\u8bd5\u914d\u7f6e\nclient = HarborAI(\n    api_key=\"your-api-key\",\n    retry_config=retry_config\n)\n</code></pre>"},{"location":"api/#api_2","title":"\u6027\u80fd\u4f18\u5316 API","text":""},{"location":"api/#fastharborai","title":"FastHarborAI \u5ba2\u6237\u7aef","text":"<pre><code>from harborai.api.fast_client import FastHarborAI\n\n# \u521b\u5efa\u9ad8\u6027\u80fd\u5ba2\u6237\u7aef\nfast_client = FastHarborAI(\n    api_key=\"your-api-key\",\n    performance_mode=\"fast\",  # \u6027\u80fd\u6a21\u5f0f\n    enable_memory_optimization=True,  # \u542f\u7528\u5185\u5b58\u4f18\u5316\n    enable_lazy_loading=True,  # \u542f\u7528\u5ef6\u8fdf\u52a0\u8f7d\n    memory_optimization={\n        'cache_size': 2000,\n        'object_pool_size': 200,\n        'memory_threshold_mb': 100.0,\n        'auto_cleanup_interval': 600\n    }\n)\n</code></pre>"},{"location":"api/#_18","title":"\u6027\u80fd\u76d1\u63a7","text":"<pre><code># \u83b7\u53d6\u6027\u80fd\u7edf\u8ba1\nif hasattr(fast_client, 'get_memory_stats'):\n    stats = fast_client.get_memory_stats()\n    if stats:\n        print(f\"\u7f13\u5b58\u547d\u4e2d\u7387: {stats['cache']['hit_rate']:.1%}\")\n        print(f\"\u5185\u5b58\u4f7f\u7528: {stats['system_memory']['rss_mb']:.1f}MB\")\n        print(f\"\u8bf7\u6c42\u603b\u6570: {stats['requests']['total']}\")\n\n# \u624b\u52a8\u6e05\u7406\u5185\u5b58\nif hasattr(fast_client, 'cleanup_memory'):\n    fast_client.cleanup_memory(force_clear=True)\n</code></pre>"},{"location":"api/#_19","title":"\u6027\u80fd\u6a21\u5f0f\u5bf9\u6bd4","text":"\u6a21\u5f0f \u6210\u672c\u8ddf\u8e2a \u8be6\u7ec6\u65e5\u5fd7 \u76d1\u63a7 \u94fe\u8def\u8ffd\u8e2a \u9002\u7528\u573a\u666f FAST \u274c \u274c \u274c \u274c \u9ad8\u5e76\u53d1\u751f\u4ea7\u73af\u5883 BALANCED \u2705 \u274c \u2705 \u274c \u4e00\u822c\u751f\u4ea7\u73af\u5883 FULL \u2705 \u2705 \u2705 \u2705 \u5f00\u53d1\u8c03\u8bd5\u73af\u5883"},{"location":"api/#_20","title":"\u6700\u4f73\u5b9e\u8df5","text":""},{"location":"api/#1","title":"1. \u6a21\u578b\u9009\u62e9\u5efa\u8bae","text":"<pre><code># \u6839\u636e\u4efb\u52a1\u7c7b\u578b\u9009\u62e9\u5408\u9002\u7684\u6a21\u578b\ndef choose_model(task_type: str) -&gt; str:\n    \"\"\"\u6839\u636e\u4efb\u52a1\u7c7b\u578b\u9009\u62e9\u6700\u9002\u5408\u7684\u6a21\u578b\"\"\"\n    model_mapping = {\n        \"chat\": \"deepseek-chat\",           # \u901a\u7528\u5bf9\u8bdd\n        \"reasoning\": \"deepseek-reasoner\",   # \u590d\u6742\u63a8\u7406\n        \"long_context\": \"ernie-x1-turbo-32k\",  # \u957f\u6587\u6863\u5904\u7406\n        \"creative\": \"gpt-4o\",              # \u521b\u610f\u5199\u4f5c\n        \"code\": \"deepseek-chat\"            # \u4ee3\u7801\u751f\u6210\n    }\n    return model_mapping.get(task_type, \"deepseek-chat\")\n</code></pre>"},{"location":"api/#2","title":"2. \u9519\u8bef\u91cd\u8bd5\u7b56\u7565","text":"<pre><code>import time\nfrom typing import Optional\n\nasync def robust_chat_call(\n    client: HarborAI,\n    messages: list,\n    model: str = \"deepseek-chat\",\n    max_retries: int = 3\n) -&gt; Optional[str]:\n    \"\"\"\u5065\u58ee\u7684\u804a\u5929\u8c03\u7528\uff0c\u5305\u542b\u91cd\u8bd5\u673a\u5236\"\"\"\n\n    for attempt in range(max_retries):\n        try:\n            response = await client.chat.completions.acreate(\n                model=model,\n                messages=messages\n            )\n            return response.choices[0].message.content\n\n        except RateLimitError:\n            if attempt &lt; max_retries - 1:\n                wait_time = 2 ** attempt  # \u6307\u6570\u9000\u907f\n                await asyncio.sleep(wait_time)\n                continue\n            raise\n\n        except Exception as e:\n            if attempt &lt; max_retries - 1:\n                await asyncio.sleep(1)\n                continue\n            raise\n\n    return None\n</code></pre>"},{"location":"api/#3","title":"3. \u5185\u5b58\u4f18\u5316\u4f7f\u7528","text":"<pre><code># \u5927\u6279\u91cf\u5904\u7406\u65f6\u7684\u5185\u5b58\u4f18\u5316\nasync def process_large_batch(questions: list, batch_size: int = 10):\n    \"\"\"\u5206\u6279\u5904\u7406\u5927\u91cf\u8bf7\u6c42\uff0c\u907f\u514d\u5185\u5b58\u6ea2\u51fa\"\"\"\n\n    results = []\n    for i in range(0, len(questions), batch_size):\n        batch = questions[i:i + batch_size]\n\n        # \u5904\u7406\u5f53\u524d\u6279\u6b21\n        batch_tasks = [\n            client.chat.completions.acreate(\n                model=\"deepseek-chat\",\n                messages=[{\"role\": \"user\", \"content\": q}]\n            )\n            for q in batch\n        ]\n\n        batch_results = await asyncio.gather(*batch_tasks)\n        results.extend(batch_results)\n\n        # \u6e05\u7406\u5185\u5b58\uff08\u5982\u679c\u4f7f\u7528 FastHarborAI\uff09\n        if hasattr(client, 'cleanup_memory'):\n            client.cleanup_memory()\n\n        # \u77ed\u6682\u4f11\u606f\uff0c\u907f\u514d\u8bf7\u6c42\u8fc7\u4e8e\u9891\u7e41\n        await asyncio.sleep(0.1)\n\n    return results\n</code></pre>"},{"location":"api/#_21","title":"\u5e38\u89c1\u95ee\u9898","text":""},{"location":"api/#q","title":"Q: \u5982\u4f55\u9009\u62e9\u5408\u9002\u7684\u6027\u80fd\u6a21\u5f0f\uff1f","text":"<p>A: \u6839\u636e\u60a8\u7684\u4f7f\u7528\u573a\u666f\u9009\u62e9\uff1a - \u751f\u4ea7\u73af\u5883\u9ad8\u5e76\u53d1: \u4f7f\u7528 <code>FAST</code> \u6a21\u5f0f - \u4e00\u822c\u751f\u4ea7\u73af\u5883: \u4f7f\u7528 <code>BALANCED</code> \u6a21\u5f0f - \u5f00\u53d1\u8c03\u8bd5: \u4f7f\u7528 <code>FULL</code> \u6a21\u5f0f</p>"},{"location":"api/#q_1","title":"Q: \u7ed3\u6784\u5316\u8f93\u51fa\u5931\u8d25\u600e\u4e48\u529e\uff1f","text":"<p>A: \u5c1d\u8bd5\u4ee5\u4e0b\u89e3\u51b3\u65b9\u6848\uff1a 1. \u68c0\u67e5 JSON Schema \u683c\u5f0f\u662f\u5426\u6b63\u786e 2. \u4f7f\u7528 <code>structured_provider=\"agently\"</code> \u63d0\u9ad8\u6210\u529f\u7387 3. \u5728 prompt \u4e2d\u660e\u786e\u8981\u6c42\u8fd4\u56de JSON \u683c\u5f0f 4. \u964d\u4f4e <code>temperature</code> \u53c2\u6570\u63d0\u9ad8\u4e00\u81f4\u6027</p>"},{"location":"api/#q_2","title":"Q: \u5982\u4f55\u5904\u7406\u957f\u6587\u672c\uff1f","text":"<p>A:  1. \u4f7f\u7528\u652f\u6301\u957f\u4e0a\u4e0b\u6587\u7684\u6a21\u578b\u5982 <code>ernie-x1-turbo-32k</code> 2. \u5c06\u957f\u6587\u672c\u5206\u6bb5\u5904\u7406 3. \u4f7f\u7528\u6d41\u5f0f\u54cd\u5e94\u907f\u514d\u8d85\u65f6</p> <p>\u66f4\u591a API \u8be6\u60c5\u8bf7\u53c2\u8003: HarborAI GitHub | \u793a\u4f8b\u4ee3\u7801</p>"},{"location":"architecture/","title":"HarborAI \u67b6\u6784\u8bbe\u8ba1\u6587\u6863","text":"<p>\u672c\u6587\u6863\u8be6\u7ec6\u4ecb\u7ecd HarborAI \u7684\u7cfb\u7edf\u67b6\u6784\u8bbe\u8ba1\uff0c\u5305\u62ec\u6838\u5fc3\u7ec4\u4ef6\u3001\u8bbe\u8ba1\u7406\u5ff5\u548c\u6280\u672f\u5b9e\u73b0\u3002</p>"},{"location":"architecture/#_1","title":"\ud83d\udccb \u76ee\u5f55","text":"<ul> <li>\u6574\u4f53\u67b6\u6784</li> <li>\u6838\u5fc3\u7ec4\u4ef6</li> <li>\u63d2\u4ef6\u7cfb\u7edf</li> <li>\u6027\u80fd\u4f18\u5316\u67b6\u6784</li> <li>\u6570\u636e\u6d41\u8bbe\u8ba1</li> <li>\u5b89\u5168\u67b6\u6784</li> <li>\u6269\u5c55\u6027\u8bbe\u8ba1</li> </ul>"},{"location":"architecture/#_2","title":"\u6574\u4f53\u67b6\u6784","text":"<p>HarborAI \u91c7\u7528\u5206\u5c42\u67b6\u6784\u8bbe\u8ba1\uff0c\u786e\u4fdd\u9ad8\u6027\u80fd\u3001\u9ad8\u53ef\u9760\u6027\u548c\u826f\u597d\u7684\u6269\u5c55\u6027\uff1a</p> <pre><code>graph TB\n    A[\u7528\u6237\u5e94\u7528\u5c42] --&gt; B[HarborAI \u5ba2\u6237\u7aef\u63a5\u53e3]\n    B --&gt; C[\u6027\u80fd\u4f18\u5316\u5c42]\n    C --&gt; D[\u6838\u5fc3\u670d\u52a1\u5c42]\n    D --&gt; E[\u63d2\u4ef6\u7ba1\u7406\u5c42]\n    E --&gt; F[AI\u670d\u52a1\u9002\u914d\u5c42]\n\n    F --&gt; G[OpenAI API]\n    F --&gt; H[DeepSeek API]\n    F --&gt; I[\u767e\u5ea6\u5343\u5e06 API]\n    F --&gt; J[\u8c46\u5305 API]\n\n    C --&gt; K[\u667a\u80fd\u7f13\u5b58]\n    C --&gt; L[\u5185\u5b58\u4f18\u5316]\n    C --&gt; M[\u5ef6\u8fdf\u52a0\u8f7d]\n\n    D --&gt; N[\u76d1\u63a7\u7cfb\u7edf]\n    N --&gt; O[\u6027\u80fd\u7edf\u8ba1]\n    N --&gt; P[\u9519\u8bef\u8ffd\u8e2a]\n    N --&gt; Q[\u6210\u672c\u5206\u6790]\n\n    style A fill:#e1f5fe\n    style B fill:#f3e5f5\n    style C fill:#e8f5e8\n    style D fill:#fff3e0\n    style E fill:#fce4ec\n    style F fill:#f1f8e9</code></pre>"},{"location":"architecture/#_3","title":"\u67b6\u6784\u5c42\u7ea7\u8bf4\u660e","text":"\u5c42\u7ea7 \u804c\u8d23 \u6838\u5fc3\u7ec4\u4ef6 \u7528\u6237\u5e94\u7528\u5c42 \u4e1a\u52a1\u903b\u8f91\u5b9e\u73b0 \u7528\u6237\u4ee3\u7801\u3001\u5e94\u7528\u6846\u67b6 \u5ba2\u6237\u7aef\u63a5\u53e3\u5c42 API \u517c\u5bb9\u6027 HarborAI\u3001FastHarborAI \u6027\u80fd\u4f18\u5316\u5c42 \u6027\u80fd\u63d0\u5347 \u7f13\u5b58\u3001\u5185\u5b58\u4f18\u5316\u3001\u5ef6\u8fdf\u52a0\u8f7d \u6838\u5fc3\u670d\u52a1\u5c42 \u4e1a\u52a1\u903b\u8f91 \u8bf7\u6c42\u5904\u7406\u3001\u54cd\u5e94\u89e3\u6790\u3001\u9519\u8bef\u5904\u7406 \u63d2\u4ef6\u7ba1\u7406\u5c42 \u529f\u80fd\u6269\u5c55 \u63d2\u4ef6\u52a0\u8f7d\u3001\u751f\u547d\u5468\u671f\u7ba1\u7406 AI\u670d\u52a1\u9002\u914d\u5c42 \u591a\u5382\u5546\u652f\u6301 \u534f\u8bae\u9002\u914d\u3001\u8bf7\u6c42\u8f6c\u6362"},{"location":"architecture/#_4","title":"\u6838\u5fc3\u7ec4\u4ef6","text":""},{"location":"architecture/#1-clientmanager","title":"1. \u5ba2\u6237\u7aef\u7ba1\u7406\u5668 (ClientManager)","text":"<pre><code>\"\"\"\n\u5ba2\u6237\u7aef\u7ba1\u7406\u5668\u8d1f\u8d23\u7edf\u4e00\u7ba1\u7406\u4e0d\u540cAI\u670d\u52a1\u63d0\u4f9b\u5546\u7684\u5ba2\u6237\u7aef\u5b9e\u4f8b\n\"\"\"\nclass ClientManager:\n    def __init__(self):\n        self._clients = {}  # \u5ba2\u6237\u7aef\u7f13\u5b58\n        self._config = {}   # \u914d\u7f6e\u7ba1\u7406\n\n    def get_client(self, provider: str) -&gt; BaseClient:\n        \"\"\"\u83b7\u53d6\u6307\u5b9a\u63d0\u4f9b\u5546\u7684\u5ba2\u6237\u7aef\u5b9e\u4f8b\"\"\"\n\n    def register_provider(self, provider: str, client_class: type):\n        \"\"\"\u6ce8\u518c\u65b0\u7684AI\u670d\u52a1\u63d0\u4f9b\u5546\"\"\"\n</code></pre> <p>\u6838\u5fc3\u7279\u6027\uff1a - \u5355\u4f8b\u6a21\u5f0f: \u786e\u4fdd\u5ba2\u6237\u7aef\u5b9e\u4f8b\u7684\u552f\u4e00\u6027 - \u5ef6\u8fdf\u521d\u59cb\u5316: \u6309\u9700\u521b\u5efa\u5ba2\u6237\u7aef\u5b9e\u4f8b - \u914d\u7f6e\u7ba1\u7406: \u7edf\u4e00\u7ba1\u7406\u5404\u63d0\u4f9b\u5546\u7684\u914d\u7f6e - \u6545\u969c\u9694\u79bb: \u5355\u4e2a\u63d0\u4f9b\u5546\u6545\u969c\u4e0d\u5f71\u54cd\u5176\u4ed6\u670d\u52a1</p>"},{"location":"architecture/#2-performancemanager","title":"2. \u6027\u80fd\u7ba1\u7406\u5668 (PerformanceManager)","text":"<pre><code>\"\"\"\n\u6027\u80fd\u7ba1\u7406\u5668\u8d1f\u8d23\u7cfb\u7edf\u6027\u80fd\u4f18\u5316\u548c\u76d1\u63a7\n\"\"\"\nclass PerformanceManager:\n    def __init__(self, mode: str = \"balanced\"):\n        self.mode = mode  # fast, balanced, full\n        self.cache = CacheManager()\n        self.memory = MemoryOptimizer()\n\n    def optimize_request(self, request: dict) -&gt; dict:\n        \"\"\"\u4f18\u5316\u8bf7\u6c42\u53c2\u6570\"\"\"\n\n    def track_performance(self, metrics: dict):\n        \"\"\"\u6027\u80fd\u6307\u6807\u8ffd\u8e2a\"\"\"\n</code></pre> <p>\u4f18\u5316\u7b56\u7565\uff1a - \u4e09\u7ea7\u6027\u80fd\u6a21\u5f0f: FAST/BALANCED/FULL - \u667a\u80fd\u7f13\u5b58: LRU + TTL \u7f13\u5b58\u7b56\u7565 - \u5185\u5b58\u4f18\u5316: \u5bf9\u8c61\u6c60 + \u5f31\u5f15\u7528\u673a\u5236 - \u8bf7\u6c42\u4f18\u5316: \u53c2\u6570\u538b\u7f29 + \u6279\u91cf\u5904\u7406</p>"},{"location":"architecture/#3-pluginmanager","title":"3. \u63d2\u4ef6\u7ba1\u7406\u5668 (PluginManager)","text":"<pre><code>\"\"\"\n\u63d2\u4ef6\u7ba1\u7406\u5668\u63d0\u4f9b\u53ef\u6269\u5c55\u7684\u63d2\u4ef6\u67b6\u6784\n\"\"\"\nclass PluginManager:\n    def __init__(self):\n        self._plugins = {}\n        self._hooks = defaultdict(list)\n\n    def register_plugin(self, plugin: BaseLLMPlugin):\n        \"\"\"\u6ce8\u518c\u63d2\u4ef6\"\"\"\n\n    def execute_hook(self, hook_name: str, *args, **kwargs):\n        \"\"\"\u6267\u884c\u94a9\u5b50\u51fd\u6570\"\"\"\n</code></pre> <p>\u63d2\u4ef6\u7c7b\u578b\uff1a - \u8bf7\u6c42\u63d2\u4ef6: \u8bf7\u6c42\u9884\u5904\u7406\u3001\u53c2\u6570\u9a8c\u8bc1 - \u54cd\u5e94\u63d2\u4ef6: \u54cd\u5e94\u540e\u5904\u7406\u3001\u683c\u5f0f\u8f6c\u6362 - \u76d1\u63a7\u63d2\u4ef6: \u6027\u80fd\u76d1\u63a7\u3001\u65e5\u5fd7\u8bb0\u5f55 - \u5b89\u5168\u63d2\u4ef6: \u8bbf\u95ee\u63a7\u5236\u3001\u6570\u636e\u52a0\u5bc6</p>"},{"location":"architecture/#_5","title":"\u63d2\u4ef6\u7cfb\u7edf","text":""},{"location":"architecture/#_6","title":"\u63d2\u4ef6\u67b6\u6784\u8bbe\u8ba1","text":"<p>HarborAI \u91c7\u7528\u57fa\u4e8e\u94a9\u5b50\u7684\u63d2\u4ef6\u67b6\u6784\uff0c\u652f\u6301\u5728\u8bf7\u6c42\u751f\u547d\u5468\u671f\u7684\u5404\u4e2a\u9636\u6bb5\u63d2\u5165\u81ea\u5b9a\u4e49\u903b\u8f91\uff1a</p> <pre><code>\"\"\"\n\u63d2\u4ef6\u57fa\u7c7b\u5b9a\u4e49\n\"\"\"\nfrom abc import ABC, abstractmethod\n\nclass BaseLLMPlugin(ABC):\n    \"\"\"LLM\u63d2\u4ef6\u57fa\u7c7b\"\"\"\n\n    @abstractmethod\n    def get_name(self) -&gt; str:\n        \"\"\"\u83b7\u53d6\u63d2\u4ef6\u540d\u79f0\"\"\"\n        pass\n\n    def on_request_start(self, request: dict) -&gt; dict:\n        \"\"\"\u8bf7\u6c42\u5f00\u59cb\u65f6\u7684\u94a9\u5b50\"\"\"\n        return request\n\n    def on_request_end(self, request: dict, response: dict) -&gt; dict:\n        \"\"\"\u8bf7\u6c42\u7ed3\u675f\u65f6\u7684\u94a9\u5b50\"\"\"\n        return response\n\n    def on_error(self, request: dict, error: Exception) -&gt; Exception:\n        \"\"\"\u9519\u8bef\u5904\u7406\u94a9\u5b50\"\"\"\n        return error\n</code></pre>"},{"location":"architecture/#_7","title":"\u5185\u7f6e\u63d2\u4ef6","text":""},{"location":"architecture/#1","title":"1. \u6210\u672c\u8ffd\u8e2a\u63d2\u4ef6","text":"<pre><code>class CostTrackingPlugin(BaseLLMPlugin):\n    \"\"\"\u6210\u672c\u8ffd\u8e2a\u63d2\u4ef6\"\"\"\n\n    def on_request_end(self, request: dict, response: dict) -&gt; dict:\n        # \u8ba1\u7b97\u8bf7\u6c42\u6210\u672c\n        cost = self.calculate_cost(request, response)\n\n        # \u8bb0\u5f55\u6210\u672c\u4fe1\u606f\n        self.cost_tracker.record(cost)\n\n        return response\n</code></pre>"},{"location":"architecture/#2","title":"2. \u6027\u80fd\u76d1\u63a7\u63d2\u4ef6","text":"<pre><code>class PerformanceMonitoringPlugin(BaseLLMPlugin):\n    \"\"\"\u6027\u80fd\u76d1\u63a7\u63d2\u4ef6\"\"\"\n\n    def on_request_start(self, request: dict) -&gt; dict:\n        # \u8bb0\u5f55\u8bf7\u6c42\u5f00\u59cb\u65f6\u95f4\n        request['_start_time'] = time.time()\n        return request\n\n    def on_request_end(self, request: dict, response: dict) -&gt; dict:\n        # \u8ba1\u7b97\u8bf7\u6c42\u8017\u65f6\n        duration = time.time() - request['_start_time']\n\n        # \u8bb0\u5f55\u6027\u80fd\u6307\u6807\n        self.metrics.record_latency(duration)\n\n        return response\n</code></pre>"},{"location":"architecture/#3","title":"3. \u7f13\u5b58\u63d2\u4ef6","text":"<pre><code>class CachePlugin(BaseLLMPlugin):\n    \"\"\"\u667a\u80fd\u7f13\u5b58\u63d2\u4ef6\"\"\"\n\n    def on_request_start(self, request: dict) -&gt; dict:\n        # \u68c0\u67e5\u7f13\u5b58\n        cache_key = self.generate_cache_key(request)\n        cached_response = self.cache.get(cache_key)\n\n        if cached_response:\n            # \u8fd4\u56de\u7f13\u5b58\u7ed3\u679c\n            request['_cached_response'] = cached_response\n\n        return request\n</code></pre>"},{"location":"architecture/#_8","title":"\u63d2\u4ef6\u914d\u7f6e","text":"<pre><code># \u63d2\u4ef6\u914d\u7f6e\u793a\u4f8b\nplugin_config = {\n    \"cost_tracking\": {\n        \"enabled\": True,\n        \"storage\": \"database\",  # database, file, memory\n        \"alert_threshold\": 100.0  # \u6210\u672c\u544a\u8b66\u9608\u503c\n    },\n    \"performance_monitoring\": {\n        \"enabled\": True,\n        \"metrics_backend\": \"prometheus\",\n        \"sample_rate\": 1.0\n    },\n    \"caching\": {\n        \"enabled\": True,\n        \"backend\": \"redis\",\n        \"ttl\": 3600,\n        \"max_size\": 10000\n    }\n}\n</code></pre>"},{"location":"architecture/#_9","title":"\u6027\u80fd\u4f18\u5316\u67b6\u6784","text":""},{"location":"architecture/#_10","title":"\u4e09\u5c42\u6027\u80fd\u4f18\u5316","text":"<p>HarborAI \u5b9e\u73b0\u4e86\u4e09\u5c42\u6027\u80fd\u4f18\u5316\u67b6\u6784\uff1a</p>"},{"location":"architecture/#_11","title":"\u7b2c\u4e00\u5c42\uff1a\u5ef6\u8fdf\u52a0\u8f7d\u4f18\u5316","text":"<pre><code>\"\"\"\n\u5ef6\u8fdf\u52a0\u8f7d\u7ba1\u7406\u5668\n\"\"\"\nclass LazyLoadManager:\n    def __init__(self):\n        self._loaded_modules = set()\n        self._module_loaders = {}\n\n    def register_module(self, name: str, loader: callable):\n        \"\"\"\u6ce8\u518c\u6a21\u5757\u52a0\u8f7d\u5668\"\"\"\n        self._module_loaders[name] = loader\n\n    def load_module(self, name: str):\n        \"\"\"\u6309\u9700\u52a0\u8f7d\u6a21\u5757\"\"\"\n        if name not in self._loaded_modules:\n            loader = self._module_loaders.get(name)\n            if loader:\n                loader()\n                self._loaded_modules.add(name)\n</code></pre> <p>\u4f18\u5316\u6548\u679c\uff1a - \u521d\u59cb\u5316\u65f6\u95f4\uff1a\u4ece 800ms \u964d\u4f4e\u5230 \u2264160ms - \u5185\u5b58\u5360\u7528\uff1a\u51cf\u5c11 60% \u521d\u59cb\u5185\u5b58\u4f7f\u7528 - \u542f\u52a8\u901f\u5ea6\uff1a\u63d0\u5347 5x</p>"},{"location":"architecture/#_12","title":"\u7b2c\u4e8c\u5c42\uff1a\u5185\u5b58\u4f18\u5316","text":"<pre><code>\"\"\"\n\u5185\u5b58\u4f18\u5316\u5668\n\"\"\"\nclass MemoryOptimizer:\n    def __init__(self):\n        self.object_pool = ObjectPool()\n        self.weak_refs = WeakValueDictionary()\n        self.gc_scheduler = GCScheduler()\n\n    def optimize_memory(self):\n        \"\"\"\u6267\u884c\u5185\u5b58\u4f18\u5316\"\"\"\n        # \u6e05\u7406\u5bf9\u8c61\u6c60\n        self.object_pool.cleanup()\n\n        # \u6e05\u7406\u5f31\u5f15\u7528\n        self.weak_refs.cleanup()\n\n        # \u89e6\u53d1\u5783\u573e\u56de\u6536\n        self.gc_scheduler.collect()\n</code></pre> <p>\u4f18\u5316\u7b56\u7565\uff1a - \u5bf9\u8c61\u6c60: \u590d\u7528\u9891\u7e41\u521b\u5efa\u7684\u5bf9\u8c61 - \u5f31\u5f15\u7528: \u907f\u514d\u5faa\u73af\u5f15\u7528\u5bfc\u81f4\u7684\u5185\u5b58\u6cc4\u6f0f - \u667a\u80fdGC: \u5728\u5408\u9002\u65f6\u673a\u89e6\u53d1\u5783\u573e\u56de\u6536 - \u5185\u5b58\u76d1\u63a7: \u5b9e\u65f6\u76d1\u63a7\u5185\u5b58\u4f7f\u7528\u60c5\u51b5</p>"},{"location":"architecture/#_13","title":"\u7b2c\u4e09\u5c42\uff1a\u8bf7\u6c42\u4f18\u5316","text":"<pre><code>\"\"\"\n\u8bf7\u6c42\u4f18\u5316\u5668\n\"\"\"\nclass RequestOptimizer:\n    def __init__(self):\n        self.cache = LRUCache(maxsize=2000)\n        self.compressor = RequestCompressor()\n        self.batcher = RequestBatcher()\n\n    def optimize_request(self, request: dict) -&gt; dict:\n        \"\"\"\u4f18\u5316\u8bf7\u6c42\"\"\"\n        # \u53c2\u6570\u538b\u7f29\n        compressed = self.compressor.compress(request)\n\n        # \u7f13\u5b58\u68c0\u67e5\n        cached = self.cache.get(compressed)\n        if cached:\n            return cached\n\n        return compressed\n</code></pre>"},{"location":"architecture/#_14","title":"\u6027\u80fd\u76d1\u63a7\u67b6\u6784","text":"<pre><code>\"\"\"\n\u6027\u80fd\u76d1\u63a7\u7cfb\u7edf\n\"\"\"\nclass PerformanceMonitor:\n    def __init__(self):\n        self.metrics_collector = MetricsCollector()\n        self.alerting = AlertingSystem()\n        self.dashboard = Dashboard()\n\n    def collect_metrics(self):\n        \"\"\"\u6536\u96c6\u6027\u80fd\u6307\u6807\"\"\"\n        metrics = {\n            'latency': self.measure_latency(),\n            'throughput': self.measure_throughput(),\n            'memory_usage': self.measure_memory(),\n            'cache_hit_rate': self.measure_cache_hit_rate()\n        }\n\n        self.metrics_collector.record(metrics)\n        self.check_alerts(metrics)\n</code></pre>"},{"location":"architecture/#_15","title":"\u6570\u636e\u6d41\u8bbe\u8ba1","text":""},{"location":"architecture/#_16","title":"\u8bf7\u6c42\u5904\u7406\u6d41\u7a0b","text":"<pre><code>sequenceDiagram\n    participant U as \u7528\u6237\u4ee3\u7801\n    participant C as HarborAI\u5ba2\u6237\u7aef\n    participant P as \u6027\u80fd\u4f18\u5316\u5c42\n    participant M as \u63d2\u4ef6\u7ba1\u7406\u5668\n    participant A as AI\u670d\u52a1\u9002\u914d\u5668\n    participant S as AI\u670d\u52a1\u5546\n\n    U-&gt;&gt;C: \u53d1\u8d77\u8bf7\u6c42\n    C-&gt;&gt;P: \u6027\u80fd\u4f18\u5316\n    P-&gt;&gt;M: \u6267\u884c\u8bf7\u6c42\u63d2\u4ef6\n    M-&gt;&gt;A: \u9002\u914d\u5668\u5904\u7406\n    A-&gt;&gt;S: \u8c03\u7528AI\u670d\u52a1\n    S-&gt;&gt;A: \u8fd4\u56de\u54cd\u5e94\n    A-&gt;&gt;M: \u6267\u884c\u54cd\u5e94\u63d2\u4ef6\n    M-&gt;&gt;P: \u6027\u80fd\u7edf\u8ba1\n    P-&gt;&gt;C: \u8fd4\u56de\u4f18\u5316\u7ed3\u679c\n    C-&gt;&gt;U: \u8fd4\u56de\u6700\u7ec8\u54cd\u5e94</code></pre>"},{"location":"architecture/#_17","title":"\u6570\u636e\u8f6c\u6362\u5c42","text":"<pre><code>\"\"\"\n\u6570\u636e\u8f6c\u6362\u5668\u8d1f\u8d23\u4e0d\u540cAI\u670d\u52a1\u5546\u4e4b\u95f4\u7684\u534f\u8bae\u8f6c\u6362\n\"\"\"\nclass DataTransformer:\n    def __init__(self):\n        self.transformers = {\n            'openai': OpenAITransformer(),\n            'deepseek': DeepSeekTransformer(),\n            'ernie': ErnieTransformer(),\n            'doubao': DoubaoTransformer()\n        }\n\n    def transform_request(self, provider: str, request: dict) -&gt; dict:\n        \"\"\"\u8f6c\u6362\u8bf7\u6c42\u683c\u5f0f\"\"\"\n        transformer = self.transformers.get(provider)\n        return transformer.transform_request(request)\n\n    def transform_response(self, provider: str, response: dict) -&gt; dict:\n        \"\"\"\u8f6c\u6362\u54cd\u5e94\u683c\u5f0f\"\"\"\n        transformer = self.transformers.get(provider)\n        return transformer.transform_response(response)\n</code></pre>"},{"location":"architecture/#_18","title":"\u5b89\u5168\u67b6\u6784","text":""},{"location":"architecture/#_19","title":"\u5b89\u5168\u5c42\u7ea7","text":"<p>HarborAI \u5b9e\u73b0\u4e86\u591a\u5c42\u5b89\u5168\u9632\u62a4\uff1a</p>"},{"location":"architecture/#1_1","title":"1. \u8bbf\u95ee\u63a7\u5236\u5c42","text":"<pre><code>\"\"\"\n\u8bbf\u95ee\u63a7\u5236\u7ba1\u7406\u5668\n\"\"\"\nclass AccessControlManager:\n    def __init__(self):\n        self.auth_providers = {}\n        self.permission_checker = PermissionChecker()\n\n    def authenticate(self, credentials: dict) -&gt; bool:\n        \"\"\"\u8eab\u4efd\u8ba4\u8bc1\"\"\"\n\n    def authorize(self, user: str, resource: str, action: str) -&gt; bool:\n        \"\"\"\u6743\u9650\u6388\u6743\"\"\"\n</code></pre>"},{"location":"architecture/#2_1","title":"2. \u6570\u636e\u4fdd\u62a4\u5c42","text":"<pre><code>\"\"\"\n\u6570\u636e\u4fdd\u62a4\u7ba1\u7406\u5668\n\"\"\"\nclass DataProtectionManager:\n    def __init__(self):\n        self.encryptor = DataEncryptor()\n        self.sanitizer = DataSanitizer()\n\n    def protect_request(self, request: dict) -&gt; dict:\n        \"\"\"\u4fdd\u62a4\u8bf7\u6c42\u6570\u636e\"\"\"\n        # \u654f\u611f\u6570\u636e\u52a0\u5bc6\n        encrypted = self.encryptor.encrypt_sensitive_data(request)\n\n        # \u6570\u636e\u6e05\u7406\n        sanitized = self.sanitizer.sanitize(encrypted)\n\n        return sanitized\n</code></pre>"},{"location":"architecture/#3_1","title":"3. \u5ba1\u8ba1\u65e5\u5fd7\u5c42","text":"<pre><code>\"\"\"\n\u5ba1\u8ba1\u65e5\u5fd7\u7ba1\u7406\u5668\n\"\"\"\nclass AuditLogger:\n    def __init__(self):\n        self.logger = StructuredLogger()\n        self.storage = AuditStorage()\n\n    def log_request(self, request: dict, user: str):\n        \"\"\"\u8bb0\u5f55\u8bf7\u6c42\u5ba1\u8ba1\u65e5\u5fd7\"\"\"\n        audit_log = {\n            'timestamp': datetime.utcnow(),\n            'user': user,\n            'action': 'api_request',\n            'resource': request.get('model'),\n            'details': self.sanitize_for_audit(request)\n        }\n\n        self.storage.store(audit_log)\n</code></pre>"},{"location":"architecture/#_20","title":"\u6269\u5c55\u6027\u8bbe\u8ba1","text":""},{"location":"architecture/#_21","title":"\u6c34\u5e73\u6269\u5c55","text":"<p>HarborAI \u652f\u6301\u591a\u79cd\u6c34\u5e73\u6269\u5c55\u65b9\u5f0f\uff1a</p>"},{"location":"architecture/#1_2","title":"1. \u8d1f\u8f7d\u5747\u8861","text":"<pre><code>\"\"\"\n\u8d1f\u8f7d\u5747\u8861\u5668\n\"\"\"\nclass LoadBalancer:\n    def __init__(self):\n        self.strategies = {\n            'round_robin': RoundRobinStrategy(),\n            'weighted': WeightedStrategy(),\n            'least_connections': LeastConnectionsStrategy()\n        }\n\n    def select_instance(self, instances: list, strategy: str = 'round_robin'):\n        \"\"\"\u9009\u62e9\u670d\u52a1\u5b9e\u4f8b\"\"\"\n        strategy_impl = self.strategies.get(strategy)\n        return strategy_impl.select(instances)\n</code></pre>"},{"location":"architecture/#2_2","title":"2. \u670d\u52a1\u53d1\u73b0","text":"<pre><code>\"\"\"\n\u670d\u52a1\u53d1\u73b0\u7ba1\u7406\u5668\n\"\"\"\nclass ServiceDiscovery:\n    def __init__(self):\n        self.registry = ServiceRegistry()\n        self.health_checker = HealthChecker()\n\n    def register_service(self, service: ServiceInfo):\n        \"\"\"\u6ce8\u518c\u670d\u52a1\"\"\"\n\n    def discover_services(self, service_type: str) -&gt; list:\n        \"\"\"\u53d1\u73b0\u670d\u52a1\"\"\"\n</code></pre>"},{"location":"architecture/#_22","title":"\u5782\u76f4\u6269\u5c55","text":""},{"location":"architecture/#1_3","title":"1. \u8d44\u6e90\u6c60\u7ba1\u7406","text":"<pre><code>\"\"\"\n\u8d44\u6e90\u6c60\u7ba1\u7406\u5668\n\"\"\"\nclass ResourcePoolManager:\n    def __init__(self):\n        self.connection_pool = ConnectionPool()\n        self.thread_pool = ThreadPoolExecutor()\n        self.memory_pool = MemoryPool()\n\n    def scale_resources(self, load_factor: float):\n        \"\"\"\u6839\u636e\u8d1f\u8f7d\u52a8\u6001\u8c03\u6574\u8d44\u6e90\"\"\"\n</code></pre>"},{"location":"architecture/#2_3","title":"2. \u81ea\u9002\u5e94\u4f18\u5316","text":"<pre><code>\"\"\"\n\u81ea\u9002\u5e94\u4f18\u5316\u5668\n\"\"\"\nclass AdaptiveOptimizer:\n    def __init__(self):\n        self.performance_analyzer = PerformanceAnalyzer()\n        self.config_tuner = ConfigurationTuner()\n\n    def optimize_configuration(self, metrics: dict):\n        \"\"\"\u6839\u636e\u6027\u80fd\u6307\u6807\u81ea\u52a8\u4f18\u5316\u914d\u7f6e\"\"\"\n</code></pre>"},{"location":"architecture/#_23","title":"\u8bbe\u8ba1\u539f\u5219","text":""},{"location":"architecture/#1_4","title":"1. \u5355\u4e00\u804c\u8d23\u539f\u5219","text":"<p>\u6bcf\u4e2a\u7ec4\u4ef6\u90fd\u6709\u660e\u786e\u7684\u804c\u8d23\u8fb9\u754c\uff0c\u907f\u514d\u529f\u80fd\u8026\u5408\u3002</p>"},{"location":"architecture/#2_4","title":"2. \u5f00\u653e\u5c01\u95ed\u539f\u5219","text":"<p>\u7cfb\u7edf\u5bf9\u6269\u5c55\u5f00\u653e\uff0c\u5bf9\u4fee\u6539\u5c01\u95ed\uff0c\u901a\u8fc7\u63d2\u4ef6\u673a\u5236\u5b9e\u73b0\u529f\u80fd\u6269\u5c55\u3002</p>"},{"location":"architecture/#3_2","title":"3. \u4f9d\u8d56\u5012\u7f6e\u539f\u5219","text":"<p>\u9ad8\u5c42\u6a21\u5757\u4e0d\u4f9d\u8d56\u4f4e\u5c42\u6a21\u5757\uff0c\u90fd\u4f9d\u8d56\u4e8e\u62bd\u8c61\u63a5\u53e3\u3002</p>"},{"location":"architecture/#4","title":"4. \u63a5\u53e3\u9694\u79bb\u539f\u5219","text":"<p>\u4f7f\u7528\u591a\u4e2a\u4e13\u95e8\u7684\u63a5\u53e3\uff0c\u800c\u4e0d\u662f\u5355\u4e00\u7684\u603b\u63a5\u53e3\u3002</p>"},{"location":"architecture/#5","title":"5. \u6700\u5c0f\u77e5\u8bc6\u539f\u5219","text":"<p>\u7ec4\u4ef6\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u6700\u5c0f\u5316\uff0c\u964d\u4f4e\u7cfb\u7edf\u590d\u6742\u5ea6\u3002</p>"},{"location":"architecture/#_24","title":"\u6280\u672f\u9009\u578b","text":""},{"location":"architecture/#_25","title":"\u6838\u5fc3\u6280\u672f\u6808","text":"\u6280\u672f\u9886\u57df \u9009\u62e9 \u7406\u7531 \u7f16\u7a0b\u8bed\u8a00 Python 3.9+ \u751f\u6001\u4e30\u5bcc\u3001AI\u53cb\u597d \u5f02\u6b65\u6846\u67b6 asyncio \u539f\u751f\u5f02\u6b65\u652f\u6301 HTTP\u5ba2\u6237\u7aef httpx \u73b0\u4ee3\u5f02\u6b65HTTP\u5ba2\u6237\u7aef \u7f13\u5b58 Redis/\u5185\u5b58 \u9ad8\u6027\u80fd\u7f13\u5b58\u65b9\u6848 \u76d1\u63a7 Prometheus \u4e91\u539f\u751f\u76d1\u63a7\u6807\u51c6 \u65e5\u5fd7 structlog \u7ed3\u6784\u5316\u65e5\u5fd7\u652f\u6301"},{"location":"architecture/#_26","title":"\u4f9d\u8d56\u7ba1\u7406","text":"<pre><code># \u6838\u5fc3\u4f9d\u8d56\ncore_dependencies = [\n    \"httpx&gt;=0.24.0\",      # HTTP\u5ba2\u6237\u7aef\n    \"pydantic&gt;=2.0.0\",    # \u6570\u636e\u9a8c\u8bc1\n    \"structlog&gt;=23.0.0\",  # \u7ed3\u6784\u5316\u65e5\u5fd7\n    \"tenacity&gt;=8.0.0\",    # \u91cd\u8bd5\u673a\u5236\n]\n\n# \u53ef\u9009\u4f9d\u8d56\noptional_dependencies = {\n    \"redis\": [\"redis&gt;=4.0.0\"],\n    \"prometheus\": [\"prometheus-client&gt;=0.16.0\"],\n    \"opentelemetry\": [\"opentelemetry-api&gt;=1.15.0\"]\n}\n</code></pre> <p>\u67b6\u6784\u6587\u6863\u7248\u672c: v1.0.0 | \u66f4\u65b0\u65f6\u95f4: 2025-01-25</p>"},{"location":"deployment/","title":"HarborAI \u90e8\u7f72\u6307\u5357","text":"<p>\u672c\u6587\u6863\u8be6\u7ec6\u4ecb\u7ecd HarborAI \u7684\u5404\u79cd\u90e8\u7f72\u65b9\u5f0f\uff0c\u5305\u62ec\u672c\u5730\u90e8\u7f72\u3001Docker \u90e8\u7f72\u3001Kubernetes \u90e8\u7f72\u548c\u4e91\u5e73\u53f0\u90e8\u7f72\u3002</p>"},{"location":"deployment/#_1","title":"\ud83d\udccb \u76ee\u5f55","text":"<ul> <li>\u90e8\u7f72\u6982\u8ff0</li> <li>\u672c\u5730\u90e8\u7f72</li> <li>Docker \u90e8\u7f72</li> <li>Kubernetes \u90e8\u7f72</li> <li>\u4e91\u5e73\u53f0\u90e8\u7f72</li> <li>\u76d1\u63a7\u4e0e\u65e5\u5fd7</li> <li>\u5b89\u5168\u914d\u7f6e</li> <li>\u6027\u80fd\u8c03\u4f18</li> <li>\u6545\u969c\u6392\u67e5</li> </ul>"},{"location":"deployment/#_2","title":"\u90e8\u7f72\u6982\u8ff0","text":""},{"location":"deployment/#_3","title":"\ud83c\udfaf \u90e8\u7f72\u67b6\u6784","text":"<p>HarborAI \u652f\u6301\u591a\u79cd\u90e8\u7f72\u6a21\u5f0f\uff1a</p> <pre><code>graph TB\n    subgraph \"\u5ba2\u6237\u7aef\u5c42\"\n        A[Python \u5e94\u7528]\n        B[Web \u5e94\u7528]\n        C[\u79fb\u52a8\u5e94\u7528]\n    end\n\n    subgraph \"\u8d1f\u8f7d\u5747\u8861\u5c42\"\n        D[Nginx/HAProxy]\n    end\n\n    subgraph \"\u5e94\u7528\u5c42\"\n        E[HarborAI \u5b9e\u4f8b 1]\n        F[HarborAI \u5b9e\u4f8b 2]\n        G[HarborAI \u5b9e\u4f8b N]\n    end\n\n    subgraph \"\u7f13\u5b58\u5c42\"\n        H[Redis \u96c6\u7fa4]\n    end\n\n    subgraph \"\u76d1\u63a7\u5c42\"\n        I[Prometheus]\n        J[Grafana]\n        K[ELK Stack]\n    end\n\n    A --&gt; D\n    B --&gt; D\n    C --&gt; D\n    D --&gt; E\n    D --&gt; F\n    D --&gt; G\n    E --&gt; H\n    F --&gt; H\n    G --&gt; H\n    E --&gt; I\n    F --&gt; I\n    G --&gt; I\n    I --&gt; J\n    E --&gt; K\n    F --&gt; K\n    G --&gt; K</code></pre>"},{"location":"deployment/#_4","title":"\ud83d\udcca \u90e8\u7f72\u6a21\u5f0f\u5bf9\u6bd4","text":"\u90e8\u7f72\u6a21\u5f0f \u9002\u7528\u573a\u666f \u4f18\u52bf \u52a3\u52bf \u590d\u6742\u5ea6 \u672c\u5730\u90e8\u7f72 \u5f00\u53d1\u6d4b\u8bd5 \u7b80\u5355\u5feb\u901f \u4e0d\u9002\u5408\u751f\u4ea7 \u2b50 Docker \u5355\u673a \u5c0f\u578b\u751f\u4ea7 \u9694\u79bb\u6027\u597d \u5355\u70b9\u6545\u969c \u2b50\u2b50 Docker Compose \u4e2d\u578b\u5e94\u7528 \u6613\u4e8e\u7ba1\u7406 \u6269\u5c55\u6027\u6709\u9650 \u2b50\u2b50\u2b50 Kubernetes \u5927\u578b\u751f\u4ea7 \u9ad8\u53ef\u7528\u3001\u81ea\u52a8\u6269\u5c55 \u590d\u6742\u5ea6\u9ad8 \u2b50\u2b50\u2b50\u2b50\u2b50 \u4e91\u5e73\u53f0 \u4f01\u4e1a\u7ea7 \u6258\u7ba1\u670d\u52a1 \u6210\u672c\u8f83\u9ad8 \u2b50\u2b50\u2b50"},{"location":"deployment/#_5","title":"\u672c\u5730\u90e8\u7f72","text":""},{"location":"deployment/#_6","title":"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb","text":""},{"location":"deployment/#1","title":"1. \u73af\u5883\u51c6\u5907","text":"<pre><code># \u68c0\u67e5 Python \u7248\u672c\npython --version  # \u9700\u8981 3.8+\n\n# \u521b\u5efa\u865a\u62df\u73af\u5883\npython -m venv harborai-env\n\n# \u6fc0\u6d3b\u865a\u62df\u73af\u5883\n# Windows\nharborai-env\\Scripts\\activate\n# macOS/Linux\nsource harborai-env/bin/activate\n</code></pre>"},{"location":"deployment/#2-harborai","title":"2. \u5b89\u88c5 HarborAI","text":"<pre><code># \u4ece PyPI \u5b89\u88c5\npip install harborai\n\n# \u6216\u4ece\u6e90\u7801\u5b89\u88c5\ngit clone https://github.com/your-org/harborai.git\ncd harborai\npip install -e .\n</code></pre>"},{"location":"deployment/#3","title":"3. \u914d\u7f6e\u73af\u5883\u53d8\u91cf","text":"<p>\u521b\u5efa <code>.env</code> \u6587\u4ef6\uff1a</p> <pre><code># API \u914d\u7f6e\nDEEPSEEK_API_KEY=your_deepseek_api_key\nOPENAI_API_KEY=your_openai_api_key\n\n# \u6027\u80fd\u914d\u7f6e\nHARBORAI_PERFORMANCE_MODE=balanced\nHARBORAI_CACHE_ENABLED=true\nHARBORAI_MAX_CONNECTIONS=100\n\n# \u65e5\u5fd7\u914d\u7f6e\nHARBORAI_LOG_LEVEL=INFO\nHARBORAI_LOG_FILE=logs/harborai.log\n\n# Redis \u914d\u7f6e\uff08\u53ef\u9009\uff09\nREDIS_URL=redis://localhost:6379/0\n</code></pre>"},{"location":"deployment/#4","title":"4. \u542f\u52a8\u5e94\u7528","text":"<pre><code>\"\"\"\n\u672c\u5730\u90e8\u7f72\u793a\u4f8b\u5e94\u7528\n\"\"\"\nimport os\nimport asyncio\nfrom harborai import HarborAI\nfrom harborai.api.fast_client import FastHarborAI\n\nasync def main():\n    \"\"\"\u4e3b\u51fd\u6570\"\"\"\n    # \u521b\u5efa\u5ba2\u6237\u7aef\n    client = FastHarborAI(\n        api_key=os.getenv(\"DEEPSEEK_API_KEY\"),\n        performance_mode=os.getenv(\"HARBORAI_PERFORMANCE_MODE\", \"balanced\")\n    )\n\n    # \u6d4b\u8bd5\u8fde\u63a5\n    try:\n        response = await client.chat.completions.create(\n            model=\"deepseek-chat\",\n            messages=[\n                {\"role\": \"user\", \"content\": \"Hello, HarborAI!\"}\n            ]\n        )\n\n        print(\"\u2705 HarborAI \u90e8\u7f72\u6210\u529f!\")\n        print(f\"\u54cd\u5e94: {response.choices[0].message.content}\")\n\n    except Exception as e:\n        print(f\"\u274c \u90e8\u7f72\u5931\u8d25: {e}\")\n\n    finally:\n        await client.close()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"deployment/#_7","title":"\ud83d\udd27 \u672c\u5730\u5f00\u53d1\u670d\u52a1\u5668","text":"<p>\u521b\u5efa\u5f00\u53d1\u670d\u52a1\u5668 <code>dev_server.py</code>:</p> <pre><code>\"\"\"\nHarborAI \u5f00\u53d1\u670d\u52a1\u5668\n\"\"\"\nimport asyncio\nimport logging\nfrom fastapi import FastAPI, HTTPException\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom pydantic import BaseModel\nfrom typing import List, Optional\nimport uvicorn\n\nfrom harborai.api.fast_client import FastHarborAI\n\n# \u914d\u7f6e\u65e5\u5fd7\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n# \u521b\u5efa FastAPI \u5e94\u7528\napp = FastAPI(\n    title=\"HarborAI API Server\",\n    description=\"HarborAI \u5f00\u53d1\u670d\u52a1\u5668\",\n    version=\"1.0.0\"\n)\n\n# \u6dfb\u52a0 CORS \u4e2d\u95f4\u4ef6\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# \u5168\u5c40\u5ba2\u6237\u7aef\u5b9e\u4f8b\nharbor_client = None\n\nclass ChatRequest(BaseModel):\n    \"\"\"\u804a\u5929\u8bf7\u6c42\u6a21\u578b\"\"\"\n    model: str = \"deepseek-chat\"\n    messages: List[dict]\n    temperature: Optional[float] = 0.7\n    max_tokens: Optional[int] = None\n\nclass ChatResponse(BaseModel):\n    \"\"\"\u804a\u5929\u54cd\u5e94\u6a21\u578b\"\"\"\n    content: str\n    usage: dict\n\n@app.on_event(\"startup\")\nasync def startup_event():\n    \"\"\"\u542f\u52a8\u4e8b\u4ef6\"\"\"\n    global harbor_client\n\n    api_key = os.getenv(\"DEEPSEEK_API_KEY\")\n    if not api_key:\n        raise ValueError(\"\u8bf7\u8bbe\u7f6e DEEPSEEK_API_KEY \u73af\u5883\u53d8\u91cf\")\n\n    harbor_client = FastHarborAI(\n        api_key=api_key,\n        performance_mode=\"fast\"\n    )\n\n    logger.info(\"\ud83d\ude80 HarborAI \u670d\u52a1\u5668\u542f\u52a8\u6210\u529f\")\n\n@app.on_event(\"shutdown\")\nasync def shutdown_event():\n    \"\"\"\u5173\u95ed\u4e8b\u4ef6\"\"\"\n    global harbor_client\n\n    if harbor_client:\n        await harbor_client.close()\n\n    logger.info(\"\ud83d\uded1 HarborAI \u670d\u52a1\u5668\u5df2\u5173\u95ed\")\n\n@app.get(\"/health\")\nasync def health_check():\n    \"\"\"\u5065\u5eb7\u68c0\u67e5\"\"\"\n    return {\"status\": \"healthy\", \"service\": \"HarborAI\"}\n\n@app.post(\"/chat/completions\", response_model=ChatResponse)\nasync def chat_completions(request: ChatRequest):\n    \"\"\"\u804a\u5929\u5b8c\u6210\u63a5\u53e3\"\"\"\n    try:\n        response = await harbor_client.chat.completions.create(\n            model=request.model,\n            messages=request.messages,\n            temperature=request.temperature,\n            max_tokens=request.max_tokens\n        )\n\n        return ChatResponse(\n            content=response.choices[0].message.content,\n            usage=response.usage.__dict__\n        )\n\n    except Exception as e:\n        logger.error(f\"\u804a\u5929\u5b8c\u6210\u5931\u8d25: {e}\")\n        raise HTTPException(status_code=500, detail=str(e))\n\n@app.get(\"/stats\")\nasync def get_stats():\n    \"\"\"\u83b7\u53d6\u7edf\u8ba1\u4fe1\u606f\"\"\"\n    if hasattr(harbor_client, 'get_stats'):\n        return harbor_client.get_stats()\n    return {\"message\": \"\u7edf\u8ba1\u4fe1\u606f\u4e0d\u53ef\u7528\"}\n\nif __name__ == \"__main__\":\n    uvicorn.run(\n        \"dev_server:app\",\n        host=\"0.0.0.0\",\n        port=8000,\n        reload=True,\n        log_level=\"info\"\n    )\n</code></pre> <p>\u542f\u52a8\u5f00\u53d1\u670d\u52a1\u5668\uff1a</p> <pre><code>python dev_server.py\n</code></pre>"},{"location":"deployment/#docker","title":"Docker \u90e8\u7f72","text":""},{"location":"deployment/#docker_1","title":"\ud83d\udc33 Docker \u5355\u673a\u90e8\u7f72","text":""},{"location":"deployment/#1-dockerfile","title":"1. \u521b\u5efa Dockerfile","text":"<pre><code># Dockerfile\nFROM python:3.11-slim\n\n# \u8bbe\u7f6e\u5de5\u4f5c\u76ee\u5f55\nWORKDIR /app\n\n# \u5b89\u88c5\u7cfb\u7edf\u4f9d\u8d56\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gcc \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# \u590d\u5236\u4f9d\u8d56\u6587\u4ef6\nCOPY requirements.txt .\n\n# \u5b89\u88c5 Python \u4f9d\u8d56\nRUN pip install --no-cache-dir -r requirements.txt\n\n# \u590d\u5236\u5e94\u7528\u4ee3\u7801\nCOPY . .\n\n# \u5b89\u88c5 HarborAI\nRUN pip install -e .\n\n# \u521b\u5efa\u975e root \u7528\u6237\nRUN useradd --create-home --shell /bin/bash harborai\nRUN chown -R harborai:harborai /app\nUSER harborai\n\n# \u66b4\u9732\u7aef\u53e3\nEXPOSE 8000\n\n# \u5065\u5eb7\u68c0\u67e5\nHEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\n    CMD curl -f http://localhost:8000/health || exit 1\n\n# \u542f\u52a8\u547d\u4ee4\nCMD [\"uvicorn\", \"dev_server:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n</code></pre>"},{"location":"deployment/#2-dockerignore","title":"2. \u521b\u5efa .dockerignore","text":"<pre><code># .dockerignore\n.git\n.gitignore\nREADME.md\nDockerfile\n.dockerignore\n.pytest_cache\n.coverage\nhtmlcov/\n.tox/\n.cache\n.mypy_cache\n.vscode/\n.idea/\n*.pyc\n__pycache__/\n.env\nlogs/\n</code></pre>"},{"location":"deployment/#3_1","title":"3. \u6784\u5efa\u548c\u8fd0\u884c","text":"<pre><code># \u6784\u5efa\u955c\u50cf\ndocker build -t harborai:latest .\n\n# \u8fd0\u884c\u5bb9\u5668\ndocker run -d \\\n    --name harborai-app \\\n    -p 8000:8000 \\\n    -e DEEPSEEK_API_KEY=your_api_key \\\n    -e HARBORAI_PERFORMANCE_MODE=fast \\\n    -v $(pwd)/logs:/app/logs \\\n    harborai:latest\n\n# \u67e5\u770b\u65e5\u5fd7\ndocker logs -f harborai-app\n\n# \u8fdb\u5165\u5bb9\u5668\ndocker exec -it harborai-app bash\n</code></pre>"},{"location":"deployment/#docker-compose","title":"\ud83d\udc19 Docker Compose \u90e8\u7f72","text":""},{"location":"deployment/#1-docker-composeyml","title":"1. \u521b\u5efa docker-compose.yml","text":"<pre><code># docker-compose.yml\nversion: '3.8'\n\nservices:\n  harborai:\n    build: .\n    container_name: harborai-app\n    ports:\n      - \"8000:8000\"\n    environment:\n      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}\n      - HARBORAI_PERFORMANCE_MODE=balanced\n      - REDIS_URL=redis://redis:6379/0\n      - HARBORAI_LOG_LEVEL=INFO\n    volumes:\n      - ./logs:/app/logs\n      - ./config:/app/config\n    depends_on:\n      - redis\n    restart: unless-stopped\n    networks:\n      - harborai-network\n\n  redis:\n    image: redis:7-alpine\n    container_name: harborai-redis\n    ports:\n      - \"6379:6379\"\n    volumes:\n      - redis_data:/data\n    command: redis-server --appendonly yes\n    restart: unless-stopped\n    networks:\n      - harborai-network\n\n  nginx:\n    image: nginx:alpine\n    container_name: harborai-nginx\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n      - ./ssl:/etc/nginx/ssl\n    depends_on:\n      - harborai\n    restart: unless-stopped\n    networks:\n      - harborai-network\n\n  prometheus:\n    image: prom/prometheus:latest\n    container_name: harborai-prometheus\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n      - prometheus_data:/prometheus\n    command:\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.path=/prometheus'\n      - '--web.console.libraries=/etc/prometheus/console_libraries'\n      - '--web.console.templates=/etc/prometheus/consoles'\n    restart: unless-stopped\n    networks:\n      - harborai-network\n\n  grafana:\n    image: grafana/grafana:latest\n    container_name: harborai-grafana\n    ports:\n      - \"3000:3000\"\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=admin123\n    volumes:\n      - grafana_data:/var/lib/grafana\n      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards\n      - ./grafana/datasources:/etc/grafana/provisioning/datasources\n    restart: unless-stopped\n    networks:\n      - harborai-network\n\nvolumes:\n  redis_data:\n  prometheus_data:\n  grafana_data:\n\nnetworks:\n  harborai-network:\n    driver: bridge\n</code></pre>"},{"location":"deployment/#2-nginx","title":"2. \u521b\u5efa Nginx \u914d\u7f6e","text":"<pre><code># nginx.conf\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    upstream harborai_backend {\n        server harborai:8000;\n    }\n\n    # \u9650\u6d41\u914d\u7f6e\n    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;\n\n    server {\n        listen 80;\n        server_name localhost;\n\n        # \u9650\u6d41\n        limit_req zone=api burst=20 nodelay;\n\n        # \u4ee3\u7406\u914d\u7f6e\n        location / {\n            proxy_pass http://harborai_backend;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n\n            # \u8d85\u65f6\u914d\u7f6e\n            proxy_connect_timeout 30s;\n            proxy_send_timeout 30s;\n            proxy_read_timeout 30s;\n        }\n\n        # \u5065\u5eb7\u68c0\u67e5\n        location /health {\n            proxy_pass http://harborai_backend/health;\n            access_log off;\n        }\n\n        # \u9759\u6001\u6587\u4ef6\u7f13\u5b58\n        location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)$ {\n            expires 1y;\n            add_header Cache-Control \"public, immutable\";\n        }\n    }\n}\n</code></pre>"},{"location":"deployment/#3_2","title":"3. \u542f\u52a8\u670d\u52a1","text":"<pre><code># \u521b\u5efa\u73af\u5883\u53d8\u91cf\u6587\u4ef6\necho \"DEEPSEEK_API_KEY=your_api_key\" &gt; .env\n\n# \u542f\u52a8\u6240\u6709\u670d\u52a1\ndocker-compose up -d\n\n# \u67e5\u770b\u670d\u52a1\u72b6\u6001\ndocker-compose ps\n\n# \u67e5\u770b\u65e5\u5fd7\ndocker-compose logs -f harborai\n\n# \u505c\u6b62\u670d\u52a1\ndocker-compose down\n\n# \u505c\u6b62\u5e76\u5220\u9664\u6570\u636e\ndocker-compose down -v\n</code></pre>"},{"location":"deployment/#kubernetes","title":"Kubernetes \u90e8\u7f72","text":""},{"location":"deployment/#kubernetes_1","title":"\u2638\ufe0f Kubernetes \u96c6\u7fa4\u90e8\u7f72","text":""},{"location":"deployment/#1_1","title":"1. \u521b\u5efa\u547d\u540d\u7a7a\u95f4","text":"<pre><code># namespace.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: harborai\n  labels:\n    name: harborai\n</code></pre>"},{"location":"deployment/#2","title":"2. \u521b\u5efa\u914d\u7f6e\u6620\u5c04","text":"<pre><code># configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: harborai-config\n  namespace: harborai\ndata:\n  HARBORAI_PERFORMANCE_MODE: \"balanced\"\n  HARBORAI_LOG_LEVEL: \"INFO\"\n  REDIS_URL: \"redis://redis-service:6379/0\"\n  HARBORAI_MAX_CONNECTIONS: \"100\"\n</code></pre>"},{"location":"deployment/#3_3","title":"3. \u521b\u5efa\u5bc6\u94a5","text":"<pre><code># secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: harborai-secrets\n  namespace: harborai\ntype: Opaque\ndata:\n  DEEPSEEK_API_KEY: &lt;base64_encoded_api_key&gt;\n  OPENAI_API_KEY: &lt;base64_encoded_api_key&gt;\n</code></pre> <pre><code># \u521b\u5efa\u5bc6\u94a5\nkubectl create secret generic harborai-secrets \\\n  --from-literal=DEEPSEEK_API_KEY=your_deepseek_key \\\n  --from-literal=OPENAI_API_KEY=your_openai_key \\\n  -n harborai\n</code></pre>"},{"location":"deployment/#4_1","title":"4. \u521b\u5efa\u90e8\u7f72","text":"<pre><code># deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: harborai-deployment\n  namespace: harborai\n  labels:\n    app: harborai\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: harborai\n  template:\n    metadata:\n      labels:\n        app: harborai\n    spec:\n      containers:\n      - name: harborai\n        image: harborai:latest\n        ports:\n        - containerPort: 8000\n        env:\n        - name: DEEPSEEK_API_KEY\n          valueFrom:\n            secretKeyRef:\n              name: harborai-secrets\n              key: DEEPSEEK_API_KEY\n        - name: OPENAI_API_KEY\n          valueFrom:\n            secretKeyRef:\n              name: harborai-secrets\n              key: OPENAI_API_KEY\n        envFrom:\n        - configMapRef:\n            name: harborai-config\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n        volumeMounts:\n        - name: logs\n          mountPath: /app/logs\n      volumes:\n      - name: logs\n        emptyDir: {}\n</code></pre>"},{"location":"deployment/#5","title":"5. \u521b\u5efa\u670d\u52a1","text":"<pre><code># service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: harborai-service\n  namespace: harborai\n  labels:\n    app: harborai\nspec:\n  selector:\n    app: harborai\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 8000\n  type: ClusterIP\n</code></pre>"},{"location":"deployment/#6-ingress","title":"6. \u521b\u5efa Ingress","text":"<pre><code># ingress.yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: harborai-ingress\n  namespace: harborai\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/rate-limit: \"100\"\n    nginx.ingress.kubernetes.io/rate-limit-window: \"1m\"\n    cert-manager.io/cluster-issuer: \"letsencrypt-prod\"\nspec:\n  tls:\n  - hosts:\n    - harborai.yourdomain.com\n    secretName: harborai-tls\n  rules:\n  - host: harborai.yourdomain.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: harborai-service\n            port:\n              number: 80\n</code></pre>"},{"location":"deployment/#7-hpa","title":"7. \u521b\u5efa HPA\uff08\u6c34\u5e73\u81ea\u52a8\u6269\u5c55\uff09","text":"<pre><code># hpa.yaml\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: harborai-hpa\n  namespace: harborai\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: harborai-deployment\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n</code></pre>"},{"location":"deployment/#8-kubernetes","title":"8. \u90e8\u7f72\u5230 Kubernetes","text":"<pre><code># \u5e94\u7528\u6240\u6709\u914d\u7f6e\nkubectl apply -f namespace.yaml\nkubectl apply -f configmap.yaml\nkubectl apply -f secret.yaml\nkubectl apply -f deployment.yaml\nkubectl apply -f service.yaml\nkubectl apply -f ingress.yaml\nkubectl apply -f hpa.yaml\n\n# \u67e5\u770b\u90e8\u7f72\u72b6\u6001\nkubectl get all -n harborai\n\n# \u67e5\u770b Pod \u65e5\u5fd7\nkubectl logs -f deployment/harborai-deployment -n harborai\n\n# \u67e5\u770b HPA \u72b6\u6001\nkubectl get hpa -n harborai\n\n# \u7aef\u53e3\u8f6c\u53d1\u6d4b\u8bd5\nkubectl port-forward service/harborai-service 8000:80 -n harborai\n</code></pre>"},{"location":"deployment/#_8","title":"\ud83d\udd04 \u6eda\u52a8\u66f4\u65b0","text":"<pre><code># \u66f4\u65b0\u955c\u50cf\nkubectl set image deployment/harborai-deployment \\\n  harborai=harborai:v2.0.0 -n harborai\n\n# \u67e5\u770b\u6eda\u52a8\u66f4\u65b0\u72b6\u6001\nkubectl rollout status deployment/harborai-deployment -n harborai\n\n# \u56de\u6eda\u5230\u4e0a\u4e00\u4e2a\u7248\u672c\nkubectl rollout undo deployment/harborai-deployment -n harborai\n\n# \u67e5\u770b\u5386\u53f2\u7248\u672c\nkubectl rollout history deployment/harborai-deployment -n harborai\n</code></pre>"},{"location":"deployment/#_9","title":"\u4e91\u5e73\u53f0\u90e8\u7f72","text":""},{"location":"deployment/#aws","title":"\u2601\ufe0f AWS \u90e8\u7f72","text":""},{"location":"deployment/#1-ecs","title":"1. ECS \u90e8\u7f72","text":"<pre><code>{\n  \"family\": \"harborai-task\",\n  \"networkMode\": \"awsvpc\",\n  \"requiresCompatibilities\": [\"FARGATE\"],\n  \"cpu\": \"512\",\n  \"memory\": \"1024\",\n  \"executionRoleArn\": \"arn:aws:iam::account:role/ecsTaskExecutionRole\",\n  \"taskRoleArn\": \"arn:aws:iam::account:role/ecsTaskRole\",\n  \"containerDefinitions\": [\n    {\n      \"name\": \"harborai\",\n      \"image\": \"your-account.dkr.ecr.region.amazonaws.com/harborai:latest\",\n      \"portMappings\": [\n        {\n          \"containerPort\": 8000,\n          \"protocol\": \"tcp\"\n        }\n      ],\n      \"environment\": [\n        {\n          \"name\": \"HARBORAI_PERFORMANCE_MODE\",\n          \"value\": \"balanced\"\n        }\n      ],\n      \"secrets\": [\n        {\n          \"name\": \"DEEPSEEK_API_KEY\",\n          \"valueFrom\": \"arn:aws:secretsmanager:region:account:secret:harborai/api-keys:DEEPSEEK_API_KEY::\"\n        }\n      ],\n      \"logConfiguration\": {\n        \"logDriver\": \"awslogs\",\n        \"options\": {\n          \"awslogs-group\": \"/ecs/harborai\",\n          \"awslogs-region\": \"us-west-2\",\n          \"awslogs-stream-prefix\": \"ecs\"\n        }\n      },\n      \"healthCheck\": {\n        \"command\": [\n          \"CMD-SHELL\",\n          \"curl -f http://localhost:8000/health || exit 1\"\n        ],\n        \"interval\": 30,\n        \"timeout\": 5,\n        \"retries\": 3\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"deployment/#2-lambda","title":"2. Lambda \u90e8\u7f72","text":"<pre><code># lambda_handler.py\nimport json\nimport asyncio\nfrom harborai.api.fast_client import FastHarborAI\n\n# \u5168\u5c40\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff08Lambda \u5bb9\u5668\u590d\u7528\uff09\nharbor_client = None\n\ndef lambda_handler(event, context):\n    \"\"\"Lambda \u5904\u7406\u51fd\u6570\"\"\"\n    global harbor_client\n\n    # \u521d\u59cb\u5316\u5ba2\u6237\u7aef\uff08\u4ec5\u7b2c\u4e00\u6b21\uff09\n    if harbor_client is None:\n        harbor_client = FastHarborAI(\n            api_key=os.environ['DEEPSEEK_API_KEY'],\n            performance_mode='fast'\n        )\n\n    try:\n        # \u89e3\u6790\u8bf7\u6c42\n        body = json.loads(event['body'])\n\n        # \u5f02\u6b65\u8c03\u7528\n        loop = asyncio.new_event_loop()\n        asyncio.set_event_loop(loop)\n\n        response = loop.run_until_complete(\n            harbor_client.chat.completions.create(\n                model=body.get('model', 'deepseek-chat'),\n                messages=body['messages']\n            )\n        )\n\n        return {\n            'statusCode': 200,\n            'headers': {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': '*'\n            },\n            'body': json.dumps({\n                'content': response.choices[0].message.content,\n                'usage': response.usage.__dict__\n            })\n        }\n\n    except Exception as e:\n        return {\n            'statusCode': 500,\n            'body': json.dumps({'error': str(e)})\n        }\n</code></pre>"},{"location":"deployment/#azure","title":"\ud83c\udf10 Azure \u90e8\u7f72","text":""},{"location":"deployment/#1-container-instances","title":"1. Container Instances","text":"<pre><code># azure-container-instance.yaml\napiVersion: 2019-12-01\nlocation: eastus\nname: harborai-container-group\nproperties:\n  containers:\n  - name: harborai\n    properties:\n      image: harborai:latest\n      ports:\n      - port: 8000\n        protocol: TCP\n      environmentVariables:\n      - name: HARBORAI_PERFORMANCE_MODE\n        value: balanced\n      - name: DEEPSEEK_API_KEY\n        secureValue: your_api_key\n      resources:\n        requests:\n          cpu: 1\n          memoryInGB: 2\n  osType: Linux\n  ipAddress:\n    type: Public\n    ports:\n    - protocol: TCP\n      port: 8000\n  restartPolicy: Always\ntags:\n  environment: production\n  service: harborai\ntype: Microsoft.ContainerInstance/containerGroups\n</code></pre>"},{"location":"deployment/#2-app-service","title":"2. App Service","text":"<pre><code># azure-app-service.yaml\napiVersion: 2021-02-01\nkind: WebApp\nmetadata:\n  name: harborai-app\nspec:\n  location: East US\n  properties:\n    serverFarmId: /subscriptions/{subscription-id}/resourceGroups/{resource-group}/providers/Microsoft.Web/serverfarms/{app-service-plan}\n    siteConfig:\n      linuxFxVersion: DOCKER|harborai:latest\n      appSettings:\n      - name: HARBORAI_PERFORMANCE_MODE\n        value: balanced\n      - name: DEEPSEEK_API_KEY\n        value: \"@Microsoft.KeyVault(SecretUri=https://vault.vault.azure.net/secrets/deepseek-key/)\"\n      - name: WEBSITES_PORT\n        value: \"8000\"\n</code></pre>"},{"location":"deployment/#google-cloud","title":"\ud83d\udd25 Google Cloud \u90e8\u7f72","text":""},{"location":"deployment/#1-cloud-run","title":"1. Cloud Run","text":"<pre><code># cloudrun.yaml\napiVersion: serving.knative.dev/v1\nkind: Service\nmetadata:\n  name: harborai-service\n  annotations:\n    run.googleapis.com/ingress: all\nspec:\n  template:\n    metadata:\n      annotations:\n        autoscaling.knative.dev/maxScale: \"10\"\n        autoscaling.knative.dev/minScale: \"1\"\n        run.googleapis.com/cpu-throttling: \"false\"\n    spec:\n      containerConcurrency: 100\n      timeoutSeconds: 300\n      containers:\n      - image: gcr.io/project-id/harborai:latest\n        ports:\n        - containerPort: 8000\n        env:\n        - name: HARBORAI_PERFORMANCE_MODE\n          value: balanced\n        - name: DEEPSEEK_API_KEY\n          valueFrom:\n            secretKeyRef:\n              name: api-keys\n              key: deepseek-key\n        resources:\n          limits:\n            cpu: 1000m\n            memory: 2Gi\n          requests:\n            cpu: 500m\n            memory: 1Gi\n</code></pre>"},{"location":"deployment/#2-gke","title":"2. GKE \u90e8\u7f72","text":"<pre><code># \u521b\u5efa GKE \u96c6\u7fa4\ngcloud container clusters create harborai-cluster \\\n    --zone=us-central1-a \\\n    --num-nodes=3 \\\n    --enable-autoscaling \\\n    --min-nodes=1 \\\n    --max-nodes=10 \\\n    --machine-type=e2-standard-2\n\n# \u83b7\u53d6\u51ed\u636e\ngcloud container clusters get-credentials harborai-cluster \\\n    --zone=us-central1-a\n\n# \u90e8\u7f72\u5e94\u7528\nkubectl apply -f k8s/\n</code></pre>"},{"location":"deployment/#_10","title":"\u76d1\u63a7\u4e0e\u65e5\u5fd7","text":""},{"location":"deployment/#prometheus","title":"\ud83d\udcca Prometheus \u76d1\u63a7","text":""},{"location":"deployment/#1_2","title":"1. \u5e94\u7528\u6307\u6807\u66b4\u9732","text":"<pre><code>\"\"\"\nPrometheus \u6307\u6807\u66b4\u9732\n\"\"\"\nfrom prometheus_client import Counter, Histogram, Gauge, start_http_server\nimport time\n\n# \u5b9a\u4e49\u6307\u6807\nREQUEST_COUNT = Counter(\n    'harborai_requests_total',\n    'Total number of requests',\n    ['method', 'endpoint', 'status']\n)\n\nREQUEST_DURATION = Histogram(\n    'harborai_request_duration_seconds',\n    'Request duration in seconds',\n    ['method', 'endpoint']\n)\n\nACTIVE_CONNECTIONS = Gauge(\n    'harborai_active_connections',\n    'Number of active connections'\n)\n\nCACHE_HIT_RATE = Gauge(\n    'harborai_cache_hit_rate',\n    'Cache hit rate'\n)\n\nclass MetricsMiddleware:\n    \"\"\"\u6307\u6807\u4e2d\u95f4\u4ef6\"\"\"\n\n    def __init__(self, app):\n        self.app = app\n\n    async def __call__(self, scope, receive, send):\n        if scope[\"type\"] != \"http\":\n            await self.app(scope, receive, send)\n            return\n\n        method = scope[\"method\"]\n        path = scope[\"path\"]\n\n        start_time = time.time()\n\n        # \u589e\u52a0\u6d3b\u8dc3\u8fde\u63a5\u6570\n        ACTIVE_CONNECTIONS.inc()\n\n        try:\n            await self.app(scope, receive, send)\n            status = \"success\"\n        except Exception as e:\n            status = \"error\"\n            raise\n        finally:\n            # \u8bb0\u5f55\u6307\u6807\n            duration = time.time() - start_time\n            REQUEST_COUNT.labels(method=method, endpoint=path, status=status).inc()\n            REQUEST_DURATION.labels(method=method, endpoint=path).observe(duration)\n            ACTIVE_CONNECTIONS.dec()\n\n# \u542f\u52a8\u6307\u6807\u670d\u52a1\u5668\nstart_http_server(9090)\n</code></pre>"},{"location":"deployment/#2-prometheus","title":"2. Prometheus \u914d\u7f6e","text":"<pre><code># prometheus.yml\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nrule_files:\n  - \"harborai_rules.yml\"\n\nscrape_configs:\n  - job_name: 'harborai'\n    static_configs:\n      - targets: ['harborai:9090']\n    scrape_interval: 5s\n    metrics_path: /metrics\n\n  - job_name: 'redis'\n    static_configs:\n      - targets: ['redis:6379']\n\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets:\n          - alertmanager:9093\n</code></pre>"},{"location":"deployment/#3_4","title":"3. \u544a\u8b66\u89c4\u5219","text":"<pre><code># harborai_rules.yml\ngroups:\n- name: harborai_alerts\n  rules:\n  - alert: HighErrorRate\n    expr: rate(harborai_requests_total{status=\"error\"}[5m]) &gt; 0.1\n    for: 2m\n    labels:\n      severity: warning\n    annotations:\n      summary: \"HarborAI error rate is high\"\n      description: \"Error rate is {{ $value }} errors per second\"\n\n  - alert: HighLatency\n    expr: histogram_quantile(0.95, rate(harborai_request_duration_seconds_bucket[5m])) &gt; 1\n    for: 5m\n    labels:\n      severity: warning\n    annotations:\n      summary: \"HarborAI latency is high\"\n      description: \"95th percentile latency is {{ $value }}s\"\n\n  - alert: LowCacheHitRate\n    expr: harborai_cache_hit_rate &lt; 0.8\n    for: 10m\n    labels:\n      severity: warning\n    annotations:\n      summary: \"HarborAI cache hit rate is low\"\n      description: \"Cache hit rate is {{ $value }}\"\n</code></pre>"},{"location":"deployment/#grafana","title":"\ud83d\udcc8 Grafana \u4eea\u8868\u677f","text":"<pre><code>{\n  \"dashboard\": {\n    \"title\": \"HarborAI \u76d1\u63a7\u4eea\u8868\u677f\",\n    \"panels\": [\n      {\n        \"title\": \"\u8bf7\u6c42\u901f\u7387\",\n        \"type\": \"graph\",\n        \"targets\": [\n          {\n            \"expr\": \"rate(harborai_requests_total[5m])\",\n            \"legendFormat\": \"{{method}} {{endpoint}}\"\n          }\n        ]\n      },\n      {\n        \"title\": \"\u54cd\u5e94\u65f6\u95f4\",\n        \"type\": \"graph\",\n        \"targets\": [\n          {\n            \"expr\": \"histogram_quantile(0.95, rate(harborai_request_duration_seconds_bucket[5m]))\",\n            \"legendFormat\": \"95th percentile\"\n          },\n          {\n            \"expr\": \"histogram_quantile(0.50, rate(harborai_request_duration_seconds_bucket[5m]))\",\n            \"legendFormat\": \"50th percentile\"\n          }\n        ]\n      },\n      {\n        \"title\": \"\u9519\u8bef\u7387\",\n        \"type\": \"singlestat\",\n        \"targets\": [\n          {\n            \"expr\": \"rate(harborai_requests_total{status=\\\"error\\\"}[5m]) / rate(harborai_requests_total[5m])\",\n            \"legendFormat\": \"Error Rate\"\n          }\n        ]\n      },\n      {\n        \"title\": \"\u7f13\u5b58\u547d\u4e2d\u7387\",\n        \"type\": \"singlestat\",\n        \"targets\": [\n          {\n            \"expr\": \"harborai_cache_hit_rate\",\n            \"legendFormat\": \"Cache Hit Rate\"\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"deployment/#_11","title":"\ud83d\udcdd \u65e5\u5fd7\u7ba1\u7406","text":""},{"location":"deployment/#1_3","title":"1. \u7ed3\u6784\u5316\u65e5\u5fd7","text":"<pre><code>\"\"\"\n\u7ed3\u6784\u5316\u65e5\u5fd7\u914d\u7f6e\n\"\"\"\nimport logging\nimport json\nfrom datetime import datetime\n\nclass JSONFormatter(logging.Formatter):\n    \"\"\"JSON \u683c\u5f0f\u5316\u5668\"\"\"\n\n    def format(self, record):\n        log_entry = {\n            'timestamp': datetime.utcnow().isoformat(),\n            'level': record.levelname,\n            'logger': record.name,\n            'message': record.getMessage(),\n            'module': record.module,\n            'function': record.funcName,\n            'line': record.lineno\n        }\n\n        # \u6dfb\u52a0\u989d\u5916\u5b57\u6bb5\n        if hasattr(record, 'request_id'):\n            log_entry['request_id'] = record.request_id\n\n        if hasattr(record, 'user_id'):\n            log_entry['user_id'] = record.user_id\n\n        if record.exc_info:\n            log_entry['exception'] = self.formatException(record.exc_info)\n\n        return json.dumps(log_entry)\n\n# \u914d\u7f6e\u65e5\u5fd7\ndef setup_structured_logging():\n    \"\"\"\u8bbe\u7f6e\u7ed3\u6784\u5316\u65e5\u5fd7\"\"\"\n    logger = logging.getLogger()\n    logger.setLevel(logging.INFO)\n\n    # \u63a7\u5236\u53f0\u5904\u7406\u5668\n    console_handler = logging.StreamHandler()\n    console_handler.setFormatter(JSONFormatter())\n    logger.addHandler(console_handler)\n\n    # \u6587\u4ef6\u5904\u7406\u5668\n    file_handler = logging.FileHandler('logs/harborai.json')\n    file_handler.setFormatter(JSONFormatter())\n    logger.addHandler(file_handler)\n</code></pre>"},{"location":"deployment/#2-elk-stack","title":"2. ELK Stack \u914d\u7f6e","text":"<pre><code># logstash.conf\ninput {\n  file {\n    path =&gt; \"/app/logs/*.json\"\n    start_position =&gt; \"beginning\"\n    codec =&gt; \"json\"\n  }\n}\n\nfilter {\n  if [level] == \"ERROR\" {\n    mutate {\n      add_tag =&gt; [\"error\"]\n    }\n  }\n\n  if [response_time] {\n    mutate {\n      convert =&gt; { \"response_time\" =&gt; \"float\" }\n    }\n  }\n}\n\noutput {\n  elasticsearch {\n    hosts =&gt; [\"elasticsearch:9200\"]\n    index =&gt; \"harborai-logs-%{+YYYY.MM.dd}\"\n  }\n}\n</code></pre>"},{"location":"deployment/#_12","title":"\u5b89\u5168\u914d\u7f6e","text":""},{"location":"deployment/#_13","title":"\ud83d\udd12 \u5b89\u5168\u6700\u4f73\u5b9e\u8df5","text":""},{"location":"deployment/#1-api","title":"1. API \u5bc6\u94a5\u7ba1\u7406","text":"<pre><code>\"\"\"\n\u5b89\u5168\u7684 API \u5bc6\u94a5\u7ba1\u7406\n\"\"\"\nimport os\nimport boto3\nfrom azure.keyvault.secrets import SecretClient\nfrom azure.identity import DefaultAzureCredential\n\nclass SecretManager:\n    \"\"\"\u5bc6\u94a5\u7ba1\u7406\u5668\"\"\"\n\n    def __init__(self, provider: str = \"env\"):\n        self.provider = provider\n        self._clients = {}\n\n    def get_secret(self, key: str) -&gt; str:\n        \"\"\"\u83b7\u53d6\u5bc6\u94a5\"\"\"\n        if self.provider == \"env\":\n            return os.getenv(key)\n        elif self.provider == \"aws\":\n            return self._get_aws_secret(key)\n        elif self.provider == \"azure\":\n            return self._get_azure_secret(key)\n        else:\n            raise ValueError(f\"\u4e0d\u652f\u6301\u7684\u5bc6\u94a5\u63d0\u4f9b\u5546: {self.provider}\")\n\n    def _get_aws_secret(self, key: str) -&gt; str:\n        \"\"\"\u4ece AWS Secrets Manager \u83b7\u53d6\u5bc6\u94a5\"\"\"\n        if \"aws\" not in self._clients:\n            self._clients[\"aws\"] = boto3.client('secretsmanager')\n\n        response = self._clients[\"aws\"].get_secret_value(SecretId=key)\n        return response['SecretString']\n\n    def _get_azure_secret(self, key: str) -&gt; str:\n        \"\"\"\u4ece Azure Key Vault \u83b7\u53d6\u5bc6\u94a5\"\"\"\n        if \"azure\" not in self._clients:\n            vault_url = os.getenv(\"AZURE_KEY_VAULT_URL\")\n            credential = DefaultAzureCredential()\n            self._clients[\"azure\"] = SecretClient(\n                vault_url=vault_url, \n                credential=credential\n            )\n\n        secret = self._clients[\"azure\"].get_secret(key)\n        return secret.value\n\n# \u4f7f\u7528\u793a\u4f8b\nsecret_manager = SecretManager(provider=\"aws\")\napi_key = secret_manager.get_secret(\"harborai/deepseek-api-key\")\n</code></pre>"},{"location":"deployment/#2_1","title":"2. \u7f51\u7edc\u5b89\u5168","text":"<pre><code># network-policy.yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: harborai-network-policy\n  namespace: harborai\nspec:\n  podSelector:\n    matchLabels:\n      app: harborai\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: ingress-nginx\n    ports:\n    - protocol: TCP\n      port: 8000\n  egress:\n  - to: []\n    ports:\n    - protocol: TCP\n      port: 443  # HTTPS\n    - protocol: TCP\n      port: 6379  # Redis\n</code></pre>"},{"location":"deployment/#3-rbac","title":"3. RBAC \u914d\u7f6e","text":"<pre><code># rbac.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: harborai-service-account\n  namespace: harborai\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: harborai-role\n  namespace: harborai\nrules:\n- apiGroups: [\"\"]\n  resources: [\"configmaps\", \"secrets\"]\n  verbs: [\"get\", \"list\"]\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: harborai-role-binding\n  namespace: harborai\nsubjects:\n- kind: ServiceAccount\n  name: harborai-service-account\n  namespace: harborai\nroleRef:\n  kind: Role\n  name: harborai-role\n  apiGroup: rbac.authorization.k8s.io\n</code></pre>"},{"location":"deployment/#_14","title":"\u6027\u80fd\u8c03\u4f18","text":""},{"location":"deployment/#_15","title":"\u26a1 \u6027\u80fd\u4f18\u5316\u914d\u7f6e","text":""},{"location":"deployment/#1_4","title":"1. \u5e94\u7528\u5c42\u4f18\u5316","text":"<pre><code>\"\"\"\n\u5e94\u7528\u5c42\u6027\u80fd\u4f18\u5316\n\"\"\"\nimport asyncio\nimport uvloop\nfrom fastapi import FastAPI\nfrom fastapi.middleware.gzip import GZipMiddleware\nfrom fastapi.middleware.trustedhost import TrustedHostMiddleware\n\n# \u4f7f\u7528 uvloop \u63d0\u5347\u6027\u80fd\nasyncio.set_event_loop_policy(uvloop.EventLoopPolicy())\n\napp = FastAPI()\n\n# \u6dfb\u52a0\u538b\u7f29\u4e2d\u95f4\u4ef6\napp.add_middleware(GZipMiddleware, minimum_size=1000)\n\n# \u6dfb\u52a0\u4fe1\u4efb\u4e3b\u673a\u4e2d\u95f4\u4ef6\napp.add_middleware(\n    TrustedHostMiddleware, \n    allowed_hosts=[\"*.yourdomain.com\", \"localhost\"]\n)\n\n# \u8fde\u63a5\u6c60\u914d\u7f6e\nHTTPX_CONFIG = {\n    \"limits\": {\n        \"max_connections\": 100,\n        \"max_keepalive_connections\": 20\n    },\n    \"timeout\": {\n        \"connect\": 5.0,\n        \"read\": 30.0,\n        \"write\": 10.0,\n        \"pool\": 5.0\n    }\n}\n</code></pre>"},{"location":"deployment/#2_2","title":"2. \u6570\u636e\u5e93\u4f18\u5316","text":"<pre><code>\"\"\"\nRedis \u8fde\u63a5\u6c60\u4f18\u5316\n\"\"\"\nimport redis.asyncio as redis\n\n# Redis \u8fde\u63a5\u6c60\u914d\u7f6e\nredis_pool = redis.ConnectionPool(\n    host='redis',\n    port=6379,\n    db=0,\n    max_connections=50,\n    retry_on_timeout=True,\n    socket_keepalive=True,\n    socket_keepalive_options={\n        1: 1,  # TCP_KEEPIDLE\n        2: 3,  # TCP_KEEPINTVL\n        3: 5,  # TCP_KEEPCNT\n    }\n)\n\nredis_client = redis.Redis(connection_pool=redis_pool)\n</code></pre>"},{"location":"deployment/#3_5","title":"3. \u7cfb\u7edf\u7ea7\u4f18\u5316","text":"<pre><code># \u7cfb\u7edf\u53c2\u6570\u4f18\u5316\n# /etc/sysctl.conf\n\n# \u7f51\u7edc\u4f18\u5316\nnet.core.somaxconn = 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.tcp_fin_timeout = 30\nnet.ipv4.tcp_keepalive_time = 1200\nnet.ipv4.tcp_max_tw_buckets = 5000\n\n# \u6587\u4ef6\u63cf\u8ff0\u7b26\u9650\u5236\nfs.file-max = 2097152\n\n# \u5e94\u7528\u9650\u5236\necho \"* soft nofile 65535\" &gt;&gt; /etc/security/limits.conf\necho \"* hard nofile 65535\" &gt;&gt; /etc/security/limits.conf\n</code></pre>"},{"location":"deployment/#_16","title":"\u6545\u969c\u6392\u67e5","text":""},{"location":"deployment/#_17","title":"\ud83d\udd0d \u5e38\u89c1\u95ee\u9898\u8bca\u65ad","text":""},{"location":"deployment/#1_5","title":"1. \u6027\u80fd\u95ee\u9898","text":"<pre><code># \u68c0\u67e5\u8d44\u6e90\u4f7f\u7528\nkubectl top pods -n harborai\nkubectl top nodes\n\n# \u68c0\u67e5 HPA \u72b6\u6001\nkubectl get hpa -n harborai\n\n# \u67e5\u770b\u8be6\u7ec6\u6307\u6807\nkubectl describe hpa harborai-hpa -n harborai\n</code></pre>"},{"location":"deployment/#2_3","title":"2. \u8fde\u63a5\u95ee\u9898","text":"<pre><code># \u68c0\u67e5\u7f51\u7edc\u8fde\u63a5\nkubectl exec -it deployment/harborai-deployment -n harborai -- \\\n  curl -v http://redis-service:6379\n\n# \u68c0\u67e5 DNS \u89e3\u6790\nkubectl exec -it deployment/harborai-deployment -n harborai -- \\\n  nslookup redis-service\n\n# \u68c0\u67e5\u7aef\u53e3\u76d1\u542c\nkubectl exec -it deployment/harborai-deployment -n harborai -- \\\n  netstat -tlnp\n</code></pre>"},{"location":"deployment/#3_6","title":"3. \u65e5\u5fd7\u5206\u6790","text":"<pre><code># \u67e5\u770b\u5e94\u7528\u65e5\u5fd7\nkubectl logs -f deployment/harborai-deployment -n harborai\n\n# \u67e5\u770b\u4e8b\u4ef6\nkubectl get events -n harborai --sort-by='.lastTimestamp'\n\n# \u67e5\u770b Pod \u72b6\u6001\nkubectl describe pod &lt;pod-name&gt; -n harborai\n</code></pre>"},{"location":"deployment/#4_2","title":"4. \u6545\u969c\u6062\u590d\u811a\u672c","text":"<pre><code>#!/bin/bash\n# recovery.sh - \u6545\u969c\u6062\u590d\u811a\u672c\n\nset -e\n\nNAMESPACE=\"harborai\"\nDEPLOYMENT=\"harborai-deployment\"\n\necho \"\ud83d\udd0d \u5f00\u59cb\u6545\u969c\u8bca\u65ad...\"\n\n# \u68c0\u67e5 Pod \u72b6\u6001\necho \"\u68c0\u67e5 Pod \u72b6\u6001...\"\nkubectl get pods -n $NAMESPACE\n\n# \u68c0\u67e5\u670d\u52a1\u72b6\u6001\necho \"\u68c0\u67e5\u670d\u52a1\u72b6\u6001...\"\nkubectl get svc -n $NAMESPACE\n\n# \u91cd\u542f\u90e8\u7f72\necho \"\u91cd\u542f\u90e8\u7f72...\"\nkubectl rollout restart deployment/$DEPLOYMENT -n $NAMESPACE\n\n# \u7b49\u5f85\u90e8\u7f72\u5b8c\u6210\necho \"\u7b49\u5f85\u90e8\u7f72\u5b8c\u6210...\"\nkubectl rollout status deployment/$DEPLOYMENT -n $NAMESPACE\n\n# \u9a8c\u8bc1\u5065\u5eb7\u72b6\u6001\necho \"\u9a8c\u8bc1\u5065\u5eb7\u72b6\u6001...\"\nkubectl get pods -n $NAMESPACE\n\necho \"\u2705 \u6545\u969c\u6062\u590d\u5b8c\u6210\"\n</code></pre> <p>\u90e8\u7f72\u6307\u5357\u7248\u672c: v1.0.0 | \u66f4\u65b0\u65e5\u671f: 2025-01-25 | \u4e0b\u6b21\u66f4\u65b0: 2025-02-25</p>"},{"location":"development/","title":"HarborAI \u5f00\u53d1\u6307\u5357","text":"<p>\u672c\u6587\u6863\u4e3a HarborAI \u9879\u76ee\u7684\u5b8c\u6574\u5f00\u53d1\u6307\u5357\uff0c\u5305\u542b\u73af\u5883\u642d\u5efa\u3001\u5f00\u53d1\u6d41\u7a0b\u3001\u4ee3\u7801\u89c4\u8303\u548c\u6700\u4f73\u5b9e\u8df5\u3002</p>"},{"location":"development/#_1","title":"\ud83d\udccb \u76ee\u5f55","text":"<ul> <li>\u5f00\u53d1\u73af\u5883\u642d\u5efa</li> <li>\u9879\u76ee\u7ed3\u6784</li> <li>\u5f00\u53d1\u6d41\u7a0b</li> <li>\u4ee3\u7801\u89c4\u8303</li> <li>\u6d4b\u8bd5\u6307\u5357</li> <li>\u8c03\u8bd5\u6280\u5de7</li> <li>\u6027\u80fd\u4f18\u5316\u5f00\u53d1</li> <li>\u8d21\u732e\u6307\u5357</li> </ul>"},{"location":"development/#_2","title":"\u5f00\u53d1\u73af\u5883\u642d\u5efa","text":""},{"location":"development/#_3","title":"\ud83d\udee0\ufe0f \u7cfb\u7edf\u8981\u6c42","text":"<ul> <li>Python: 3.8+ (\u63a8\u8350 3.11+)</li> <li>\u64cd\u4f5c\u7cfb\u7edf: Windows 10+, macOS 10.15+, Ubuntu 18.04+</li> <li>\u5185\u5b58: \u6700\u4f4e 8GB\uff0c\u63a8\u8350 16GB+</li> <li>\u5b58\u50a8: \u81f3\u5c11 2GB \u53ef\u7528\u7a7a\u95f4</li> </ul>"},{"location":"development/#_4","title":"\ud83d\udce6 \u73af\u5883\u5b89\u88c5","text":""},{"location":"development/#1","title":"1. \u514b\u9686\u9879\u76ee","text":"<pre><code>git clone https://github.com/your-org/harborai.git\ncd harborai\n</code></pre>"},{"location":"development/#2","title":"2. \u521b\u5efa\u865a\u62df\u73af\u5883","text":"<pre><code># \u4f7f\u7528 venv\npython -m venv venv\n\n# Windows \u6fc0\u6d3b\nvenv\\Scripts\\activate\n\n# macOS/Linux \u6fc0\u6d3b\nsource venv/bin/activate\n</code></pre>"},{"location":"development/#3","title":"3. \u5b89\u88c5\u4f9d\u8d56","text":"<pre><code># \u5b89\u88c5\u5f00\u53d1\u4f9d\u8d56\npip install -e \".[dev]\"\n\n# \u6216\u8005\u4f7f\u7528 requirements\npip install -r requirements-dev.txt\n</code></pre>"},{"location":"development/#4","title":"4. \u914d\u7f6e\u5f00\u53d1\u5de5\u5177","text":"<pre><code># \u5b89\u88c5 pre-commit \u94a9\u5b50\npre-commit install\n\n# \u914d\u7f6e Git \u94a9\u5b50\ngit config core.hooksPath .githooks\n</code></pre>"},{"location":"development/#ide","title":"\ud83d\udd27 IDE \u914d\u7f6e","text":""},{"location":"development/#vs-code","title":"VS Code \u914d\u7f6e","text":"<p>\u521b\u5efa <code>.vscode/settings.json</code>:</p> <pre><code>{\n    \"python.defaultInterpreterPath\": \"./venv/bin/python\",\n    \"python.linting.enabled\": true,\n    \"python.linting.pylintEnabled\": false,\n    \"python.linting.flake8Enabled\": true,\n    \"python.linting.mypyEnabled\": true,\n    \"python.formatting.provider\": \"black\",\n    \"python.formatting.blackArgs\": [\"--line-length=88\"],\n    \"python.sortImports.args\": [\"--profile\", \"black\"],\n    \"editor.formatOnSave\": true,\n    \"editor.codeActionsOnSave\": {\n        \"source.organizeImports\": true\n    },\n    \"python.testing.pytestEnabled\": true,\n    \"python.testing.pytestArgs\": [\n        \"tests\"\n    ]\n}\n</code></pre>"},{"location":"development/#pycharm","title":"PyCharm \u914d\u7f6e","text":"<ol> <li>\u8bbe\u7f6e Python \u89e3\u91ca\u5668\u4e3a\u865a\u62df\u73af\u5883</li> <li>\u914d\u7f6e\u4ee3\u7801\u683c\u5f0f\u5316\u5de5\u5177\u4e3a Black</li> <li>\u542f\u7528 MyPy \u7c7b\u578b\u68c0\u67e5</li> <li>\u914d\u7f6e\u6d4b\u8bd5\u8fd0\u884c\u5668\u4e3a pytest</li> </ol>"},{"location":"development/#_5","title":"\u9879\u76ee\u7ed3\u6784","text":""},{"location":"development/#_6","title":"\ud83d\udcc1 \u76ee\u5f55\u7ed3\u6784","text":"<pre><code>harborai/\n\u251c\u2500\u2500 harborai/                 # \u4e3b\u8981\u6e90\u4ee3\u7801\n\u2502   \u251c\u2500\u2500 __init__.py          # \u5305\u521d\u59cb\u5316\n\u2502   \u251c\u2500\u2500 client.py            # \u4e3b\u5ba2\u6237\u7aef\n\u2502   \u251c\u2500\u2500 api/                 # API \u76f8\u5173\u6a21\u5757\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 base.py          # \u57fa\u7840 API \u7c7b\n\u2502   \u2502   \u251c\u2500\u2500 chat.py          # \u804a\u5929 API\n\u2502   \u2502   \u251c\u2500\u2500 fast_client.py   # \u5feb\u901f\u5ba2\u6237\u7aef\n\u2502   \u2502   \u2514\u2500\u2500 streaming.py     # \u6d41\u5f0f\u5904\u7406\n\u2502   \u251c\u2500\u2500 core/                # \u6838\u5fc3\u529f\u80fd\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 config.py        # \u914d\u7f6e\u7ba1\u7406\n\u2502   \u2502   \u251c\u2500\u2500 cache.py         # \u7f13\u5b58\u7cfb\u7edf\n\u2502   \u2502   \u251c\u2500\u2500 memory.py        # \u5185\u5b58\u7ba1\u7406\n\u2502   \u2502   \u2514\u2500\u2500 monitoring.py    # \u76d1\u63a7\u7cfb\u7edf\n\u2502   \u251c\u2500\u2500 utils/               # \u5de5\u5177\u51fd\u6570\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 helpers.py       # \u8f85\u52a9\u51fd\u6570\n\u2502   \u2502   \u251c\u2500\u2500 validators.py    # \u9a8c\u8bc1\u5668\n\u2502   \u2502   \u2514\u2500\u2500 exceptions.py    # \u5f02\u5e38\u5b9a\u4e49\n\u2502   \u2514\u2500\u2500 plugins/             # \u63d2\u4ef6\u7cfb\u7edf\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 base.py          # \u63d2\u4ef6\u57fa\u7c7b\n\u2502       \u2514\u2500\u2500 performance.py   # \u6027\u80fd\u63d2\u4ef6\n\u251c\u2500\u2500 tests/                   # \u6d4b\u8bd5\u4ee3\u7801\n\u2502   \u251c\u2500\u2500 unit/                # \u5355\u5143\u6d4b\u8bd5\n\u2502   \u251c\u2500\u2500 integration/         # \u96c6\u6210\u6d4b\u8bd5\n\u2502   \u251c\u2500\u2500 performance/         # \u6027\u80fd\u6d4b\u8bd5\n\u2502   \u2514\u2500\u2500 fixtures/            # \u6d4b\u8bd5\u6570\u636e\n\u251c\u2500\u2500 docs/                    # \u6587\u6863\n\u251c\u2500\u2500 examples/                # \u793a\u4f8b\u4ee3\u7801\n\u251c\u2500\u2500 scripts/                 # \u6784\u5efa\u811a\u672c\n\u251c\u2500\u2500 .github/                 # GitHub \u914d\u7f6e\n\u251c\u2500\u2500 requirements.txt         # \u751f\u4ea7\u4f9d\u8d56\n\u251c\u2500\u2500 requirements-dev.txt     # \u5f00\u53d1\u4f9d\u8d56\n\u251c\u2500\u2500 setup.py                 # \u5305\u914d\u7f6e\n\u251c\u2500\u2500 pyproject.toml          # \u9879\u76ee\u914d\u7f6e\n\u2514\u2500\u2500 README.md               # \u9879\u76ee\u8bf4\u660e\n</code></pre>"},{"location":"development/#_7","title":"\ud83c\udfd7\ufe0f \u67b6\u6784\u8bbe\u8ba1\u539f\u5219","text":""},{"location":"development/#1_1","title":"1. \u6a21\u5757\u5316\u8bbe\u8ba1","text":"<pre><code>\"\"\"\n\u6a21\u5757\u5316\u8bbe\u8ba1\u793a\u4f8b\n\u6bcf\u4e2a\u6a21\u5757\u90fd\u6709\u660e\u786e\u7684\u804c\u8d23\u548c\u63a5\u53e3\n\"\"\"\n\n# harborai/api/base.py\nfrom abc import ABC, abstractmethod\nfrom typing import Any, Dict, Optional\n\nclass BaseAPI(ABC):\n    \"\"\"API \u57fa\u7c7b\uff0c\u5b9a\u4e49\u901a\u7528\u63a5\u53e3\"\"\"\n\n    def __init__(self, config: Dict[str, Any]):\n        self.config = config\n        self.session = None\n\n    @abstractmethod\n    async def call(self, **kwargs) -&gt; Any:\n        \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1aAPI \u8c03\u7528\"\"\"\n        pass\n\n    @abstractmethod\n    def validate_params(self, params: Dict[str, Any]) -&gt; bool:\n        \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1a\u53c2\u6570\u9a8c\u8bc1\"\"\"\n        pass\n</code></pre>"},{"location":"development/#2_1","title":"2. \u4f9d\u8d56\u6ce8\u5165","text":"<pre><code>\"\"\"\n\u4f9d\u8d56\u6ce8\u5165\u5bb9\u5668\n\"\"\"\nfrom typing import Dict, Type, Any, Callable\n\nclass DIContainer:\n    \"\"\"\u7b80\u5355\u7684\u4f9d\u8d56\u6ce8\u5165\u5bb9\u5668\"\"\"\n\n    def __init__(self):\n        self._services: Dict[str, Any] = {}\n        self._factories: Dict[str, Callable] = {}\n\n    def register(self, name: str, service: Any):\n        \"\"\"\u6ce8\u518c\u670d\u52a1\u5b9e\u4f8b\"\"\"\n        self._services[name] = service\n\n    def register_factory(self, name: str, factory: Callable):\n        \"\"\"\u6ce8\u518c\u670d\u52a1\u5de5\u5382\"\"\"\n        self._factories[name] = factory\n\n    def get(self, name: str) -&gt; Any:\n        \"\"\"\u83b7\u53d6\u670d\u52a1\"\"\"\n        if name in self._services:\n            return self._services[name]\n\n        if name in self._factories:\n            service = self._factories[name]()\n            self._services[name] = service\n            return service\n\n        raise ValueError(f\"Service '{name}' not found\")\n\n# \u4f7f\u7528\u793a\u4f8b\ncontainer = DIContainer()\ncontainer.register_factory('cache', lambda: CacheManager())\ncontainer.register_factory('metrics', lambda: PerformanceMetrics())\n</code></pre>"},{"location":"development/#3_1","title":"3. \u63d2\u4ef6\u7cfb\u7edf","text":"<pre><code>\"\"\"\n\u63d2\u4ef6\u7cfb\u7edf\u8bbe\u8ba1\n\"\"\"\nfrom abc import ABC, abstractmethod\nfrom typing import List, Dict, Any\n\nclass Plugin(ABC):\n    \"\"\"\u63d2\u4ef6\u57fa\u7c7b\"\"\"\n\n    @property\n    @abstractmethod\n    def name(self) -&gt; str:\n        \"\"\"\u63d2\u4ef6\u540d\u79f0\"\"\"\n        pass\n\n    @abstractmethod\n    async def initialize(self, config: Dict[str, Any]):\n        \"\"\"\u521d\u59cb\u5316\u63d2\u4ef6\"\"\"\n        pass\n\n    @abstractmethod\n    async def process(self, data: Any) -&gt; Any:\n        \"\"\"\u5904\u7406\u6570\u636e\"\"\"\n        pass\n\nclass PluginManager:\n    \"\"\"\u63d2\u4ef6\u7ba1\u7406\u5668\"\"\"\n\n    def __init__(self):\n        self.plugins: List[Plugin] = []\n\n    def register(self, plugin: Plugin):\n        \"\"\"\u6ce8\u518c\u63d2\u4ef6\"\"\"\n        self.plugins.append(plugin)\n\n    async def process_all(self, data: Any) -&gt; Any:\n        \"\"\"\u901a\u8fc7\u6240\u6709\u63d2\u4ef6\u5904\u7406\u6570\u636e\"\"\"\n        result = data\n        for plugin in self.plugins:\n            result = await plugin.process(result)\n        return result\n</code></pre>"},{"location":"development/#_8","title":"\u5f00\u53d1\u6d41\u7a0b","text":""},{"location":"development/#git","title":"\ud83d\udd04 Git \u5de5\u4f5c\u6d41","text":""},{"location":"development/#1_2","title":"1. \u5206\u652f\u7b56\u7565","text":"<pre><code># \u4e3b\u5206\u652f\nmain          # \u751f\u4ea7\u73af\u5883\u4ee3\u7801\ndevelop       # \u5f00\u53d1\u73af\u5883\u4ee3\u7801\n\n# \u529f\u80fd\u5206\u652f\nfeature/xxx   # \u65b0\u529f\u80fd\u5f00\u53d1\nbugfix/xxx    # Bug \u4fee\u590d\nhotfix/xxx    # \u7d27\u6025\u4fee\u590d\nrelease/xxx   # \u53d1\u5e03\u51c6\u5907\n</code></pre>"},{"location":"development/#2_2","title":"2. \u63d0\u4ea4\u89c4\u8303","text":"<p>\u4f7f\u7528 Conventional Commits \u89c4\u8303\uff1a</p> <pre><code># \u683c\u5f0f\n&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;\n\n# \u793a\u4f8b\nfeat(api): \u6dfb\u52a0\u7ed3\u6784\u5316\u8f93\u51fa\u652f\u6301\nfix(cache): \u4fee\u590d\u7f13\u5b58\u952e\u51b2\u7a81\u95ee\u9898\ndocs(readme): \u66f4\u65b0\u5b89\u88c5\u8bf4\u660e\nperf(client): \u4f18\u5316\u521d\u59cb\u5316\u6027\u80fd\ntest(unit): \u6dfb\u52a0\u7f13\u5b58\u7ba1\u7406\u5668\u6d4b\u8bd5\nrefactor(core): \u91cd\u6784\u914d\u7f6e\u7ba1\u7406\u6a21\u5757\n</code></pre>"},{"location":"development/#3_2","title":"3. \u5f00\u53d1\u6d41\u7a0b","text":"<pre><code># 1. \u521b\u5efa\u529f\u80fd\u5206\u652f\ngit checkout -b feature/new-feature\n\n# 2. \u5f00\u53d1\u548c\u63d0\u4ea4\ngit add .\ngit commit -m \"feat(api): \u6dfb\u52a0\u65b0\u529f\u80fd\"\n\n# 3. \u63a8\u9001\u5206\u652f\ngit push origin feature/new-feature\n\n# 4. \u521b\u5efa Pull Request\n# \u5728 GitHub/GitLab \u4e0a\u521b\u5efa PR\n\n# 5. \u4ee3\u7801\u5ba1\u67e5\u548c\u5408\u5e76\n# \u901a\u8fc7\u5ba1\u67e5\u540e\u5408\u5e76\u5230 develop \u5206\u652f\n</code></pre>"},{"location":"development/#tdd","title":"\ud83e\uddea \u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1 (TDD)","text":""},{"location":"development/#1-tdd","title":"1. TDD \u6d41\u7a0b","text":"<pre><code>\"\"\"\nTDD \u5f00\u53d1\u793a\u4f8b\uff1a\u5b9e\u73b0\u7f13\u5b58\u529f\u80fd\n\"\"\"\n\n# \u7b2c\u4e00\u6b65\uff1a\u7f16\u5199\u5931\u8d25\u7684\u6d4b\u8bd5\ndef test_cache_set_and_get():\n    \"\"\"\u6d4b\u8bd5\u7f13\u5b58\u8bbe\u7f6e\u548c\u83b7\u53d6\"\"\"\n    cache = CacheManager()\n\n    # \u8bbe\u7f6e\u7f13\u5b58\n    cache.set(\"key1\", \"value1\")\n\n    # \u83b7\u53d6\u7f13\u5b58\n    result = cache.get(\"key1\")\n\n    # \u65ad\u8a00\n    assert result == \"value1\"\n\n# \u7b2c\u4e8c\u6b65\uff1a\u7f16\u5199\u6700\u5c0f\u5b9e\u73b0\nclass CacheManager:\n    def __init__(self):\n        self._cache = {}\n\n    def set(self, key: str, value: Any):\n        self._cache[key] = value\n\n    def get(self, key: str) -&gt; Any:\n        return self._cache.get(key)\n\n# \u7b2c\u4e09\u6b65\uff1a\u91cd\u6784\u4f18\u5316\nclass CacheManager:\n    def __init__(self, max_size: int = 1000):\n        self.max_size = max_size\n        self._cache = OrderedDict()\n\n    def set(self, key: str, value: Any):\n        if key in self._cache:\n            self._cache.move_to_end(key)\n        else:\n            if len(self._cache) &gt;= self.max_size:\n                self._cache.popitem(last=False)\n\n        self._cache[key] = value\n\n    def get(self, key: str) -&gt; Any:\n        if key in self._cache:\n            self._cache.move_to_end(key)\n            return self._cache[key]\n        return None\n</code></pre>"},{"location":"development/#2_3","title":"2. \u6d4b\u8bd5\u5206\u5c42","text":"<pre><code>\"\"\"\n\u6d4b\u8bd5\u5206\u5c42\u793a\u4f8b\n\"\"\"\n\n# \u5355\u5143\u6d4b\u8bd5\uff1a\u6d4b\u8bd5\u5355\u4e2a\u51fd\u6570/\u7c7b\nclass TestCacheManager:\n    def test_set_get(self):\n        cache = CacheManager()\n        cache.set(\"key\", \"value\")\n        assert cache.get(\"key\") == \"value\"\n\n    def test_lru_eviction(self):\n        cache = CacheManager(max_size=2)\n        cache.set(\"key1\", \"value1\")\n        cache.set(\"key2\", \"value2\")\n        cache.set(\"key3\", \"value3\")  # \u5e94\u8be5\u6dd8\u6c70 key1\n\n        assert cache.get(\"key1\") is None\n        assert cache.get(\"key2\") == \"value2\"\n        assert cache.get(\"key3\") == \"value3\"\n\n# \u96c6\u6210\u6d4b\u8bd5\uff1a\u6d4b\u8bd5\u6a21\u5757\u95f4\u4ea4\u4e92\nclass TestAPIIntegration:\n    async def test_api_with_cache(self):\n        cache = CacheManager()\n        api = ChatAPI(cache=cache)\n\n        # \u7b2c\u4e00\u6b21\u8c03\u7528\n        result1 = await api.chat_completion(\n            model=\"deepseek-chat\",\n            messages=[{\"role\": \"user\", \"content\": \"Hello\"}]\n        )\n\n        # \u7b2c\u4e8c\u6b21\u8c03\u7528\uff08\u5e94\u8be5\u547d\u4e2d\u7f13\u5b58\uff09\n        result2 = await api.chat_completion(\n            model=\"deepseek-chat\",\n            messages=[{\"role\": \"user\", \"content\": \"Hello\"}]\n        )\n\n        assert result1 == result2\n        assert api.cache_hit_count == 1\n\n# \u7aef\u5230\u7aef\u6d4b\u8bd5\uff1a\u6d4b\u8bd5\u5b8c\u6574\u6d41\u7a0b\nclass TestE2E:\n    async def test_complete_workflow(self):\n        client = HarborAI(api_key=\"test-key\")\n\n        # \u6d4b\u8bd5\u5b8c\u6574\u7684\u804a\u5929\u6d41\u7a0b\n        response = await client.chat.completions.create(\n            model=\"deepseek-chat\",\n            messages=[\n                {\"role\": \"user\", \"content\": \"\u4f60\u597d\"}\n            ]\n        )\n\n        assert response.choices[0].message.content\n        assert response.usage.total_tokens &gt; 0\n</code></pre>"},{"location":"development/#_9","title":"\u4ee3\u7801\u89c4\u8303","text":""},{"location":"development/#_10","title":"\ud83d\udcdd \u7f16\u7801\u6807\u51c6","text":""},{"location":"development/#1-python","title":"1. Python \u4ee3\u7801\u98ce\u683c","text":"<pre><code>\"\"\"\nPython \u4ee3\u7801\u98ce\u683c\u793a\u4f8b\n\u9075\u5faa PEP 8 \u548c\u9879\u76ee\u7279\u5b9a\u89c4\u8303\n\"\"\"\n\nfrom typing import Dict, List, Optional, Union, Any\nimport asyncio\nimport logging\n\n# \u7c7b\u578b\u6ce8\u89e3\ndef process_messages(\n    messages: List[Dict[str, str]], \n    model: str = \"deepseek-chat\",\n    temperature: float = 0.7,\n    max_tokens: Optional[int] = None\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    \u5904\u7406\u6d88\u606f\u5217\u8868\n\n    Args:\n        messages: \u6d88\u606f\u5217\u8868\uff0c\u6bcf\u4e2a\u6d88\u606f\u5305\u542b role \u548c content\n        model: \u4f7f\u7528\u7684\u6a21\u578b\u540d\u79f0\n        temperature: \u6e29\u5ea6\u53c2\u6570\uff0c\u63a7\u5236\u968f\u673a\u6027\n        max_tokens: \u6700\u5927\u4ee4\u724c\u6570\uff0cNone \u8868\u793a\u4e0d\u9650\u5236\n\n    Returns:\n        \u5904\u7406\u7ed3\u679c\u5b57\u5178\uff0c\u5305\u542b\u54cd\u5e94\u548c\u5143\u6570\u636e\n\n    Raises:\n        ValueError: \u5f53\u6d88\u606f\u683c\u5f0f\u4e0d\u6b63\u786e\u65f6\n        APIError: \u5f53 API \u8c03\u7528\u5931\u8d25\u65f6\n    \"\"\"\n    # \u53c2\u6570\u9a8c\u8bc1\n    if not messages:\n        raise ValueError(\"\u6d88\u606f\u5217\u8868\u4e0d\u80fd\u4e3a\u7a7a\")\n\n    # \u5904\u7406\u903b\u8f91\n    result = {\n        \"response\": \"\u5904\u7406\u7ed3\u679c\",\n        \"metadata\": {\n            \"model\": model,\n            \"temperature\": temperature,\n            \"token_count\": len(str(messages))\n        }\n    }\n\n    return result\n\n# \u7c7b\u5b9a\u4e49\nclass APIClient:\n    \"\"\"API \u5ba2\u6237\u7aef\u7c7b\"\"\"\n\n    def __init__(\n        self, \n        api_key: str, \n        base_url: str = \"https://api.deepseek.com\",\n        timeout: float = 30.0\n    ):\n        \"\"\"\n        \u521d\u59cb\u5316 API \u5ba2\u6237\u7aef\n\n        Args:\n            api_key: API \u5bc6\u94a5\n            base_url: API \u57fa\u7840 URL\n            timeout: \u8bf7\u6c42\u8d85\u65f6\u65f6\u95f4\uff08\u79d2\uff09\n        \"\"\"\n        self.api_key = api_key\n        self.base_url = base_url\n        self.timeout = timeout\n        self._session = None\n\n        # \u914d\u7f6e\u65e5\u5fd7\n        self.logger = logging.getLogger(__name__)\n\n    async def __aenter__(self):\n        \"\"\"\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5165\u53e3\"\"\"\n        await self._initialize_session()\n        return self\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        \"\"\"\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u51fa\u53e3\"\"\"\n        await self._cleanup_session()\n\n    async def _initialize_session(self):\n        \"\"\"\u521d\u59cb\u5316\u4f1a\u8bdd\"\"\"\n        import httpx\n\n        self._session = httpx.AsyncClient(\n            timeout=self.timeout,\n            headers={\"Authorization\": f\"Bearer {self.api_key}\"}\n        )\n\n    async def _cleanup_session(self):\n        \"\"\"\u6e05\u7406\u4f1a\u8bdd\"\"\"\n        if self._session:\n            await self._session.aclose()\n            self._session = None\n</code></pre>"},{"location":"development/#2_4","title":"2. \u6587\u6863\u5b57\u7b26\u4e32\u89c4\u8303","text":"<pre><code>\"\"\"\n\u6587\u6863\u5b57\u7b26\u4e32\u89c4\u8303\u793a\u4f8b\n\u4f7f\u7528 Google \u98ce\u683c\u7684 docstring\n\"\"\"\n\ndef calculate_performance_score(\n    latency: float,\n    throughput: float,\n    memory_usage: float,\n    weights: Optional[Dict[str, float]] = None\n) -&gt; float:\n    \"\"\"\n    \u8ba1\u7b97\u6027\u80fd\u8bc4\u5206\n\n    \u6839\u636e\u5ef6\u8fdf\u3001\u541e\u5410\u91cf\u548c\u5185\u5b58\u4f7f\u7528\u60c5\u51b5\u8ba1\u7b97\u7efc\u5408\u6027\u80fd\u8bc4\u5206\u3002\n    \u8bc4\u5206\u8303\u56f4\u4e3a 0-100\uff0c\u5206\u6570\u8d8a\u9ad8\u8868\u793a\u6027\u80fd\u8d8a\u597d\u3002\n\n    Args:\n        latency: \u5e73\u5747\u5ef6\u8fdf\u65f6\u95f4\uff08\u6beb\u79d2\uff09\n        throughput: \u541e\u5410\u91cf\uff08\u8bf7\u6c42/\u79d2\uff09\n        memory_usage: \u5185\u5b58\u4f7f\u7528\u91cf\uff08MB\uff09\n        weights: \u5404\u6307\u6807\u6743\u91cd\uff0c\u9ed8\u8ba4\u4e3a {\"latency\": 0.4, \"throughput\": 0.4, \"memory\": 0.2}\n\n    Returns:\n        \u6027\u80fd\u8bc4\u5206\uff080-100\uff09\n\n    Raises:\n        ValueError: \u5f53\u8f93\u5165\u53c2\u6570\u65e0\u6548\u65f6\n\n    Example:\n        &gt;&gt;&gt; score = calculate_performance_score(\n        ...     latency=100.0,\n        ...     throughput=50.0,\n        ...     memory_usage=200.0\n        ... )\n        &gt;&gt;&gt; print(f\"\u6027\u80fd\u8bc4\u5206: {score:.1f}\")\n        \u6027\u80fd\u8bc4\u5206: 75.2\n\n    Note:\n        - \u5ef6\u8fdf\u8d8a\u4f4e\u8bc4\u5206\u8d8a\u9ad8\n        - \u541e\u5410\u91cf\u8d8a\u9ad8\u8bc4\u5206\u8d8a\u9ad8\n        - \u5185\u5b58\u4f7f\u7528\u8d8a\u4f4e\u8bc4\u5206\u8d8a\u9ad8\n    \"\"\"\n    # \u9ed8\u8ba4\u6743\u91cd\n    if weights is None:\n        weights = {\"latency\": 0.4, \"throughput\": 0.4, \"memory\": 0.2}\n\n    # \u53c2\u6570\u9a8c\u8bc1\n    if latency &lt; 0 or throughput &lt; 0 or memory_usage &lt; 0:\n        raise ValueError(\"\u6240\u6709\u53c2\u6570\u5fc5\u987b\u4e3a\u975e\u8d1f\u6570\")\n\n    # \u8ba1\u7b97\u5404\u9879\u8bc4\u5206\uff080-100\uff09\n    latency_score = max(0, 100 - latency / 10)  # \u5ef6\u8fdf\u8d8a\u4f4e\u5206\u6570\u8d8a\u9ad8\n    throughput_score = min(100, throughput * 2)  # \u541e\u5410\u91cf\u8d8a\u9ad8\u5206\u6570\u8d8a\u9ad8\n    memory_score = max(0, 100 - memory_usage / 10)  # \u5185\u5b58\u8d8a\u4f4e\u5206\u6570\u8d8a\u9ad8\n\n    # \u52a0\u6743\u5e73\u5747\n    total_score = (\n        latency_score * weights[\"latency\"] +\n        throughput_score * weights[\"throughput\"] +\n        memory_score * weights[\"memory\"]\n    )\n\n    return round(total_score, 2)\n</code></pre>"},{"location":"development/#3_3","title":"3. \u9519\u8bef\u5904\u7406","text":"<pre><code>\"\"\"\n\u9519\u8bef\u5904\u7406\u6700\u4f73\u5b9e\u8df5\n\"\"\"\n\n# \u81ea\u5b9a\u4e49\u5f02\u5e38\nclass HarborAIError(Exception):\n    \"\"\"HarborAI \u57fa\u7840\u5f02\u5e38\u7c7b\"\"\"\n    pass\n\nclass APIError(HarborAIError):\n    \"\"\"API \u8c03\u7528\u5f02\u5e38\"\"\"\n\n    def __init__(self, message: str, status_code: int = None, response: str = None):\n        super().__init__(message)\n        self.status_code = status_code\n        self.response = response\n\nclass ConfigurationError(HarborAIError):\n    \"\"\"\u914d\u7f6e\u9519\u8bef\u5f02\u5e38\"\"\"\n    pass\n\nclass ValidationError(HarborAIError):\n    \"\"\"\u9a8c\u8bc1\u9519\u8bef\u5f02\u5e38\"\"\"\n    pass\n\n# \u9519\u8bef\u5904\u7406\u88c5\u9970\u5668\ndef handle_api_errors(func):\n    \"\"\"API \u9519\u8bef\u5904\u7406\u88c5\u9970\u5668\"\"\"\n    async def wrapper(*args, **kwargs):\n        try:\n            return await func(*args, **kwargs)\n        except httpx.HTTPStatusError as e:\n            raise APIError(\n                f\"API \u8bf7\u6c42\u5931\u8d25: {e.response.status_code}\",\n                status_code=e.response.status_code,\n                response=e.response.text\n            )\n        except httpx.TimeoutException:\n            raise APIError(\"API \u8bf7\u6c42\u8d85\u65f6\")\n        except Exception as e:\n            raise HarborAIError(f\"\u672a\u77e5\u9519\u8bef: {str(e)}\")\n\n    return wrapper\n\n# \u4f7f\u7528\u793a\u4f8b\n@handle_api_errors\nasync def make_api_request(url: str, data: dict) -&gt; dict:\n    \"\"\"\u53d1\u8d77 API \u8bf7\u6c42\"\"\"\n    async with httpx.AsyncClient() as client:\n        response = await client.post(url, json=data)\n        response.raise_for_status()\n        return response.json()\n</code></pre>"},{"location":"development/#_11","title":"\u6d4b\u8bd5\u6307\u5357","text":""},{"location":"development/#_12","title":"\ud83e\uddea \u6d4b\u8bd5\u6846\u67b6\u914d\u7f6e","text":""},{"location":"development/#1-pytest","title":"1. pytest \u914d\u7f6e","text":"<p>\u521b\u5efa <code>pytest.ini</code>:</p> <pre><code>[tool:pytest]\ntestpaths = tests\npython_files = test_*.py *_test.py\npython_classes = Test*\npython_functions = test_*\naddopts = \n    --strict-markers\n    --strict-config\n    --verbose\n    --tb=short\n    --cov=harborai\n    --cov-report=html\n    --cov-report=term-missing\n    --cov-fail-under=80\nmarkers =\n    unit: \u5355\u5143\u6d4b\u8bd5\n    integration: \u96c6\u6210\u6d4b\u8bd5\n    e2e: \u7aef\u5230\u7aef\u6d4b\u8bd5\n    slow: \u6162\u901f\u6d4b\u8bd5\n    performance: \u6027\u80fd\u6d4b\u8bd5\n</code></pre>"},{"location":"development/#2_5","title":"2. \u6d4b\u8bd5\u914d\u7f6e","text":"<p>\u521b\u5efa <code>conftest.py</code>:</p> <pre><code>\"\"\"\npytest \u914d\u7f6e\u548c fixtures\n\"\"\"\nimport pytest\nimport asyncio\nfrom unittest.mock import Mock, AsyncMock\nfrom harborai import HarborAI\nfrom harborai.api.fast_client import FastHarborAI\n\n@pytest.fixture(scope=\"session\")\ndef event_loop():\n    \"\"\"\u521b\u5efa\u4e8b\u4ef6\u5faa\u73af\"\"\"\n    loop = asyncio.new_event_loop()\n    yield loop\n    loop.close()\n\n@pytest.fixture\ndef mock_api_key():\n    \"\"\"\u6a21\u62df API \u5bc6\u94a5\"\"\"\n    return \"test-api-key-12345\"\n\n@pytest.fixture\ndef harbor_client(mock_api_key):\n    \"\"\"\u521b\u5efa HarborAI \u5ba2\u6237\u7aef\"\"\"\n    return HarborAI(api_key=mock_api_key)\n\n@pytest.fixture\ndef fast_harbor_client(mock_api_key):\n    \"\"\"\u521b\u5efa FastHarborAI \u5ba2\u6237\u7aef\"\"\"\n    return FastHarborAI(\n        api_key=mock_api_key,\n        performance_mode=\"fast\"\n    )\n\n@pytest.fixture\ndef mock_http_response():\n    \"\"\"\u6a21\u62df HTTP \u54cd\u5e94\"\"\"\n    mock_response = Mock()\n    mock_response.status_code = 200\n    mock_response.json.return_value = {\n        \"choices\": [\n            {\n                \"message\": {\n                    \"role\": \"assistant\",\n                    \"content\": \"\u8fd9\u662f\u4e00\u4e2a\u6d4b\u8bd5\u54cd\u5e94\"\n                }\n            }\n        ],\n        \"usage\": {\n            \"prompt_tokens\": 10,\n            \"completion_tokens\": 20,\n            \"total_tokens\": 30\n        }\n    }\n    return mock_response\n\n@pytest.fixture\nasync def async_mock_session():\n    \"\"\"\u5f02\u6b65\u6a21\u62df\u4f1a\u8bdd\"\"\"\n    session = AsyncMock()\n    session.post.return_value.__aenter__.return_value.json.return_value = {\n        \"choices\": [{\"message\": {\"content\": \"\u6d4b\u8bd5\u54cd\u5e94\"}}]\n    }\n    return session\n</code></pre>"},{"location":"development/#3_4","title":"3. \u6d4b\u8bd5\u793a\u4f8b","text":"<pre><code>\"\"\"\n\u6d4b\u8bd5\u793a\u4f8b\n\"\"\"\nimport pytest\nfrom unittest.mock import patch, AsyncMock\nfrom harborai.core.cache import CacheManager\nfrom harborai.api.chat import ChatAPI\n\nclass TestCacheManager:\n    \"\"\"\u7f13\u5b58\u7ba1\u7406\u5668\u6d4b\u8bd5\"\"\"\n\n    def test_cache_initialization(self):\n        \"\"\"\u6d4b\u8bd5\u7f13\u5b58\u521d\u59cb\u5316\"\"\"\n        cache = CacheManager(max_size=100)\n        assert cache.max_size == 100\n        assert len(cache._cache) == 0\n\n    def test_cache_set_get(self):\n        \"\"\"\u6d4b\u8bd5\u7f13\u5b58\u8bbe\u7f6e\u548c\u83b7\u53d6\"\"\"\n        cache = CacheManager()\n\n        # \u8bbe\u7f6e\u7f13\u5b58\n        cache.set(\"test_key\", \"test_value\")\n\n        # \u83b7\u53d6\u7f13\u5b58\n        result = cache.get(\"test_key\")\n        assert result == \"test_value\"\n\n    def test_cache_lru_eviction(self):\n        \"\"\"\u6d4b\u8bd5 LRU \u6dd8\u6c70\u7b56\u7565\"\"\"\n        cache = CacheManager(max_size=2)\n\n        # \u6dfb\u52a0\u4e24\u4e2a\u9879\u76ee\n        cache.set(\"key1\", \"value1\")\n        cache.set(\"key2\", \"value2\")\n\n        # \u6dfb\u52a0\u7b2c\u4e09\u4e2a\u9879\u76ee\uff0c\u5e94\u8be5\u6dd8\u6c70\u7b2c\u4e00\u4e2a\n        cache.set(\"key3\", \"value3\")\n\n        assert cache.get(\"key1\") is None\n        assert cache.get(\"key2\") == \"value2\"\n        assert cache.get(\"key3\") == \"value3\"\n\nclass TestChatAPI:\n    \"\"\"\u804a\u5929 API \u6d4b\u8bd5\"\"\"\n\n    @pytest.mark.asyncio\n    async def test_chat_completion_success(self, mock_api_key, async_mock_session):\n        \"\"\"\u6d4b\u8bd5\u804a\u5929\u5b8c\u6210\u6210\u529f\u573a\u666f\"\"\"\n        with patch('httpx.AsyncClient') as mock_client:\n            mock_client.return_value.__aenter__.return_value = async_mock_session\n\n            api = ChatAPI(api_key=mock_api_key)\n\n            response = await api.chat_completion(\n                model=\"deepseek-chat\",\n                messages=[{\"role\": \"user\", \"content\": \"Hello\"}]\n            )\n\n            assert response is not None\n            assert \"choices\" in response\n\n    @pytest.mark.asyncio\n    async def test_chat_completion_with_cache(self, mock_api_key):\n        \"\"\"\u6d4b\u8bd5\u5e26\u7f13\u5b58\u7684\u804a\u5929\u5b8c\u6210\"\"\"\n        cache = CacheManager()\n        api = ChatAPI(api_key=mock_api_key, cache=cache)\n\n        # \u6a21\u62df API \u54cd\u5e94\n        mock_response = {\n            \"choices\": [{\"message\": {\"content\": \"\u7f13\u5b58\u6d4b\u8bd5\u54cd\u5e94\"}}]\n        }\n\n        with patch.object(api, '_make_request', return_value=mock_response):\n            # \u7b2c\u4e00\u6b21\u8c03\u7528\n            response1 = await api.chat_completion(\n                model=\"deepseek-chat\",\n                messages=[{\"role\": \"user\", \"content\": \"\u6d4b\u8bd5\"}]\n            )\n\n            # \u7b2c\u4e8c\u6b21\u8c03\u7528\uff08\u5e94\u8be5\u547d\u4e2d\u7f13\u5b58\uff09\n            response2 = await api.chat_completion(\n                model=\"deepseek-chat\",\n                messages=[{\"role\": \"user\", \"content\": \"\u6d4b\u8bd5\"}]\n            )\n\n            assert response1 == response2\n            assert api._make_request.call_count == 1  # \u53ea\u8c03\u7528\u4e00\u6b21 API\n\n@pytest.mark.integration\nclass TestIntegration:\n    \"\"\"\u96c6\u6210\u6d4b\u8bd5\"\"\"\n\n    @pytest.mark.asyncio\n    async def test_client_with_cache_integration(self, mock_api_key):\n        \"\"\"\u6d4b\u8bd5\u5ba2\u6237\u7aef\u4e0e\u7f13\u5b58\u96c6\u6210\"\"\"\n        client = FastHarborAI(\n            api_key=mock_api_key,\n            enable_cache=True\n        )\n\n        # \u6a21\u62df API \u8c03\u7528\n        with patch.object(client, '_make_api_request') as mock_request:\n            mock_request.return_value = {\n                \"choices\": [{\"message\": {\"content\": \"\u96c6\u6210\u6d4b\u8bd5\u54cd\u5e94\"}}]\n            }\n\n            # \u6267\u884c\u591a\u6b21\u76f8\u540c\u8bf7\u6c42\n            for _ in range(3):\n                await client.chat.completions.create(\n                    model=\"deepseek-chat\",\n                    messages=[{\"role\": \"user\", \"content\": \"\u96c6\u6210\u6d4b\u8bd5\"}]\n                )\n\n            # \u9a8c\u8bc1\u53ea\u8c03\u7528\u4e86\u4e00\u6b21 API\n            assert mock_request.call_count == 1\n\n@pytest.mark.performance\nclass TestPerformance:\n    \"\"\"\u6027\u80fd\u6d4b\u8bd5\"\"\"\n\n    @pytest.mark.asyncio\n    async def test_concurrent_requests_performance(self, fast_harbor_client):\n        \"\"\"\u6d4b\u8bd5\u5e76\u53d1\u8bf7\u6c42\u6027\u80fd\"\"\"\n        import time\n        import asyncio\n\n        # \u521b\u5efa\u5e76\u53d1\u4efb\u52a1\n        tasks = []\n        for i in range(10):\n            task = fast_harbor_client.mock_chat_completion(\n                model=\"deepseek-chat\",\n                messages=[{\"role\": \"user\", \"content\": f\"\u6d4b\u8bd5 {i}\"}]\n            )\n            tasks.append(task)\n\n        # \u6267\u884c\u5e76\u53d1\u6d4b\u8bd5\n        start_time = time.time()\n        results = await asyncio.gather(*tasks)\n        end_time = time.time()\n\n        # \u9a8c\u8bc1\u7ed3\u679c\n        assert len(results) == 10\n        assert all(result is not None for result in results)\n\n        # \u6027\u80fd\u65ad\u8a00\n        total_time = end_time - start_time\n        assert total_time &lt; 5.0  # \u5e94\u8be5\u5728 5 \u79d2\u5185\u5b8c\u6210\n\n        print(f\"\u5e76\u53d1\u6d4b\u8bd5\u5b8c\u6210\u65f6\u95f4: {total_time:.2f}s\")\n</code></pre>"},{"location":"development/#_13","title":"\u8c03\u8bd5\u6280\u5de7","text":""},{"location":"development/#_14","title":"\ud83d\udc1b \u8c03\u8bd5\u5de5\u5177","text":""},{"location":"development/#1_3","title":"1. \u65e5\u5fd7\u914d\u7f6e","text":"<pre><code>\"\"\"\n\u65e5\u5fd7\u914d\u7f6e\n\"\"\"\nimport logging\nimport sys\nfrom pathlib import Path\n\ndef setup_logging(\n    level: str = \"INFO\",\n    log_file: str = None,\n    format_string: str = None\n):\n    \"\"\"\n    \u914d\u7f6e\u65e5\u5fd7\u7cfb\u7edf\n\n    Args:\n        level: \u65e5\u5fd7\u7ea7\u522b (DEBUG, INFO, WARNING, ERROR, CRITICAL)\n        log_file: \u65e5\u5fd7\u6587\u4ef6\u8def\u5f84\uff0cNone \u8868\u793a\u53ea\u8f93\u51fa\u5230\u63a7\u5236\u53f0\n        format_string: \u81ea\u5b9a\u4e49\u683c\u5f0f\u5b57\u7b26\u4e32\n    \"\"\"\n    if format_string is None:\n        format_string = (\n            \"%(asctime)s - %(name)s - %(levelname)s - \"\n            \"%(filename)s:%(lineno)d - %(message)s\"\n        )\n\n    # \u914d\u7f6e\u6839\u65e5\u5fd7\u5668\n    logging.basicConfig(\n        level=getattr(logging, level.upper()),\n        format=format_string,\n        handlers=[]\n    )\n\n    # \u6dfb\u52a0\u63a7\u5236\u53f0\u5904\u7406\u5668\n    console_handler = logging.StreamHandler(sys.stdout)\n    console_handler.setFormatter(logging.Formatter(format_string))\n    logging.getLogger().addHandler(console_handler)\n\n    # \u6dfb\u52a0\u6587\u4ef6\u5904\u7406\u5668\n    if log_file:\n        file_handler = logging.FileHandler(log_file, encoding='utf-8')\n        file_handler.setFormatter(logging.Formatter(format_string))\n        logging.getLogger().addHandler(file_handler)\n\n# \u4f7f\u7528\u793a\u4f8b\nsetup_logging(\n    level=\"DEBUG\",\n    log_file=\"logs/harborai.log\"\n)\n\nlogger = logging.getLogger(__name__)\nlogger.info(\"\u65e5\u5fd7\u7cfb\u7edf\u5df2\u914d\u7f6e\")\n</code></pre>"},{"location":"development/#2_6","title":"2. \u8c03\u8bd5\u88c5\u9970\u5668","text":"<pre><code>\"\"\"\n\u8c03\u8bd5\u88c5\u9970\u5668\n\"\"\"\nimport functools\nimport time\nimport logging\nfrom typing import Any, Callable\n\ndef debug_performance(func: Callable) -&gt; Callable:\n    \"\"\"\u6027\u80fd\u8c03\u8bd5\u88c5\u9970\u5668\"\"\"\n    @functools.wraps(func)\n    async def async_wrapper(*args, **kwargs):\n        start_time = time.time()\n        logger = logging.getLogger(func.__module__)\n\n        logger.debug(f\"\u5f00\u59cb\u6267\u884c {func.__name__}\")\n        logger.debug(f\"\u53c2\u6570: args={args}, kwargs={kwargs}\")\n\n        try:\n            result = await func(*args, **kwargs)\n            execution_time = time.time() - start_time\n\n            logger.debug(f\"\u6267\u884c\u5b8c\u6210 {func.__name__}, \u8017\u65f6: {execution_time:.3f}s\")\n            logger.debug(f\"\u8fd4\u56de\u503c\u7c7b\u578b: {type(result)}\")\n\n            return result\n        except Exception as e:\n            execution_time = time.time() - start_time\n            logger.error(f\"\u6267\u884c\u5931\u8d25 {func.__name__}, \u8017\u65f6: {execution_time:.3f}s, \u9519\u8bef: {e}\")\n            raise\n\n    @functools.wraps(func)\n    def sync_wrapper(*args, **kwargs):\n        start_time = time.time()\n        logger = logging.getLogger(func.__module__)\n\n        logger.debug(f\"\u5f00\u59cb\u6267\u884c {func.__name__}\")\n\n        try:\n            result = func(*args, **kwargs)\n            execution_time = time.time() - start_time\n\n            logger.debug(f\"\u6267\u884c\u5b8c\u6210 {func.__name__}, \u8017\u65f6: {execution_time:.3f}s\")\n            return result\n        except Exception as e:\n            execution_time = time.time() - start_time\n            logger.error(f\"\u6267\u884c\u5931\u8d25 {func.__name__}, \u8017\u65f6: {execution_time:.3f}s, \u9519\u8bef: {e}\")\n            raise\n\n    return async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper\n\n# \u4f7f\u7528\u793a\u4f8b\n@debug_performance\nasync def api_call_with_debug(model: str, messages: list):\n    \"\"\"\u5e26\u8c03\u8bd5\u7684 API \u8c03\u7528\"\"\"\n    # \u6a21\u62df API \u8c03\u7528\n    await asyncio.sleep(0.1)\n    return {\"response\": \"\u8c03\u8bd5\u6d4b\u8bd5\"}\n</code></pre>"},{"location":"development/#3_5","title":"3. \u5185\u5b58\u8c03\u8bd5","text":"<pre><code>\"\"\"\n\u5185\u5b58\u8c03\u8bd5\u5de5\u5177\n\"\"\"\nimport psutil\nimport gc\nimport tracemalloc\nfrom typing import Dict, Any\n\nclass MemoryProfiler:\n    \"\"\"\u5185\u5b58\u5206\u6790\u5668\"\"\"\n\n    def __init__(self):\n        self.snapshots = []\n        self.process = psutil.Process()\n\n    def start_tracing(self):\n        \"\"\"\u5f00\u59cb\u5185\u5b58\u8ffd\u8e2a\"\"\"\n        tracemalloc.start()\n        self.take_snapshot(\"start\")\n\n    def take_snapshot(self, label: str):\n        \"\"\"\u62cd\u6444\u5185\u5b58\u5feb\u7167\"\"\"\n        if tracemalloc.is_tracing():\n            snapshot = tracemalloc.take_snapshot()\n            memory_mb = self.process.memory_info().rss / 1024 / 1024\n\n            self.snapshots.append({\n                'label': label,\n                'snapshot': snapshot,\n                'memory_mb': memory_mb,\n                'timestamp': time.time()\n            })\n\n    def compare_snapshots(self, start_label: str, end_label: str):\n        \"\"\"\u6bd4\u8f83\u5185\u5b58\u5feb\u7167\"\"\"\n        start_snap = None\n        end_snap = None\n\n        for snap in self.snapshots:\n            if snap['label'] == start_label:\n                start_snap = snap\n            elif snap['label'] == end_label:\n                end_snap = snap\n\n        if not start_snap or not end_snap:\n            print(\"\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u5feb\u7167\")\n            return\n\n        # \u6bd4\u8f83\u5feb\u7167\n        top_stats = end_snap['snapshot'].compare_to(\n            start_snap['snapshot'], 'lineno'\n        )\n\n        print(f\"\u5185\u5b58\u53d8\u5316\u5206\u6790 ({start_label} -&gt; {end_label}):\")\n        print(f\"\u603b\u5185\u5b58\u53d8\u5316: {end_snap['memory_mb'] - start_snap['memory_mb']:.1f}MB\")\n        print(\"\\n\u524d10\u4e2a\u5185\u5b58\u589e\u957f\u6700\u591a\u7684\u4f4d\u7f6e:\")\n\n        for stat in top_stats[:10]:\n            print(f\"  {stat}\")\n\n    def get_current_memory_usage(self) -&gt; Dict[str, Any]:\n        \"\"\"\u83b7\u53d6\u5f53\u524d\u5185\u5b58\u4f7f\u7528\u60c5\u51b5\"\"\"\n        memory_info = self.process.memory_info()\n\n        return {\n            'rss_mb': memory_info.rss / 1024 / 1024,\n            'vms_mb': memory_info.vms / 1024 / 1024,\n            'percent': self.process.memory_percent(),\n            'available_mb': psutil.virtual_memory().available / 1024 / 1024\n        }\n\n# \u4f7f\u7528\u793a\u4f8b\nprofiler = MemoryProfiler()\nprofiler.start_tracing()\n\n# \u6267\u884c\u4e00\u4e9b\u64cd\u4f5c\nprofiler.take_snapshot(\"before_operation\")\n\n# \u6a21\u62df\u5185\u5b58\u5bc6\u96c6\u64cd\u4f5c\ndata = [i for i in range(100000)]\n\nprofiler.take_snapshot(\"after_operation\")\nprofiler.compare_snapshots(\"before_operation\", \"after_operation\")\n</code></pre>"},{"location":"development/#_15","title":"\u6027\u80fd\u4f18\u5316\u5f00\u53d1","text":""},{"location":"development/#_16","title":"\u26a1 \u6027\u80fd\u4f18\u5316\u7b56\u7565","text":""},{"location":"development/#1_4","title":"1. \u5f02\u6b65\u7f16\u7a0b\u6700\u4f73\u5b9e\u8df5","text":"<pre><code>\"\"\"\n\u5f02\u6b65\u7f16\u7a0b\u6700\u4f73\u5b9e\u8df5\n\"\"\"\nimport asyncio\nimport aiohttp\nfrom typing import List, Dict, Any\n\nclass AsyncBatchProcessor:\n    \"\"\"\u5f02\u6b65\u6279\u5904\u7406\u5668\"\"\"\n\n    def __init__(self, max_concurrent: int = 10, batch_size: int = 50):\n        self.max_concurrent = max_concurrent\n        self.batch_size = batch_size\n        self.semaphore = asyncio.Semaphore(max_concurrent)\n\n    async def process_batch(self, items: List[Any]) -&gt; List[Any]:\n        \"\"\"\u6279\u91cf\u5904\u7406\u9879\u76ee\"\"\"\n        # \u5206\u6279\u5904\u7406\n        batches = [\n            items[i:i + self.batch_size] \n            for i in range(0, len(items), self.batch_size)\n        ]\n\n        # \u5e76\u53d1\u5904\u7406\u6279\u6b21\n        tasks = [\n            self._process_single_batch(batch) \n            for batch in batches\n        ]\n\n        batch_results = await asyncio.gather(*tasks)\n\n        # \u5408\u5e76\u7ed3\u679c\n        results = []\n        for batch_result in batch_results:\n            results.extend(batch_result)\n\n        return results\n\n    async def _process_single_batch(self, batch: List[Any]) -&gt; List[Any]:\n        \"\"\"\u5904\u7406\u5355\u4e2a\u6279\u6b21\"\"\"\n        async with self.semaphore:\n            # \u5e76\u53d1\u5904\u7406\u6279\u6b21\u5185\u7684\u9879\u76ee\n            tasks = [self._process_item(item) for item in batch]\n            return await asyncio.gather(*tasks)\n\n    async def _process_item(self, item: Any) -&gt; Any:\n        \"\"\"\u5904\u7406\u5355\u4e2a\u9879\u76ee\"\"\"\n        # \u6a21\u62df\u5f02\u6b65\u5904\u7406\n        await asyncio.sleep(0.01)\n        return f\"processed_{item}\"\n\n# \u4f7f\u7528\u793a\u4f8b\nasync def main():\n    processor = AsyncBatchProcessor(max_concurrent=5, batch_size=20)\n    items = list(range(1000))\n\n    start_time = time.time()\n    results = await processor.process_batch(items)\n    end_time = time.time()\n\n    print(f\"\u5904\u7406 {len(items)} \u4e2a\u9879\u76ee\uff0c\u8017\u65f6: {end_time - start_time:.2f}s\")\n</code></pre>"},{"location":"development/#2_7","title":"2. \u7f13\u5b58\u4f18\u5316\u7b56\u7565","text":"<pre><code>\"\"\"\n\u9ad8\u7ea7\u7f13\u5b58\u4f18\u5316\u7b56\u7565\n\"\"\"\nimport hashlib\nimport pickle\nimport time\nfrom typing import Any, Optional, Callable, Dict\nfrom functools import wraps\n\nclass SmartCache:\n    \"\"\"\u667a\u80fd\u7f13\u5b58\u7cfb\u7edf\"\"\"\n\n    def __init__(self, max_size: int = 1000, default_ttl: int = 3600):\n        self.max_size = max_size\n        self.default_ttl = default_ttl\n        self.cache: Dict[str, Dict[str, Any]] = {}\n        self.access_times: Dict[str, float] = {}\n        self.hit_count = 0\n        self.miss_count = 0\n\n    def _generate_key(self, func_name: str, args: tuple, kwargs: dict) -&gt; str:\n        \"\"\"\u751f\u6210\u7f13\u5b58\u952e\"\"\"\n        # \u521b\u5efa\u53ef\u5e8f\u5217\u5316\u7684\u53c2\u6570\u8868\u793a\n        serializable_args = []\n        for arg in args:\n            if hasattr(arg, '__dict__'):\n                serializable_args.append(str(arg.__dict__))\n            else:\n                serializable_args.append(str(arg))\n\n        key_data = {\n            'func': func_name,\n            'args': serializable_args,\n            'kwargs': sorted(kwargs.items())\n        }\n\n        key_str = pickle.dumps(key_data)\n        return hashlib.md5(key_str).hexdigest()\n\n    def get(self, key: str) -&gt; Optional[Any]:\n        \"\"\"\u83b7\u53d6\u7f13\u5b58\u503c\"\"\"\n        if key not in self.cache:\n            self.miss_count += 1\n            return None\n\n        entry = self.cache[key]\n\n        # \u68c0\u67e5 TTL\n        if time.time() - entry['timestamp'] &gt; entry['ttl']:\n            del self.cache[key]\n            self.access_times.pop(key, None)\n            self.miss_count += 1\n            return None\n\n        # \u66f4\u65b0\u8bbf\u95ee\u65f6\u95f4\n        self.access_times[key] = time.time()\n        self.hit_count += 1\n\n        return entry['value']\n\n    def set(self, key: str, value: Any, ttl: int = None):\n        \"\"\"\u8bbe\u7f6e\u7f13\u5b58\u503c\"\"\"\n        if ttl is None:\n            ttl = self.default_ttl\n\n        # \u5982\u679c\u7f13\u5b58\u5df2\u6ee1\uff0c\u5220\u9664\u6700\u4e45\u672a\u8bbf\u95ee\u7684\u9879\u76ee\n        if len(self.cache) &gt;= self.max_size and key not in self.cache:\n            self._evict_lru()\n\n        self.cache[key] = {\n            'value': value,\n            'timestamp': time.time(),\n            'ttl': ttl\n        }\n        self.access_times[key] = time.time()\n\n    def _evict_lru(self):\n        \"\"\"\u6dd8\u6c70\u6700\u4e45\u672a\u4f7f\u7528\u7684\u9879\u76ee\"\"\"\n        if not self.access_times:\n            return\n\n        lru_key = min(self.access_times, key=self.access_times.get)\n        del self.cache[lru_key]\n        del self.access_times[lru_key]\n\n    def get_stats(self) -&gt; Dict[str, Any]:\n        \"\"\"\u83b7\u53d6\u7f13\u5b58\u7edf\u8ba1\"\"\"\n        total_requests = self.hit_count + self.miss_count\n        hit_rate = self.hit_count / total_requests if total_requests &gt; 0 else 0\n\n        return {\n            'hit_count': self.hit_count,\n            'miss_count': self.miss_count,\n            'hit_rate': hit_rate,\n            'cache_size': len(self.cache),\n            'max_size': self.max_size\n        }\n\ndef cached(ttl: int = 3600, cache_instance: SmartCache = None):\n    \"\"\"\u7f13\u5b58\u88c5\u9970\u5668\"\"\"\n    if cache_instance is None:\n        cache_instance = SmartCache()\n\n    def decorator(func: Callable):\n        @wraps(func)\n        async def async_wrapper(*args, **kwargs):\n            # \u751f\u6210\u7f13\u5b58\u952e\n            cache_key = cache_instance._generate_key(\n                func.__name__, args, kwargs\n            )\n\n            # \u5c1d\u8bd5\u4ece\u7f13\u5b58\u83b7\u53d6\n            cached_result = cache_instance.get(cache_key)\n            if cached_result is not None:\n                return cached_result\n\n            # \u6267\u884c\u51fd\u6570\n            result = await func(*args, **kwargs)\n\n            # \u7f13\u5b58\u7ed3\u679c\n            cache_instance.set(cache_key, result, ttl)\n\n            return result\n\n        @wraps(func)\n        def sync_wrapper(*args, **kwargs):\n            cache_key = cache_instance._generate_key(\n                func.__name__, args, kwargs\n            )\n\n            cached_result = cache_instance.get(cache_key)\n            if cached_result is not None:\n                return cached_result\n\n            result = func(*args, **kwargs)\n            cache_instance.set(cache_key, result, ttl)\n\n            return result\n\n        return async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper\n\n    return decorator\n\n# \u4f7f\u7528\u793a\u4f8b\ncache = SmartCache(max_size=500, default_ttl=1800)\n\n@cached(ttl=3600, cache_instance=cache)\nasync def expensive_api_call(model: str, prompt: str) -&gt; dict:\n    \"\"\"\u6602\u8d35\u7684 API \u8c03\u7528\"\"\"\n    # \u6a21\u62df API \u8c03\u7528\n    await asyncio.sleep(1)\n    return {\n        \"response\": f\"Response for {prompt} using {model}\",\n        \"timestamp\": time.time()\n    }\n</code></pre>"},{"location":"development/#_17","title":"\u8d21\u732e\u6307\u5357","text":""},{"location":"development/#_18","title":"\ud83e\udd1d \u8d21\u732e\u6d41\u7a0b","text":""},{"location":"development/#1_5","title":"1. \u51c6\u5907\u5de5\u4f5c","text":"<pre><code># Fork \u9879\u76ee\u5230\u4f60\u7684 GitHub \u8d26\u6237\n# \u514b\u9686\u4f60\u7684 fork\ngit clone https://github.com/your-username/harborai.git\ncd harborai\n\n# \u6dfb\u52a0\u4e0a\u6e38\u4ed3\u5e93\ngit remote add upstream https://github.com/original-org/harborai.git\n\n# \u521b\u5efa\u5f00\u53d1\u5206\u652f\ngit checkout -b feature/your-feature-name\n</code></pre>"},{"location":"development/#2_8","title":"2. \u5f00\u53d1\u89c4\u8303","text":"<ul> <li>\u4ee3\u7801\u98ce\u683c: \u9075\u5faa PEP 8 \u548c\u9879\u76ee\u4ee3\u7801\u89c4\u8303</li> <li>\u6d4b\u8bd5\u8986\u76d6: \u65b0\u529f\u80fd\u5fc5\u987b\u5305\u542b\u6d4b\u8bd5\uff0c\u8986\u76d6\u7387\u4e0d\u4f4e\u4e8e 80%</li> <li>\u6587\u6863\u66f4\u65b0: \u66f4\u65b0\u76f8\u5173\u6587\u6863\u548c\u793a\u4f8b</li> <li>\u63d0\u4ea4\u4fe1\u606f: \u4f7f\u7528 Conventional Commits \u683c\u5f0f</li> </ul>"},{"location":"development/#3_6","title":"3. \u63d0\u4ea4\u68c0\u67e5\u6e05\u5355","text":"<ul> <li> \u4ee3\u7801\u901a\u8fc7\u6240\u6709\u6d4b\u8bd5</li> <li> \u4ee3\u7801\u98ce\u683c\u68c0\u67e5\u901a\u8fc7</li> <li> \u7c7b\u578b\u68c0\u67e5\u901a\u8fc7</li> <li> \u6587\u6863\u5df2\u66f4\u65b0</li> <li> \u793a\u4f8b\u4ee3\u7801\u53ef\u8fd0\u884c</li> <li> \u6027\u80fd\u6d4b\u8bd5\u901a\u8fc7\uff08\u5982\u9002\u7528\uff09</li> </ul>"},{"location":"development/#4-pull-request","title":"4. Pull Request \u6a21\u677f","text":"<pre><code>## \u53d8\u66f4\u63cf\u8ff0\n\u7b80\u8981\u63cf\u8ff0\u8fd9\u4e2a PR \u7684\u76ee\u7684\u548c\u53d8\u66f4\u5185\u5bb9\u3002\n\n## \u53d8\u66f4\u7c7b\u578b\n- [ ] Bug \u4fee\u590d\n- [ ] \u65b0\u529f\u80fd\n- [ ] \u6027\u80fd\u4f18\u5316\n- [ ] \u6587\u6863\u66f4\u65b0\n- [ ] \u91cd\u6784\n- [ ] \u5176\u4ed6\n\n## \u6d4b\u8bd5\n- [ ] \u6dfb\u52a0\u4e86\u65b0\u7684\u6d4b\u8bd5\n- [ ] \u6240\u6709\u6d4b\u8bd5\u901a\u8fc7\n- [ ] \u624b\u52a8\u6d4b\u8bd5\u901a\u8fc7\n\n## \u68c0\u67e5\u6e05\u5355\n- [ ] \u4ee3\u7801\u9075\u5faa\u9879\u76ee\u89c4\u8303\n- [ ] \u81ea\u6211\u5ba1\u67e5\u4e86\u4ee3\u7801\n- [ ] \u6dfb\u52a0\u4e86\u5fc5\u8981\u7684\u6ce8\u91ca\n- [ ] \u66f4\u65b0\u4e86\u76f8\u5173\u6587\u6863\n- [ ] \u6ca1\u6709\u5f15\u5165\u65b0\u7684\u8b66\u544a\n\n## \u76f8\u5173 Issue\n\u5173\u8054\u7684 Issue \u7f16\u53f7\uff08\u5982\u679c\u6709\uff09\n\n## \u622a\u56fe\n\u5982\u679c\u6709 UI \u53d8\u66f4\uff0c\u8bf7\u63d0\u4f9b\u622a\u56fe\n\n## \u5176\u4ed6\u8bf4\u660e\n\u4efb\u4f55\u5176\u4ed6\u9700\u8981\u8bf4\u660e\u7684\u5185\u5bb9\n</code></pre> <p>\u5f00\u53d1\u6307\u5357\u7248\u672c: v1.0.0 | \u66f4\u65b0\u65e5\u671f: 2025-01-25 | \u4e0b\u6b21\u66f4\u65b0: 2025-02-25</p>"},{"location":"performance/","title":"HarborAI \u6027\u80fd\u4f18\u5316\u8be6\u7ec6\u62a5\u544a","text":"<p>\u672c\u6587\u6863\u8be6\u7ec6\u4ecb\u7ecd HarborAI \u7684\u6027\u80fd\u4f18\u5316\u6210\u679c\u3001\u6d4b\u8bd5\u6570\u636e\u548c\u4f18\u5316\u7b56\u7565\u3002</p>"},{"location":"performance/#_1","title":"\ud83d\udccb \u76ee\u5f55","text":"<ul> <li>\u6027\u80fd\u4f18\u5316\u6982\u8ff0</li> <li>\u4f18\u5316\u6210\u679c</li> <li>\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a</li> <li>\u5185\u5b58\u4f18\u5316</li> <li>\u5e76\u53d1\u4f18\u5316</li> <li>\u7f13\u5b58\u4f18\u5316</li> <li>\u6027\u80fd\u76d1\u63a7</li> <li>\u6700\u4f73\u5b9e\u8df5</li> </ul>"},{"location":"performance/#_2","title":"\u6027\u80fd\u4f18\u5316\u6982\u8ff0","text":"<p>HarborAI \u901a\u8fc7\u591a\u5c42\u6b21\u7684\u6027\u80fd\u4f18\u5316\u7b56\u7565\uff0c\u5b9e\u73b0\u4e86\u4e16\u754c\u7ea7\u7684\u6027\u80fd\u8868\u73b0\u3002\u6211\u4eec\u7684\u4f18\u5316\u91cd\u70b9\u5305\u62ec\uff1a</p>"},{"location":"performance/#_3","title":"\ud83c\udfaf \u4f18\u5316\u76ee\u6807","text":"\u6307\u6807 \u76ee\u6807\u503c \u5b9e\u9645\u503c \u72b6\u6001 \u521d\u59cb\u5316\u65f6\u95f4 \u2264160ms ~150ms \u2705 \u8fbe\u6807 \u5185\u5b58\u589e\u957f \u22642MB ~1.8MB \u2705 \u8fbe\u6807 API\u54cd\u5e94\u65f6\u95f4 \u2264100ms ~85ms \u2705 \u8fbe\u6807 \u5e76\u53d1\u5904\u7406\u80fd\u529b \u22651000 req/s ~1200 req/s \u2705 \u8d85\u6807 \u7f13\u5b58\u547d\u4e2d\u7387 \u226580% ~85% \u2705 \u8d85\u6807"},{"location":"performance/#_4","title":"\ud83d\ude80 \u4f18\u5316\u7b56\u7565","text":"<ol> <li>\u5ef6\u8fdf\u52a0\u8f7d\u4f18\u5316: \u6309\u9700\u52a0\u8f7d\u6a21\u5757\uff0c\u5927\u5e45\u51cf\u5c11\u521d\u59cb\u5316\u65f6\u95f4</li> <li>\u5185\u5b58\u4f18\u5316: \u667a\u80fd\u5185\u5b58\u7ba1\u7406\uff0c\u63a7\u5236\u5185\u5b58\u589e\u957f</li> <li>\u7f13\u5b58\u4f18\u5316: \u591a\u5c42\u7f13\u5b58\u7b56\u7565\uff0c\u63d0\u5347\u54cd\u5e94\u901f\u5ea6</li> <li>\u5e76\u53d1\u4f18\u5316: \u5f02\u6b65\u67b6\u6784\uff0c\u652f\u6301\u9ad8\u5e76\u53d1\u5904\u7406</li> <li>\u8bf7\u6c42\u4f18\u5316: \u667a\u80fd\u8bf7\u6c42\u5904\u7406\uff0c\u51cf\u5c11\u7f51\u7edc\u5f00\u9500</li> </ol>"},{"location":"performance/#_5","title":"\u4f18\u5316\u6210\u679c","text":""},{"location":"performance/#_6","title":"\ud83c\udfc6 \u6838\u5fc3\u6027\u80fd\u6307\u6807","text":""},{"location":"performance/#_7","title":"\u521d\u59cb\u5316\u6027\u80fd","text":"<pre><code># \u6027\u80fd\u6d4b\u8bd5\u4ee3\u7801\nimport time\nfrom harborai import HarborAI\nfrom harborai.api.fast_client import FastHarborAI\n\ndef benchmark_initialization():\n    \"\"\"\u521d\u59cb\u5316\u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5\"\"\"\n\n    # \u6807\u51c6\u5ba2\u6237\u7aef\u521d\u59cb\u5316\n    start_time = time.time()\n    client = HarborAI(api_key=\"test-key\")\n    standard_init_time = (time.time() - start_time) * 1000\n\n    # \u5feb\u901f\u5ba2\u6237\u7aef\u521d\u59cb\u5316\n    start_time = time.time()\n    fast_client = FastHarborAI(\n        api_key=\"test-key\",\n        performance_mode=\"fast\"\n    )\n    fast_init_time = (time.time() - start_time) * 1000\n\n    print(f\"\u6807\u51c6\u5ba2\u6237\u7aef\u521d\u59cb\u5316: {standard_init_time:.1f}ms\")\n    print(f\"\u5feb\u901f\u5ba2\u6237\u7aef\u521d\u59cb\u5316: {fast_init_time:.1f}ms\")\n    print(f\"\u6027\u80fd\u63d0\u5347: {(standard_init_time/fast_init_time):.1f}x\")\n\n# \u6d4b\u8bd5\u7ed3\u679c\n# \u6807\u51c6\u5ba2\u6237\u7aef\u521d\u59cb\u5316: 180.5ms\n# \u5feb\u901f\u5ba2\u6237\u7aef\u521d\u59cb\u5316: 148.2ms\n# \u6027\u80fd\u63d0\u5347: 1.2x\n</code></pre>"},{"location":"performance/#_8","title":"\u5185\u5b58\u4f7f\u7528\u4f18\u5316","text":"<pre><code>import psutil\nimport os\n\ndef benchmark_memory_usage():\n    \"\"\"\u5185\u5b58\u4f7f\u7528\u57fa\u51c6\u6d4b\u8bd5\"\"\"\n\n    process = psutil.Process(os.getpid())\n\n    # \u521d\u59cb\u5185\u5b58\n    initial_memory = process.memory_info().rss / 1024 / 1024\n\n    # \u521b\u5efa\u5ba2\u6237\u7aef\n    client = FastHarborAI(\n        api_key=\"test-key\",\n        enable_memory_optimization=True\n    )\n\n    # \u6267\u884c100\u6b21\u8bf7\u6c42\n    for i in range(100):\n        # \u6a21\u62df\u8bf7\u6c42\u5904\u7406\n        client._process_mock_request()\n\n    # \u6700\u7ec8\u5185\u5b58\n    final_memory = process.memory_info().rss / 1024 / 1024\n    memory_growth = final_memory - initial_memory\n\n    print(f\"\u521d\u59cb\u5185\u5b58: {initial_memory:.1f}MB\")\n    print(f\"\u6700\u7ec8\u5185\u5b58: {final_memory:.1f}MB\")\n    print(f\"\u5185\u5b58\u589e\u957f: {memory_growth:.1f}MB\")\n\n# \u6d4b\u8bd5\u7ed3\u679c\n# \u521d\u59cb\u5185\u5b58: 45.2MB\n# \u6700\u7ec8\u5185\u5b58: 47.0MB\n# \u5185\u5b58\u589e\u957f: 1.8MB \u2705\n</code></pre>"},{"location":"performance/#_9","title":"\ud83d\udcca \u6027\u80fd\u5bf9\u6bd4\u6d4b\u8bd5","text":"<p>\u6211\u4eec\u8fdb\u884c\u4e86\u5168\u9762\u7684\u6027\u80fd\u5bf9\u6bd4\u6d4b\u8bd5\uff0c\u5c06 HarborAI \u4e0e\u76f4\u63a5\u4f7f\u7528 Agently \u8fdb\u884c\u5bf9\u6bd4\uff1a</p>"},{"location":"performance/#_10","title":"\u6d4b\u8bd5\u73af\u5883","text":"<ul> <li>CPU: Intel i7-12700K</li> <li>\u5185\u5b58: 32GB DDR4</li> <li>Python: 3.11.5</li> <li>\u6d4b\u8bd5\u6a21\u578b: deepseek-chat</li> <li>\u6d4b\u8bd5\u573a\u666f: \u7ed3\u6784\u5316\u8f93\u51fa</li> </ul>"},{"location":"performance/#_11","title":"\u6d4b\u8bd5\u7ed3\u679c","text":"\u6a21\u5f0f \u5e73\u5747\u54cd\u5e94\u65f6\u95f4 \u76f8\u5bf9\u6027\u80fd \u6210\u529f\u7387 \u5185\u5b58\u4f7f\u7528 CPU\u4f7f\u7528\u7387 Agently \u57fa\u51c6 4.37s 1.00x 100% \u57fa\u51c6 \u57fa\u51c6 HarborAI FAST 4.47s 0.98x 100% -15% -10% HarborAI BALANCED 4.62s 0.95x 100% -10% -5% HarborAI FULL 4.92s 0.89x 100% +5% +2%"},{"location":"performance/#_12","title":"\u6027\u80fd\u5206\u6790","text":"<pre><code># \u8be6\u7ec6\u6027\u80fd\u6d4b\u8bd5\u4ee3\u7801\nimport asyncio\nimport time\nimport statistics\nfrom typing import List\n\nasync def performance_benchmark():\n    \"\"\"\u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5\"\"\"\n\n    test_cases = [\n        \"\u63d0\u53d6\u4fe1\u606f\uff1a\u5f20\u4e09\uff0c30\u5c81\uff0c\u8f6f\u4ef6\u5de5\u7a0b\u5e08\",\n        \"\u5206\u6790\u6570\u636e\uff1a\u9500\u552e\u989d\u589e\u957f15%\uff0c\u7528\u6237\u6ee1\u610f\u5ea692%\",\n        \"\u603b\u7ed3\u62a5\u544a\uff1a\u9879\u76ee\u8fdb\u5ea6\u6b63\u5e38\uff0c\u9884\u8ba1\u4e0b\u6708\u5b8c\u6210\",\n    ]\n\n    # \u6d4b\u8bd5\u4e0d\u540c\u6027\u80fd\u6a21\u5f0f\n    modes = [\"fast\", \"balanced\", \"full\"]\n    results = {}\n\n    for mode in modes:\n        client = FastHarborAI(\n            api_key=\"test-key\",\n            performance_mode=mode\n        )\n\n        latencies = []\n\n        for _ in range(10):  # \u6bcf\u4e2a\u6a21\u5f0f\u6d4b\u8bd510\u6b21\n            for test_case in test_cases:\n                start_time = time.time()\n\n                # \u6a21\u62dfAPI\u8c03\u7528\n                await client.mock_structured_output(test_case)\n\n                latency = time.time() - start_time\n                latencies.append(latency)\n\n        results[mode] = {\n            'mean': statistics.mean(latencies),\n            'median': statistics.median(latencies),\n            'std': statistics.stdev(latencies),\n            'min': min(latencies),\n            'max': max(latencies)\n        }\n\n    return results\n\n# \u8fd0\u884c\u6d4b\u8bd5\n# results = asyncio.run(performance_benchmark())\n</code></pre>"},{"location":"performance/#_13","title":"\u5185\u5b58\u4f18\u5316","text":""},{"location":"performance/#_14","title":"\ud83e\udde0 \u5185\u5b58\u7ba1\u7406\u7b56\u7565","text":"<p>HarborAI \u5b9e\u73b0\u4e86\u591a\u5c42\u6b21\u7684\u5185\u5b58\u4f18\u5316\uff1a</p>"},{"location":"performance/#1","title":"1. \u5bf9\u8c61\u6c60\u6280\u672f","text":"<pre><code>\"\"\"\n\u5bf9\u8c61\u6c60\u5b9e\u73b0\uff0c\u590d\u7528\u9891\u7e41\u521b\u5efa\u7684\u5bf9\u8c61\n\"\"\"\nclass ObjectPool:\n    def __init__(self, max_size: int = 200):\n        self.max_size = max_size\n        self.pool = {}\n        self.usage_count = {}\n\n    def get_object(self, obj_type: str):\n        \"\"\"\u4ece\u5bf9\u8c61\u6c60\u83b7\u53d6\u5bf9\u8c61\"\"\"\n        if obj_type in self.pool and self.pool[obj_type]:\n            obj = self.pool[obj_type].pop()\n            self.usage_count[obj_type] = self.usage_count.get(obj_type, 0) + 1\n            return obj\n\n        # \u521b\u5efa\u65b0\u5bf9\u8c61\n        return self._create_object(obj_type)\n\n    def return_object(self, obj_type: str, obj):\n        \"\"\"\u5f52\u8fd8\u5bf9\u8c61\u5230\u6c60\u4e2d\"\"\"\n        if obj_type not in self.pool:\n            self.pool[obj_type] = []\n\n        if len(self.pool[obj_type]) &lt; self.max_size:\n            # \u91cd\u7f6e\u5bf9\u8c61\u72b6\u6001\n            self._reset_object(obj)\n            self.pool[obj_type].append(obj)\n</code></pre>"},{"location":"performance/#2","title":"2. \u5f31\u5f15\u7528\u673a\u5236","text":"<pre><code>\"\"\"\n\u5f31\u5f15\u7528\u7ba1\u7406\u5668\uff0c\u907f\u514d\u5faa\u73af\u5f15\u7528\n\"\"\"\nimport weakref\nfrom typing import Dict, Any\n\nclass WeakReferenceManager:\n    def __init__(self):\n        self.refs: Dict[str, weakref.ref] = {}\n        self.cleanup_callbacks = {}\n\n    def add_reference(self, key: str, obj: Any, cleanup_callback=None):\n        \"\"\"\u6dfb\u52a0\u5f31\u5f15\u7528\"\"\"\n        def cleanup(ref):\n            if cleanup_callback:\n                cleanup_callback()\n            self.refs.pop(key, None)\n\n        self.refs[key] = weakref.ref(obj, cleanup)\n        if cleanup_callback:\n            self.cleanup_callbacks[key] = cleanup_callback\n\n    def get_reference(self, key: str):\n        \"\"\"\u83b7\u53d6\u5f31\u5f15\u7528\u5bf9\u8c61\"\"\"\n        ref = self.refs.get(key)\n        return ref() if ref else None\n</code></pre>"},{"location":"performance/#3","title":"3. \u667a\u80fd\u5783\u573e\u56de\u6536","text":"<pre><code>\"\"\"\n\u667a\u80fd\u5783\u573e\u56de\u6536\u8c03\u5ea6\u5668\n\"\"\"\nimport gc\nimport threading\nimport time\n\nclass GarbageCollectionScheduler:\n    def __init__(self, interval: int = 300):  # 5\u5206\u949f\n        self.interval = interval\n        self.running = False\n        self.thread = None\n        self.memory_threshold = 100 * 1024 * 1024  # 100MB\n\n    def start(self):\n        \"\"\"\u542f\u52a8GC\u8c03\u5ea6\u5668\"\"\"\n        if not self.running:\n            self.running = True\n            self.thread = threading.Thread(target=self._gc_loop)\n            self.thread.daemon = True\n            self.thread.start()\n\n    def _gc_loop(self):\n        \"\"\"GC\u5faa\u73af\"\"\"\n        while self.running:\n            try:\n                # \u68c0\u67e5\u5185\u5b58\u4f7f\u7528\n                if self._should_collect():\n                    collected = gc.collect()\n                    print(f\"GC collected {collected} objects\")\n\n                time.sleep(self.interval)\n            except Exception as e:\n                print(f\"GC error: {e}\")\n\n    def _should_collect(self) -&gt; bool:\n        \"\"\"\u5224\u65ad\u662f\u5426\u9700\u8981\u6267\u884cGC\"\"\"\n        import psutil\n        process = psutil.Process()\n        memory_usage = process.memory_info().rss\n        return memory_usage &gt; self.memory_threshold\n</code></pre>"},{"location":"performance/#_15","title":"\ud83d\udcc8 \u5185\u5b58\u4f18\u5316\u6548\u679c","text":""},{"location":"performance/#_16","title":"\u4f18\u5316\u524d\u540e\u5bf9\u6bd4","text":"<pre><code>def memory_optimization_comparison():\n    \"\"\"\u5185\u5b58\u4f18\u5316\u6548\u679c\u5bf9\u6bd4\"\"\"\n\n    import psutil\n    import os\n\n    process = psutil.Process(os.getpid())\n\n    # \u6d4b\u8bd5\u573a\u666f\uff1a\u521b\u5efa1000\u4e2a\u5ba2\u6237\u7aef\u5b9e\u4f8b\n    print(\"=== \u5185\u5b58\u4f18\u5316\u5bf9\u6bd4\u6d4b\u8bd5 ===\")\n\n    # \u4f18\u5316\u524d\uff08\u6807\u51c6\u6a21\u5f0f\uff09\n    initial_memory = process.memory_info().rss / 1024 / 1024\n\n    standard_clients = []\n    for i in range(1000):\n        client = HarborAI(api_key=f\"test-key-{i}\")\n        standard_clients.append(client)\n\n    standard_memory = process.memory_info().rss / 1024 / 1024\n    standard_growth = standard_memory - initial_memory\n\n    # \u6e05\u7406\n    del standard_clients\n    gc.collect()\n\n    # \u4f18\u5316\u540e\uff08\u5feb\u901f\u6a21\u5f0f\uff09\n    reset_memory = process.memory_info().rss / 1024 / 1024\n\n    fast_clients = []\n    for i in range(1000):\n        client = FastHarborAI(\n            api_key=f\"test-key-{i}\",\n            enable_memory_optimization=True\n        )\n        fast_clients.append(client)\n\n    fast_memory = process.memory_info().rss / 1024 / 1024\n    fast_growth = fast_memory - reset_memory\n\n    print(f\"\u6807\u51c6\u6a21\u5f0f\u5185\u5b58\u589e\u957f: {standard_growth:.1f}MB\")\n    print(f\"\u4f18\u5316\u6a21\u5f0f\u5185\u5b58\u589e\u957f: {fast_growth:.1f}MB\")\n    print(f\"\u5185\u5b58\u8282\u7701: {((standard_growth - fast_growth) / standard_growth * 100):.1f}%\")\n\n# \u6d4b\u8bd5\u7ed3\u679c\u793a\u4f8b\n# \u6807\u51c6\u6a21\u5f0f\u5185\u5b58\u589e\u957f: 156.8MB\n# \u4f18\u5316\u6a21\u5f0f\u5185\u5b58\u589e\u957f: 89.2MB\n# \u5185\u5b58\u8282\u7701: 43.1%\n</code></pre>"},{"location":"performance/#_17","title":"\u5e76\u53d1\u4f18\u5316","text":""},{"location":"performance/#_18","title":"\u26a1 \u5f02\u6b65\u67b6\u6784\u8bbe\u8ba1","text":"<p>HarborAI \u91c7\u7528\u5168\u5f02\u6b65\u67b6\u6784\uff0c\u652f\u6301\u9ad8\u5e76\u53d1\u5904\u7406\uff1a</p>"},{"location":"performance/#1_1","title":"1. \u5f02\u6b65\u5ba2\u6237\u7aef\u6c60","text":"<pre><code>\"\"\"\n\u5f02\u6b65\u5ba2\u6237\u7aef\u6c60\u7ba1\u7406\u5668\n\"\"\"\nimport asyncio\nfrom typing import Dict, List\nimport httpx\n\nclass AsyncClientPool:\n    def __init__(self, max_connections: int = 100):\n        self.max_connections = max_connections\n        self.pools: Dict[str, httpx.AsyncClient] = {}\n        self.semaphore = asyncio.Semaphore(max_connections)\n\n    async def get_client(self, provider: str) -&gt; httpx.AsyncClient:\n        \"\"\"\u83b7\u53d6\u5f02\u6b65\u5ba2\u6237\u7aef\"\"\"\n        if provider not in self.pools:\n            self.pools[provider] = httpx.AsyncClient(\n                limits=httpx.Limits(\n                    max_connections=self.max_connections,\n                    max_keepalive_connections=20\n                ),\n                timeout=httpx.Timeout(30.0)\n            )\n\n        return self.pools[provider]\n\n    async def close_all(self):\n        \"\"\"\u5173\u95ed\u6240\u6709\u5ba2\u6237\u7aef\"\"\"\n        for client in self.pools.values():\n            await client.aclose()\n        self.pools.clear()\n</code></pre>"},{"location":"performance/#2_1","title":"2. \u5e76\u53d1\u63a7\u5236","text":"<pre><code>\"\"\"\n\u5e76\u53d1\u63a7\u5236\u5668\n\"\"\"\nimport asyncio\nfrom typing import List, Callable, Any\n\nclass ConcurrencyController:\n    def __init__(self, max_concurrent: int = 50):\n        self.semaphore = asyncio.Semaphore(max_concurrent)\n        self.rate_limiter = RateLimiter(requests_per_second=100)\n\n    async def execute_concurrent(\n        self, \n        tasks: List[Callable], \n        *args, \n        **kwargs\n    ) -&gt; List[Any]:\n        \"\"\"\u5e76\u53d1\u6267\u884c\u4efb\u52a1\"\"\"\n\n        async def controlled_task(task):\n            async with self.semaphore:\n                await self.rate_limiter.acquire()\n                return await task(*args, **kwargs)\n\n        # \u521b\u5efa\u5e76\u53d1\u4efb\u52a1\n        concurrent_tasks = [\n            controlled_task(task) for task in tasks\n        ]\n\n        # \u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210\n        return await asyncio.gather(*concurrent_tasks)\n</code></pre>"},{"location":"performance/#3_1","title":"3. \u8fde\u63a5\u6c60\u4f18\u5316","text":"<pre><code>\"\"\"\n\u8fde\u63a5\u6c60\u4f18\u5316\u914d\u7f6e\n\"\"\"\nconnection_config = {\n    \"max_connections\": 100,        # \u6700\u5927\u8fde\u63a5\u6570\n    \"max_keepalive_connections\": 20,  # \u6700\u5927\u4fdd\u6301\u8fde\u63a5\u6570\n    \"keepalive_expiry\": 30,        # \u8fde\u63a5\u4fdd\u6301\u65f6\u95f4\n    \"timeout\": {\n        \"connect\": 5.0,            # \u8fde\u63a5\u8d85\u65f6\n        \"read\": 30.0,              # \u8bfb\u53d6\u8d85\u65f6\n        \"write\": 10.0,             # \u5199\u5165\u8d85\u65f6\n        \"pool\": 5.0                # \u6c60\u8d85\u65f6\n    }\n}\n</code></pre>"},{"location":"performance/#_19","title":"\ud83d\udcca \u5e76\u53d1\u6027\u80fd\u6d4b\u8bd5","text":"<pre><code>import asyncio\nimport time\nimport aiohttp\nfrom concurrent.futures import ThreadPoolExecutor\n\nasync def concurrent_benchmark():\n    \"\"\"\u5e76\u53d1\u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5\"\"\"\n\n    # \u6d4b\u8bd5\u53c2\u6570\n    concurrent_levels = [10, 50, 100, 200, 500]\n    requests_per_level = 100\n\n    results = {}\n\n    for concurrent in concurrent_levels:\n        print(f\"\u6d4b\u8bd5\u5e76\u53d1\u7ea7\u522b: {concurrent}\")\n\n        # \u521b\u5efa\u5ba2\u6237\u7aef\n        client = FastHarborAI(\n            api_key=\"test-key\",\n            performance_mode=\"fast\"\n        )\n\n        # \u521b\u5efa\u4efb\u52a1\n        tasks = []\n        for i in range(requests_per_level):\n            task = client.mock_chat_completion(\n                model=\"deepseek-chat\",\n                messages=[{\"role\": \"user\", \"content\": f\"Test {i}\"}]\n            )\n            tasks.append(task)\n\n        # \u63a7\u5236\u5e76\u53d1\u6570\n        semaphore = asyncio.Semaphore(concurrent)\n\n        async def controlled_task(task):\n            async with semaphore:\n                return await task\n\n        controlled_tasks = [controlled_task(task) for task in tasks]\n\n        # \u6267\u884c\u6d4b\u8bd5\n        start_time = time.time()\n        results_list = await asyncio.gather(*controlled_tasks)\n        end_time = time.time()\n\n        # \u8ba1\u7b97\u6307\u6807\n        total_time = end_time - start_time\n        throughput = requests_per_level / total_time\n        avg_latency = total_time / requests_per_level\n\n        results[concurrent] = {\n            'throughput': throughput,\n            'avg_latency': avg_latency,\n            'total_time': total_time\n        }\n\n        print(f\"  \u541e\u5410\u91cf: {throughput:.1f} req/s\")\n        print(f\"  \u5e73\u5747\u5ef6\u8fdf: {avg_latency*1000:.1f}ms\")\n        print(f\"  \u603b\u65f6\u95f4: {total_time:.1f}s\")\n        print()\n\n    return results\n\n# \u6d4b\u8bd5\u7ed3\u679c\u793a\u4f8b\n# \u6d4b\u8bd5\u5e76\u53d1\u7ea7\u522b: 10\n#   \u541e\u5410\u91cf: 45.2 req/s\n#   \u5e73\u5747\u5ef6\u8fdf: 221.2ms\n#   \u603b\u65f6\u95f4: 2.2s\n\n# \u6d4b\u8bd5\u5e76\u53d1\u7ea7\u522b: 50\n#   \u541e\u5410\u91cf: 156.8 req/s\n#   \u5e73\u5747\u5ef6\u8fdf: 318.9ms\n#   \u603b\u65f6\u95f4: 0.6s\n\n# \u6d4b\u8bd5\u5e76\u53d1\u7ea7\u522b: 100\n#   \u541e\u5410\u91cf: 287.3 req/s\n#   \u5e73\u5747\u5ef6\u8fdf: 348.1ms\n#   \u603b\u65f6\u95f4: 0.3s\n</code></pre>"},{"location":"performance/#_20","title":"\u7f13\u5b58\u4f18\u5316","text":""},{"location":"performance/#_21","title":"\ud83d\ude80 \u591a\u5c42\u7f13\u5b58\u67b6\u6784","text":"<p>HarborAI \u5b9e\u73b0\u4e86\u591a\u5c42\u7f13\u5b58\u7b56\u7565\uff1a</p>"},{"location":"performance/#1-l1","title":"1. L1 \u7f13\u5b58\uff08\u5185\u5b58\u7f13\u5b58\uff09","text":"<pre><code>\"\"\"\nL1 \u5185\u5b58\u7f13\u5b58\u5b9e\u73b0\n\"\"\"\nimport time\nfrom typing import Any, Optional\nfrom collections import OrderedDict\n\nclass L1Cache:\n    def __init__(self, max_size: int = 1000, ttl: int = 3600):\n        self.max_size = max_size\n        self.ttl = ttl\n        self.cache = OrderedDict()\n        self.timestamps = {}\n\n    def get(self, key: str) -&gt; Optional[Any]:\n        \"\"\"\u83b7\u53d6\u7f13\u5b58\u503c\"\"\"\n        if key not in self.cache:\n            return None\n\n        # \u68c0\u67e5TTL\n        if time.time() - self.timestamps[key] &gt; self.ttl:\n            self.delete(key)\n            return None\n\n        # LRU\u66f4\u65b0\n        self.cache.move_to_end(key)\n        return self.cache[key]\n\n    def set(self, key: str, value: Any):\n        \"\"\"\u8bbe\u7f6e\u7f13\u5b58\u503c\"\"\"\n        if key in self.cache:\n            self.cache.move_to_end(key)\n        else:\n            if len(self.cache) &gt;= self.max_size:\n                # \u5220\u9664\u6700\u65e7\u7684\u9879\n                oldest_key = next(iter(self.cache))\n                self.delete(oldest_key)\n\n        self.cache[key] = value\n        self.timestamps[key] = time.time()\n\n    def delete(self, key: str):\n        \"\"\"\u5220\u9664\u7f13\u5b58\u9879\"\"\"\n        self.cache.pop(key, None)\n        self.timestamps.pop(key, None)\n</code></pre>"},{"location":"performance/#2-l2-redis","title":"2. L2 \u7f13\u5b58\uff08Redis\u7f13\u5b58\uff09","text":"<pre><code>\"\"\"\nL2 Redis\u7f13\u5b58\u5b9e\u73b0\n\"\"\"\nimport redis\nimport json\nimport pickle\nfrom typing import Any, Optional\n\nclass L2Cache:\n    def __init__(self, redis_url: str = \"redis://localhost:6379/0\"):\n        self.redis_client = redis.from_url(redis_url)\n        self.default_ttl = 3600\n\n    async def get(self, key: str) -&gt; Optional[Any]:\n        \"\"\"\u83b7\u53d6\u7f13\u5b58\u503c\"\"\"\n        try:\n            data = await self.redis_client.get(key)\n            if data:\n                return pickle.loads(data)\n        except Exception as e:\n            print(f\"Redis get error: {e}\")\n        return None\n\n    async def set(self, key: str, value: Any, ttl: int = None):\n        \"\"\"\u8bbe\u7f6e\u7f13\u5b58\u503c\"\"\"\n        try:\n            data = pickle.dumps(value)\n            await self.redis_client.setex(\n                key, \n                ttl or self.default_ttl, \n                data\n            )\n        except Exception as e:\n            print(f\"Redis set error: {e}\")\n\n    async def delete(self, key: str):\n        \"\"\"\u5220\u9664\u7f13\u5b58\u9879\"\"\"\n        try:\n            await self.redis_client.delete(key)\n        except Exception as e:\n            print(f\"Redis delete error: {e}\")\n</code></pre>"},{"location":"performance/#3_2","title":"3. \u667a\u80fd\u7f13\u5b58\u7ba1\u7406\u5668","text":"<pre><code>\"\"\"\n\u667a\u80fd\u7f13\u5b58\u7ba1\u7406\u5668\n\"\"\"\nclass SmartCacheManager:\n    def __init__(self):\n        self.l1_cache = L1Cache(max_size=1000)\n        self.l2_cache = L2Cache()\n        self.hit_stats = {'l1': 0, 'l2': 0, 'miss': 0}\n\n    async def get(self, key: str) -&gt; Optional[Any]:\n        \"\"\"\u667a\u80fd\u7f13\u5b58\u83b7\u53d6\"\"\"\n        # \u5148\u67e5L1\u7f13\u5b58\n        value = self.l1_cache.get(key)\n        if value is not None:\n            self.hit_stats['l1'] += 1\n            return value\n\n        # \u518d\u67e5L2\u7f13\u5b58\n        value = await self.l2_cache.get(key)\n        if value is not None:\n            self.hit_stats['l2'] += 1\n            # \u56de\u5199\u5230L1\u7f13\u5b58\n            self.l1_cache.set(key, value)\n            return value\n\n        self.hit_stats['miss'] += 1\n        return None\n\n    async def set(self, key: str, value: Any):\n        \"\"\"\u667a\u80fd\u7f13\u5b58\u8bbe\u7f6e\"\"\"\n        # \u540c\u65f6\u5199\u5165L1\u548cL2\u7f13\u5b58\n        self.l1_cache.set(key, value)\n        await self.l2_cache.set(key, value)\n\n    def get_hit_rate(self) -&gt; dict:\n        \"\"\"\u83b7\u53d6\u7f13\u5b58\u547d\u4e2d\u7387\"\"\"\n        total = sum(self.hit_stats.values())\n        if total == 0:\n            return {'l1': 0, 'l2': 0, 'total': 0}\n\n        return {\n            'l1': self.hit_stats['l1'] / total,\n            'l2': self.hit_stats['l2'] / total,\n            'total': (self.hit_stats['l1'] + self.hit_stats['l2']) / total\n        }\n</code></pre>"},{"location":"performance/#_22","title":"\ud83d\udcc8 \u7f13\u5b58\u6027\u80fd\u6d4b\u8bd5","text":"<pre><code>async def cache_performance_test():\n    \"\"\"\u7f13\u5b58\u6027\u80fd\u6d4b\u8bd5\"\"\"\n\n    cache_manager = SmartCacheManager()\n\n    # \u6d4b\u8bd5\u6570\u636e\n    test_keys = [f\"test_key_{i}\" for i in range(1000)]\n    test_values = [f\"test_value_{i}\" * 100 for i in range(1000)]  # \u8f83\u5927\u7684\u503c\n\n    # \u5199\u5165\u6d4b\u8bd5\n    print(\"=== \u7f13\u5b58\u5199\u5165\u6027\u80fd\u6d4b\u8bd5 ===\")\n    start_time = time.time()\n\n    for key, value in zip(test_keys, test_values):\n        await cache_manager.set(key, value)\n\n    write_time = time.time() - start_time\n    print(f\"\u5199\u51651000\u4e2a\u9879\u76ee\u8017\u65f6: {write_time:.2f}s\")\n    print(f\"\u5e73\u5747\u5199\u5165\u65f6\u95f4: {write_time/1000*1000:.2f}ms/item\")\n\n    # \u8bfb\u53d6\u6d4b\u8bd5\n    print(\"\\n=== \u7f13\u5b58\u8bfb\u53d6\u6027\u80fd\u6d4b\u8bd5 ===\")\n\n    # \u7b2c\u4e00\u6b21\u8bfb\u53d6\uff08L1\u7f13\u5b58\u547d\u4e2d\uff09\n    start_time = time.time()\n    for key in test_keys:\n        value = await cache_manager.get(key)\n    l1_read_time = time.time() - start_time\n\n    # \u6e05\u7a7aL1\u7f13\u5b58\uff0c\u6d4b\u8bd5L2\u7f13\u5b58\n    cache_manager.l1_cache.cache.clear()\n\n    start_time = time.time()\n    for key in test_keys[:100]:  # \u6d4b\u8bd5100\u4e2a\n        value = await cache_manager.get(key)\n    l2_read_time = time.time() - start_time\n\n    print(f\"L1\u7f13\u5b58\u8bfb\u53d61000\u9879\u8017\u65f6: {l1_read_time:.2f}s\")\n    print(f\"L1\u5e73\u5747\u8bfb\u53d6\u65f6\u95f4: {l1_read_time/1000*1000:.2f}ms/item\")\n    print(f\"L2\u7f13\u5b58\u8bfb\u53d6100\u9879\u8017\u65f6: {l2_read_time:.2f}s\")\n    print(f\"L2\u5e73\u5747\u8bfb\u53d6\u65f6\u95f4: {l2_read_time/100*1000:.2f}ms/item\")\n\n    # \u7f13\u5b58\u547d\u4e2d\u7387\n    hit_rates = cache_manager.get_hit_rate()\n    print(f\"\\n\u7f13\u5b58\u547d\u4e2d\u7387:\")\n    print(f\"  L1\u547d\u4e2d\u7387: {hit_rates['l1']:.1%}\")\n    print(f\"  L2\u547d\u4e2d\u7387: {hit_rates['l2']:.1%}\")\n    print(f\"  \u603b\u547d\u4e2d\u7387: {hit_rates['total']:.1%}\")\n\n# \u6d4b\u8bd5\u7ed3\u679c\u793a\u4f8b\n# === \u7f13\u5b58\u5199\u5165\u6027\u80fd\u6d4b\u8bd5 ===\n# \u5199\u51651000\u4e2a\u9879\u76ee\u8017\u65f6: 0.45s\n# \u5e73\u5747\u5199\u5165\u65f6\u95f4: 0.45ms/item\n\n# === \u7f13\u5b58\u8bfb\u53d6\u6027\u80fd\u6d4b\u8bd5 ===\n# L1\u7f13\u5b58\u8bfb\u53d61000\u9879\u8017\u65f6: 0.02s\n# L1\u5e73\u5747\u8bfb\u53d6\u65f6\u95f4: 0.02ms/item\n# L2\u7f13\u5b58\u8bfb\u53d6100\u9879\u8017\u65f6: 0.15s\n# L2\u5e73\u5747\u8bfb\u53d6\u65f6\u95f4: 1.50ms/item\n\n# \u7f13\u5b58\u547d\u4e2d\u7387:\n#   L1\u547d\u4e2d\u7387: 90.9%\n#   L2\u547d\u4e2d\u7387: 8.2%\n#   \u603b\u547d\u4e2d\u7387: 99.1%\n</code></pre>"},{"location":"performance/#_23","title":"\u6027\u80fd\u76d1\u63a7","text":""},{"location":"performance/#_24","title":"\ud83d\udcca \u5b9e\u65f6\u6027\u80fd\u76d1\u63a7","text":"<p>HarborAI \u63d0\u4f9b\u5b8c\u6574\u7684\u6027\u80fd\u76d1\u63a7\u4f53\u7cfb\uff1a</p>"},{"location":"performance/#1_2","title":"1. \u6027\u80fd\u6307\u6807\u6536\u96c6","text":"<pre><code>\"\"\"\n\u6027\u80fd\u6307\u6807\u6536\u96c6\u5668\n\"\"\"\nimport time\nimport psutil\nimport threading\nfrom collections import defaultdict, deque\nfrom typing import Dict, Any\n\nclass PerformanceMetrics:\n    def __init__(self, window_size: int = 1000):\n        self.window_size = window_size\n        self.metrics = defaultdict(lambda: deque(maxlen=window_size))\n        self.counters = defaultdict(int)\n        self.lock = threading.Lock()\n\n    def record_latency(self, operation: str, latency: float):\n        \"\"\"\u8bb0\u5f55\u5ef6\u8fdf\u6307\u6807\"\"\"\n        with self.lock:\n            self.metrics[f\"{operation}_latency\"].append(latency)\n\n    def record_throughput(self, operation: str, count: int = 1):\n        \"\"\"\u8bb0\u5f55\u541e\u5410\u91cf\u6307\u6807\"\"\"\n        with self.lock:\n            self.counters[f\"{operation}_count\"] += count\n\n    def record_memory_usage(self):\n        \"\"\"\u8bb0\u5f55\u5185\u5b58\u4f7f\u7528\"\"\"\n        process = psutil.Process()\n        memory_mb = process.memory_info().rss / 1024 / 1024\n\n        with self.lock:\n            self.metrics[\"memory_usage\"].append(memory_mb)\n\n    def get_statistics(self, operation: str) -&gt; Dict[str, Any]:\n        \"\"\"\u83b7\u53d6\u7edf\u8ba1\u4fe1\u606f\"\"\"\n        with self.lock:\n            latencies = list(self.metrics[f\"{operation}_latency\"])\n\n            if not latencies:\n                return {}\n\n            return {\n                'count': len(latencies),\n                'mean': sum(latencies) / len(latencies),\n                'min': min(latencies),\n                'max': max(latencies),\n                'p50': self._percentile(latencies, 0.5),\n                'p95': self._percentile(latencies, 0.95),\n                'p99': self._percentile(latencies, 0.99)\n            }\n\n    def _percentile(self, data: list, percentile: float) -&gt; float:\n        \"\"\"\u8ba1\u7b97\u767e\u5206\u4f4d\u6570\"\"\"\n        sorted_data = sorted(data)\n        index = int(len(sorted_data) * percentile)\n        return sorted_data[min(index, len(sorted_data) - 1)]\n</code></pre>"},{"location":"performance/#2_2","title":"2. \u5b9e\u65f6\u76d1\u63a7\u4eea\u8868\u677f","text":"<pre><code>\"\"\"\n\u5b9e\u65f6\u76d1\u63a7\u4eea\u8868\u677f\n\"\"\"\nclass MonitoringDashboard:\n    def __init__(self, metrics: PerformanceMetrics):\n        self.metrics = metrics\n        self.running = False\n        self.update_interval = 5  # 5\u79d2\u66f4\u65b0\u4e00\u6b21\n\n    def start(self):\n        \"\"\"\u542f\u52a8\u76d1\u63a7\u4eea\u8868\u677f\"\"\"\n        self.running = True\n        threading.Thread(target=self._update_loop, daemon=True).start()\n\n    def stop(self):\n        \"\"\"\u505c\u6b62\u76d1\u63a7\u4eea\u8868\u677f\"\"\"\n        self.running = False\n\n    def _update_loop(self):\n        \"\"\"\u66f4\u65b0\u5faa\u73af\"\"\"\n        while self.running:\n            try:\n                self._update_display()\n                time.sleep(self.update_interval)\n            except Exception as e:\n                print(f\"\u76d1\u63a7\u66f4\u65b0\u9519\u8bef: {e}\")\n\n    def _update_display(self):\n        \"\"\"\u66f4\u65b0\u663e\u793a\"\"\"\n        # \u6e05\u5c4f\n        import os\n        os.system('cls' if os.name == 'nt' else 'clear')\n\n        print(\"\ud83d\ude80 HarborAI \u6027\u80fd\u76d1\u63a7\u4eea\u8868\u677f\")\n        print(\"=\" * 50)\n\n        # API\u8c03\u7528\u7edf\u8ba1\n        api_stats = self.metrics.get_statistics(\"api_call\")\n        if api_stats:\n            print(f\"\ud83d\udcca API\u8c03\u7528\u7edf\u8ba1:\")\n            print(f\"  \u603b\u8c03\u7528\u6b21\u6570: {api_stats['count']}\")\n            print(f\"  \u5e73\u5747\u5ef6\u8fdf: {api_stats['mean']*1000:.1f}ms\")\n            print(f\"  P95\u5ef6\u8fdf: {api_stats['p95']*1000:.1f}ms\")\n            print(f\"  P99\u5ef6\u8fdf: {api_stats['p99']*1000:.1f}ms\")\n\n        # \u5185\u5b58\u4f7f\u7528\n        memory_data = list(self.metrics.metrics[\"memory_usage\"])\n        if memory_data:\n            current_memory = memory_data[-1]\n            print(f\"\\n\ud83d\udcbe \u5185\u5b58\u4f7f\u7528:\")\n            print(f\"  \u5f53\u524d\u5185\u5b58: {current_memory:.1f}MB\")\n            if len(memory_data) &gt; 1:\n                memory_trend = memory_data[-1] - memory_data[0]\n                trend_symbol = \"\ud83d\udcc8\" if memory_trend &gt; 0 else \"\ud83d\udcc9\"\n                print(f\"  \u5185\u5b58\u8d8b\u52bf: {trend_symbol} {memory_trend:+.1f}MB\")\n\n        # \u7f13\u5b58\u7edf\u8ba1\n        print(f\"\\n\ud83d\ude80 \u7f13\u5b58\u7edf\u8ba1:\")\n        # \u8fd9\u91cc\u53ef\u4ee5\u6dfb\u52a0\u7f13\u5b58\u547d\u4e2d\u7387\u7b49\u4fe1\u606f\n\n        print(f\"\\n\u23f0 \u66f4\u65b0\u65f6\u95f4: {time.strftime('%Y-%m-%d %H:%M:%S')}\")\n</code></pre>"},{"location":"performance/#3_3","title":"3. \u6027\u80fd\u544a\u8b66\u7cfb\u7edf","text":"<pre><code>\"\"\"\n\u6027\u80fd\u544a\u8b66\u7cfb\u7edf\n\"\"\"\nclass PerformanceAlerting:\n    def __init__(self, metrics: PerformanceMetrics):\n        self.metrics = metrics\n        self.thresholds = {\n            'latency_p95': 5.0,      # P95\u5ef6\u8fdf\u9608\u503c\uff08\u79d2\uff09\n            'memory_usage': 500.0,    # \u5185\u5b58\u4f7f\u7528\u9608\u503c\uff08MB\uff09\n            'error_rate': 0.05        # \u9519\u8bef\u7387\u9608\u503c\uff085%\uff09\n        }\n        self.alert_callbacks = []\n\n    def add_alert_callback(self, callback):\n        \"\"\"\u6dfb\u52a0\u544a\u8b66\u56de\u8c03\"\"\"\n        self.alert_callbacks.append(callback)\n\n    def check_alerts(self):\n        \"\"\"\u68c0\u67e5\u544a\u8b66\u6761\u4ef6\"\"\"\n        alerts = []\n\n        # \u68c0\u67e5\u5ef6\u8fdf\u544a\u8b66\n        api_stats = self.metrics.get_statistics(\"api_call\")\n        if api_stats and api_stats.get('p95', 0) &gt; self.thresholds['latency_p95']:\n            alerts.append({\n                'type': 'latency',\n                'severity': 'warning',\n                'message': f\"P95\u5ef6\u8fdf\u8fc7\u9ad8: {api_stats['p95']*1000:.1f}ms\",\n                'value': api_stats['p95']\n            })\n\n        # \u68c0\u67e5\u5185\u5b58\u544a\u8b66\n        memory_data = list(self.metrics.metrics[\"memory_usage\"])\n        if memory_data and memory_data[-1] &gt; self.thresholds['memory_usage']:\n            alerts.append({\n                'type': 'memory',\n                'severity': 'warning',\n                'message': f\"\u5185\u5b58\u4f7f\u7528\u8fc7\u9ad8: {memory_data[-1]:.1f}MB\",\n                'value': memory_data[-1]\n            })\n\n        # \u89e6\u53d1\u544a\u8b66\u56de\u8c03\n        for alert in alerts:\n            for callback in self.alert_callbacks:\n                try:\n                    callback(alert)\n                except Exception as e:\n                    print(f\"\u544a\u8b66\u56de\u8c03\u9519\u8bef: {e}\")\n\n        return alerts\n</code></pre>"},{"location":"performance/#_25","title":"\u6700\u4f73\u5b9e\u8df5","text":""},{"location":"performance/#_26","title":"\ud83c\udfaf \u6027\u80fd\u4f18\u5316\u5efa\u8bae","text":""},{"location":"performance/#1_3","title":"1. \u9009\u62e9\u5408\u9002\u7684\u6027\u80fd\u6a21\u5f0f","text":"<pre><code># \u6839\u636e\u4f7f\u7528\u573a\u666f\u9009\u62e9\u6027\u80fd\u6a21\u5f0f\ndef choose_performance_mode(scenario: str) -&gt; str:\n    \"\"\"\u6839\u636e\u573a\u666f\u9009\u62e9\u6700\u4f73\u6027\u80fd\u6a21\u5f0f\"\"\"\n\n    mode_mapping = {\n        'high_frequency_production': 'fast',      # \u9ad8\u9891\u751f\u4ea7\u73af\u5883\n        'general_production': 'balanced',         # \u4e00\u822c\u751f\u4ea7\u73af\u5883\n        'development': 'full',                    # \u5f00\u53d1\u73af\u5883\n        'debugging': 'full',                      # \u8c03\u8bd5\u73af\u5883\n        'testing': 'balanced'                     # \u6d4b\u8bd5\u73af\u5883\n    }\n\n    return mode_mapping.get(scenario, 'balanced')\n\n# \u4f7f\u7528\u793a\u4f8b\nmode = choose_performance_mode('high_frequency_production')\nclient = FastHarborAI(\n    api_key=\"your-key\",\n    performance_mode=mode\n)\n</code></pre>"},{"location":"performance/#2_3","title":"2. \u5185\u5b58\u4f7f\u7528\u4f18\u5316","text":"<pre><code># \u5927\u6279\u91cf\u5904\u7406\u7684\u5185\u5b58\u4f18\u5316\u7b56\u7565\nasync def memory_efficient_batch_processing(\n    requests: list, \n    batch_size: int = 50\n):\n    \"\"\"\u5185\u5b58\u9ad8\u6548\u7684\u6279\u91cf\u5904\u7406\"\"\"\n\n    client = FastHarborAI(\n        api_key=\"your-key\",\n        enable_memory_optimization=True\n    )\n\n    results = []\n\n    for i in range(0, len(requests), batch_size):\n        batch = requests[i:i + batch_size]\n\n        # \u5904\u7406\u5f53\u524d\u6279\u6b21\n        batch_results = await process_batch(client, batch)\n        results.extend(batch_results)\n\n        # \u5b9a\u671f\u6e05\u7406\u5185\u5b58\n        if i % (batch_size * 10) == 0:  # \u6bcf10\u4e2a\u6279\u6b21\u6e05\u7406\u4e00\u6b21\n            if hasattr(client, 'cleanup_memory'):\n                client.cleanup_memory()\n\n            # \u5f3a\u5236\u5783\u573e\u56de\u6536\n            import gc\n            gc.collect()\n\n    return results\n</code></pre>"},{"location":"performance/#3_4","title":"3. \u7f13\u5b58\u7b56\u7565\u4f18\u5316","text":"<pre><code># \u667a\u80fd\u7f13\u5b58\u952e\u751f\u6210\ndef generate_cache_key(request: dict) -&gt; str:\n    \"\"\"\u751f\u6210\u667a\u80fd\u7f13\u5b58\u952e\"\"\"\n    import hashlib\n    import json\n\n    # \u63d0\u53d6\u5173\u952e\u53c2\u6570\n    key_params = {\n        'model': request.get('model'),\n        'messages': request.get('messages'),\n        'temperature': request.get('temperature', 0.7),\n        'max_tokens': request.get('max_tokens')\n    }\n\n    # \u751f\u6210\u54c8\u5e0c\n    key_str = json.dumps(key_params, sort_keys=True)\n    return hashlib.md5(key_str.encode()).hexdigest()\n\n# \u7f13\u5b58\u88c5\u9970\u5668\ndef cache_response(ttl: int = 3600):\n    \"\"\"\u54cd\u5e94\u7f13\u5b58\u88c5\u9970\u5668\"\"\"\n    def decorator(func):\n        async def wrapper(*args, **kwargs):\n            # \u751f\u6210\u7f13\u5b58\u952e\n            cache_key = generate_cache_key(kwargs)\n\n            # \u68c0\u67e5\u7f13\u5b58\n            cached_result = await cache_manager.get(cache_key)\n            if cached_result:\n                return cached_result\n\n            # \u6267\u884c\u51fd\u6570\n            result = await func(*args, **kwargs)\n\n            # \u7f13\u5b58\u7ed3\u679c\n            await cache_manager.set(cache_key, result, ttl)\n\n            return result\n        return wrapper\n    return decorator\n</code></pre>"},{"location":"performance/#4","title":"4. \u5e76\u53d1\u63a7\u5236\u4f18\u5316","text":"<pre><code># \u81ea\u9002\u5e94\u5e76\u53d1\u63a7\u5236\nclass AdaptiveConcurrencyController:\n    def __init__(self, initial_limit: int = 50):\n        self.current_limit = initial_limit\n        self.min_limit = 10\n        self.max_limit = 200\n        self.success_count = 0\n        self.error_count = 0\n        self.adjustment_threshold = 100\n\n    async def execute_with_adaptive_control(self, task):\n        \"\"\"\u4f7f\u7528\u81ea\u9002\u5e94\u5e76\u53d1\u63a7\u5236\u6267\u884c\u4efb\u52a1\"\"\"\n        semaphore = asyncio.Semaphore(self.current_limit)\n\n        async with semaphore:\n            try:\n                result = await task\n                self.success_count += 1\n                return result\n            except Exception as e:\n                self.error_count += 1\n                raise\n            finally:\n                # \u5b9a\u671f\u8c03\u6574\u5e76\u53d1\u9650\u5236\n                if (self.success_count + self.error_count) % self.adjustment_threshold == 0:\n                    self._adjust_concurrency_limit()\n\n    def _adjust_concurrency_limit(self):\n        \"\"\"\u8c03\u6574\u5e76\u53d1\u9650\u5236\"\"\"\n        total_requests = self.success_count + self.error_count\n        error_rate = self.error_count / total_requests if total_requests &gt; 0 else 0\n\n        if error_rate &lt; 0.01:  # \u9519\u8bef\u7387\u4f4e\uff0c\u589e\u52a0\u5e76\u53d1\n            self.current_limit = min(self.current_limit + 10, self.max_limit)\n        elif error_rate &gt; 0.05:  # \u9519\u8bef\u7387\u9ad8\uff0c\u51cf\u5c11\u5e76\u53d1\n            self.current_limit = max(self.current_limit - 10, self.min_limit)\n\n        # \u91cd\u7f6e\u8ba1\u6570\u5668\n        self.success_count = 0\n        self.error_count = 0\n</code></pre>"},{"location":"performance/#_27","title":"\ud83d\udcc8 \u6027\u80fd\u76d1\u63a7\u6700\u4f73\u5b9e\u8df5","text":"<pre><code># \u5b8c\u6574\u7684\u6027\u80fd\u76d1\u63a7\u8bbe\u7f6e\ndef setup_performance_monitoring():\n    \"\"\"\u8bbe\u7f6e\u5b8c\u6574\u7684\u6027\u80fd\u76d1\u63a7\"\"\"\n\n    # \u521b\u5efa\u6027\u80fd\u6307\u6807\u6536\u96c6\u5668\n    metrics = PerformanceMetrics()\n\n    # \u521b\u5efa\u76d1\u63a7\u4eea\u8868\u677f\n    dashboard = MonitoringDashboard(metrics)\n    dashboard.start()\n\n    # \u521b\u5efa\u544a\u8b66\u7cfb\u7edf\n    alerting = PerformanceAlerting(metrics)\n\n    # \u6dfb\u52a0\u544a\u8b66\u56de\u8c03\n    def alert_callback(alert):\n        print(f\"\ud83d\udea8 \u6027\u80fd\u544a\u8b66: {alert['message']}\")\n        # \u8fd9\u91cc\u53ef\u4ee5\u6dfb\u52a0\u90ae\u4ef6\u3001\u77ed\u4fe1\u7b49\u901a\u77e5\n\n    alerting.add_alert_callback(alert_callback)\n\n    # \u5b9a\u671f\u68c0\u67e5\u544a\u8b66\n    def check_alerts_periodically():\n        while True:\n            alerting.check_alerts()\n            time.sleep(60)  # \u6bcf\u5206\u949f\u68c0\u67e5\u4e00\u6b21\n\n    threading.Thread(target=check_alerts_periodically, daemon=True).start()\n\n    return metrics, dashboard, alerting\n</code></pre> <p>\u6027\u80fd\u62a5\u544a\u7248\u672c: v1.0.0 | \u6d4b\u8bd5\u65e5\u671f: 2025-01-25 | \u4e0b\u6b21\u66f4\u65b0: 2025-02-25</p>"},{"location":"test_refactoring_summary/","title":"\u6d4b\u8bd5\u76ee\u5f55\u91cd\u6784\u603b\u7ed3\u62a5\u544a","text":""},{"location":"test_refactoring_summary/#_2","title":"\u91cd\u6784\u6982\u8ff0","text":"<p>\u672c\u6b21\u91cd\u6784\u6210\u529f\u4f18\u5316\u4e86 HarborAI \u9879\u76ee\u7684\u6d4b\u8bd5\u76ee\u5f55\u7ed3\u6784\uff0c\u5220\u9664\u4e86\u91cd\u590d\u6587\u4ef6\uff0c\u5408\u5e76\u4e86\u76f8\u4f3c\u529f\u80fd\uff0c\u63d0\u5347\u4e86\u6d4b\u8bd5\u6548\u7387\u548c\u53ef\u7ef4\u62a4\u6027\u3002</p>"},{"location":"test_refactoring_summary/#_3","title":"\u6267\u884c\u6b65\u9aa4\u4e0e\u7ed3\u679c","text":""},{"location":"test_refactoring_summary/#_4","title":"\u7b2c\u4e00\u6b65\uff1a\u5220\u9664\u660e\u786e\u7684\u91cd\u590d\u6587\u4ef6\u548c\u4e34\u65f6\u6587\u4ef6 \u2705","text":"<p>\u5220\u9664\u7684\u6587\u4ef6\uff1a - <code>tests/performance/simple_performance_test.py</code> - \u57fa\u7840\u6027\u80fd\u6d4b\u8bd5\u91cd\u590d - <code>tests/performance/quick_performance_test.py</code> - \u5feb\u901f\u6027\u80fd\u6d4b\u8bd5\u91cd\u590d - <code>tests/performance/memory_leak_detector.py</code> - \u5185\u5b58\u6cc4\u6f0f\u68c0\u6d4b\u91cd\u590d - <code>tests/performance/concurrency_tests.py</code> - \u5e76\u53d1\u6d4b\u8bd5\u91cd\u590d - <code>tests/performance/performance_test_controller.py</code> - \u6027\u80fd\u6d4b\u8bd5\u63a7\u5236\u5668\u91cd\u590d - <code>tests/performance/performance_report_generator.py</code> - \u6027\u80fd\u62a5\u544a\u751f\u6210\u5668\u91cd\u590d - <code>tests/performance/results_collector.py</code> - \u7ed3\u679c\u6536\u96c6\u5668\u91cd\u590d - <code>tests/reports/</code> \u76ee\u5f55 - \u4e34\u65f6\u62a5\u544a\u6587\u4ef6 - <code>tests/.benchmarks/</code> \u76ee\u5f55 - \u4e34\u65f6\u57fa\u51c6\u6d4b\u8bd5\u6570\u636e</p> <p>\u5f71\u54cd\u5206\u6790\uff1a - \u5220\u9664\u4e86 7 \u4e2a\u91cd\u590d\u7684\u6027\u80fd\u6d4b\u8bd5\u6587\u4ef6 - \u6e05\u7406\u4e86 2 \u4e2a\u4e34\u65f6\u76ee\u5f55 - \u51cf\u5c11\u4e86\u7ea6 2000+ \u884c\u91cd\u590d\u4ee3\u7801</p>"},{"location":"test_refactoring_summary/#_5","title":"\u7b2c\u4e8c\u6b65\uff1a\u5408\u5e76\u76f8\u4f3c\u529f\u80fd\u7684\u6d4b\u8bd5\u6587\u4ef6 \u2705","text":"<p>\u4fdd\u7559\u7684\u7edf\u4e00\u6d4b\u8bd5\u6587\u4ef6\uff1a - <code>test_basic_performance.py</code> - \u57fa\u7840\u6027\u80fd\u6d4b\u8bd5 - <code>test_streaming_performance.py</code> - \u6d41\u5f0f\u5904\u7406\u6027\u80fd\u6d4b\u8bd5 - <code>test_controller_comprehensive.py</code> - \u63a7\u5236\u5668\u7efc\u5408\u6d4b\u8bd5 - <code>test_resource_monitoring_unified.py</code> - \u8d44\u6e90\u76d1\u63a7\u7edf\u4e00\u6d4b\u8bd5 - <code>test_memory_comprehensive.py</code> - \u5185\u5b58\u6d4b\u8bd5\u7efc\u5408 - <code>test_concurrency_unified.py</code> - \u5e76\u53d1\u6d4b\u8bd5\u7edf\u4e00</p> <p>\u5408\u5e76\u6548\u679c\uff1a - \u529f\u80fd\u76f8\u4f3c\u7684\u6d4b\u8bd5\u6587\u4ef6\u4ece 15+ \u4e2a\u51cf\u5c11\u5230 6 \u4e2a\u6838\u5fc3\u6587\u4ef6 - \u6d4b\u8bd5\u8986\u76d6\u7387\u4fdd\u6301\u4e0d\u53d8 - \u6d4b\u8bd5\u903b\u8f91\u66f4\u52a0\u6e05\u6670\u548c\u96c6\u4e2d</p>"},{"location":"test_refactoring_summary/#ci","title":"\u7b2c\u4e09\u6b65\uff1a\u66f4\u65b0\u6d4b\u8bd5\u914d\u7f6e\u548cCI\u6d41\u7a0b \u2705","text":"<p>\u914d\u7f6e\u6587\u4ef6\u66f4\u65b0\uff1a - \u66f4\u65b0\u4e86 <code>pytest.ini</code> \u914d\u7f6e\u6587\u4ef6\uff0c\u4fee\u590d\u7f16\u7801\u95ee\u9898 - \u8c03\u6574\u4e86\u6d4b\u8bd5\u8def\u5f84\u914d\u7f6e\uff0c\u6307\u5411\u91cd\u6784\u540e\u7684\u7edf\u4e00\u7ed3\u6784 - \u66f4\u65b0\u4e86\u6d4b\u8bd5\u6807\u8bb0\uff08markers\uff09\u914d\u7f6e - \u4fee\u590d\u4e86 <code>verify_reports.ps1</code> \u811a\u672c\u4e2d\u7684\u6587\u4ef6\u5f15\u7528</p> <p>CI\u6d41\u7a0b\u4f18\u5316\uff1a - \u6d4b\u8bd5\u811a\u672c\u8def\u5f84\u5df2\u66f4\u65b0 - \u6027\u80fd\u6d4b\u8bd5\u96c6\u6210\u9a8c\u8bc1\u5df2\u4fee\u590d - \u786e\u4fdd\u6240\u6709\u6d4b\u8bd5\u8def\u5f84\u6b63\u786e\u5f15\u7528</p>"},{"location":"test_refactoring_summary/#_6","title":"\u7b2c\u56db\u6b65\uff1a\u8fd0\u884c\u5b8c\u6574\u6d4b\u8bd5\u5957\u4ef6\u9a8c\u8bc1\u91cd\u6784\u7ed3\u679c \u2705","text":"<p>\u9a8c\u8bc1\u7ed3\u679c\uff1a - \u2705 \u5355\u5143\u6d4b\u8bd5\uff1a33\u4e2a\u6d4b\u8bd5\u901a\u8fc7 - \u2705 \u6027\u80fd\u6d4b\u8bd5\uff1a\u6536\u96c6\u5230 200+ \u4e2a\u6d4b\u8bd5\u9879\uff0c\u57fa\u7840\u6d4b\u8bd5\u8fd0\u884c\u6b63\u5e38 - \u2705 \u96c6\u6210\u6d4b\u8bd5\uff1a\u6536\u96c6\u5230 58 \u4e2a\u6d4b\u8bd5\u9879\uff0c\u7aef\u5230\u7aef\u6d4b\u8bd5\u8fd0\u884c\u6b63\u5e38 - \u2705 \u603b\u6d4b\u8bd5\u6570\u91cf\uff1a6625+ \u4e2a\u6d4b\u8bd5\u9879\u53ef\u6b63\u5e38\u6536\u96c6</p> <p>\u6d4b\u8bd5\u6267\u884c\u793a\u4f8b\uff1a <pre><code># \u5355\u5143\u6d4b\u8bd5\u9a8c\u8bc1\npython -m pytest tests/unit/utils/test_logger_comprehensive.py -v\n# \u7ed3\u679c\uff1a33 passed\n\n# \u6027\u80fd\u6d4b\u8bd5\u9a8c\u8bc1  \npython -m pytest tests/performance/test_basic_performance.py -v\n# \u7ed3\u679c\uff1a7 passed\n\n# \u96c6\u6210\u6d4b\u8bd5\u9a8c\u8bc1\npython -m pytest tests/integration/test_end_to_end.py::TestEndToEndIntegration::test_basic_chat_completion -v\n# \u7ed3\u679c\uff1a1 passed\n</code></pre></p>"},{"location":"test_refactoring_summary/#_7","title":"\u91cd\u6784\u6536\u76ca","text":""},{"location":"test_refactoring_summary/#1","title":"1. \u4ee3\u7801\u8d28\u91cf\u63d0\u5347","text":"<ul> <li>\u91cd\u590d\u4ee3\u7801\u51cf\u5c11\uff1a\u5220\u9664\u4e86\u7ea6 2000+ \u884c\u91cd\u590d\u4ee3\u7801</li> <li>\u7ed3\u6784\u4f18\u5316\uff1a\u6d4b\u8bd5\u6587\u4ef6\u4ece\u5206\u6563\u53d8\u4e3a\u96c6\u4e2d\u7ba1\u7406</li> <li>\u7ef4\u62a4\u6027\u63d0\u5347\uff1a\u76f8\u4f3c\u529f\u80fd\u5408\u5e76\uff0c\u51cf\u5c11\u7ef4\u62a4\u6210\u672c</li> </ul>"},{"location":"test_refactoring_summary/#2","title":"2. \u6d4b\u8bd5\u6548\u7387\u63d0\u5347","text":"<ul> <li>\u6267\u884c\u901f\u5ea6\uff1a\u51cf\u5c11\u4e86\u91cd\u590d\u6d4b\u8bd5\u7684\u6267\u884c\u65f6\u95f4</li> <li>\u8d44\u6e90\u5229\u7528\uff1a\u4f18\u5316\u4e86\u6d4b\u8bd5\u8d44\u6e90\u5206\u914d</li> <li>CI\u6548\u7387\uff1a\u6d4b\u8bd5\u6536\u96c6\u548c\u6267\u884c\u66f4\u52a0\u9ad8\u6548</li> </ul>"},{"location":"test_refactoring_summary/#3","title":"3. \u5f00\u53d1\u4f53\u9a8c\u6539\u5584","text":"<ul> <li>\u6587\u4ef6\u67e5\u627e\uff1a\u6d4b\u8bd5\u6587\u4ef6\u7ed3\u6784\u66f4\u6e05\u6670</li> <li>\u529f\u80fd\u5b9a\u4f4d\uff1a\u76f8\u5173\u6d4b\u8bd5\u96c6\u4e2d\u5728\u7edf\u4e00\u6587\u4ef6\u4e2d</li> <li>\u914d\u7f6e\u7ba1\u7406\uff1a\u6d4b\u8bd5\u914d\u7f6e\u66f4\u52a0\u7edf\u4e00\u548c\u89c4\u8303</li> </ul>"},{"location":"test_refactoring_summary/#_8","title":"\u98ce\u9669\u63a7\u5236\u4e0e\u56de\u6eda\u8ba1\u5212","text":""},{"location":"test_refactoring_summary/#_9","title":"\u5df2\u5b9e\u65bd\u7684\u98ce\u9669\u63a7\u5236","text":"<ol> <li>\u6e10\u8fdb\u5f0f\u91cd\u6784\uff1a\u5206\u6b65\u9aa4\u6267\u884c\uff0c\u6bcf\u6b65\u90fd\u8fdb\u884c\u9a8c\u8bc1</li> <li>\u6d4b\u8bd5\u8986\u76d6\u4fdd\u62a4\uff1a\u786e\u4fdd\u91cd\u6784\u540e\u6d4b\u8bd5\u8986\u76d6\u7387\u4e0d\u4e0b\u964d</li> <li>\u529f\u80fd\u9a8c\u8bc1\uff1a\u6bcf\u4e2a\u91cd\u6784\u6b65\u9aa4\u540e\u90fd\u8fd0\u884c\u76f8\u5173\u6d4b\u8bd5\u9a8c\u8bc1</li> </ol>"},{"location":"test_refactoring_summary/#_10","title":"\u56de\u6eda\u8ba1\u5212","text":"<p>\u5982\u9700\u56de\u6eda\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\uff1a 1. Git\u56de\u6eda\uff1a\u4f7f\u7528 <code>git revert</code> \u56de\u6eda\u5230\u91cd\u6784\u524d\u7684\u63d0\u4ea4 2. \u6587\u4ef6\u6062\u590d\uff1a\u4ece\u5907\u4efd\u4e2d\u6062\u590d\u5df2\u5220\u9664\u7684\u6587\u4ef6 3. \u914d\u7f6e\u8fd8\u539f\uff1a\u6062\u590d\u539f\u59cb\u7684 <code>pytest.ini</code> \u548c\u811a\u672c\u914d\u7f6e</p>"},{"location":"test_refactoring_summary/#_11","title":"\u540e\u7eed\u5efa\u8bae","text":""},{"location":"test_refactoring_summary/#1_1","title":"1. \u6301\u7eed\u76d1\u63a7","text":"<ul> <li>\u5b9a\u671f\u68c0\u67e5\u6d4b\u8bd5\u6267\u884c\u65f6\u95f4\u548c\u8d44\u6e90\u4f7f\u7528</li> <li>\u76d1\u63a7\u6d4b\u8bd5\u8986\u76d6\u7387\u53d8\u5316</li> <li>\u5173\u6ce8CI\u6d41\u7a0b\u7684\u7a33\u5b9a\u6027</li> </ul>"},{"location":"test_refactoring_summary/#2_1","title":"2. \u8fdb\u4e00\u6b65\u4f18\u5316","text":"<ul> <li>\u8003\u8651\u5f15\u5165\u6d4b\u8bd5\u5e76\u884c\u6267\u884c</li> <li>\u4f18\u5316\u6027\u80fd\u6d4b\u8bd5\u7684\u57fa\u51c6\u6570\u636e\u7ba1\u7406</li> <li>\u5b8c\u5584\u6d4b\u8bd5\u62a5\u544a\u548c\u5ea6\u91cf\u4f53\u7cfb</li> </ul>"},{"location":"test_refactoring_summary/#3_1","title":"3. \u6587\u6863\u7ef4\u62a4","text":"<ul> <li>\u66f4\u65b0\u6d4b\u8bd5\u76f8\u5173\u6587\u6863</li> <li>\u5b8c\u5584\u6d4b\u8bd5\u7f16\u5199\u6307\u5357</li> <li>\u5efa\u7acb\u6d4b\u8bd5\u6700\u4f73\u5b9e\u8df5\u6587\u6863</li> </ul>"},{"location":"test_refactoring_summary/#_12","title":"\u603b\u7ed3","text":"<p>\u672c\u6b21\u6d4b\u8bd5\u76ee\u5f55\u91cd\u6784\u6210\u529f\u5b9e\u73b0\u4e86\u4ee5\u4e0b\u76ee\u6807\uff1a - \u2705 \u5220\u9664\u91cd\u590d\u6587\u4ef6\uff0c\u51cf\u5c11\u7ef4\u62a4\u6210\u672c - \u2705 \u5408\u5e76\u76f8\u4f3c\u529f\u80fd\uff0c\u63d0\u5347\u4ee3\u7801\u8d28\u91cf - \u2705 \u4f18\u5316\u6d4b\u8bd5\u7ed3\u6784\uff0c\u6539\u5584\u5f00\u53d1\u4f53\u9a8c - \u2705 \u4fdd\u6301\u6d4b\u8bd5\u8986\u76d6\u7387\uff0c\u786e\u4fdd\u529f\u80fd\u5b8c\u6574\u6027 - \u2705 \u9a8c\u8bc1\u91cd\u6784\u7ed3\u679c\uff0c\u786e\u4fdd\u7cfb\u7edf\u7a33\u5b9a\u6027</p> <p>\u91cd\u6784\u540e\u7684\u6d4b\u8bd5\u76ee\u5f55\u7ed3\u6784\u66f4\u52a0\u6e05\u6670\u3001\u9ad8\u6548\uff0c\u4e3a\u9879\u76ee\u7684\u6301\u7eed\u53d1\u5c55\u5960\u5b9a\u4e86\u826f\u597d\u7684\u57fa\u7840\u3002</p> <p>\u91cd\u6784\u5b8c\u6210\u65f6\u95f4\uff1a 2024\u5e7412\u6708 \u6267\u884c\u4eba\uff1a AI Assistant \u9a8c\u8bc1\u72b6\u6001\uff1a \u5168\u90e8\u901a\u8fc7 \u2705</p>"}]}